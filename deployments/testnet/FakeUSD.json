{
  "address": "0xFb289cdE54cBC7B227607912f472c7f6449f6a69",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct inEuint32",
          "name": "_initialSupply",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AllowanceOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AllowanceUnderflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ECDSAInvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "ECDSAInvalidSignatureLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "ECDSAInvalidSignatureS",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorInsufficientFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPermit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidShortString",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PermitExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SignerNotMessageSender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SignerNotOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "StringTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TotalSupplyOverflow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ApprovalEncrypted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TransferEncrypted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "result",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "publicKey",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct Permission",
          "name": "permission",
          "type": "tuple"
        }
      ],
      "name": "allowanceEncrypted",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct inEuint32",
          "name": "value",
          "type": "tuple"
        }
      ],
      "name": "approveEncrypted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "publicKey",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct Permission",
          "name": "auth",
          "type": "tuple"
        }
      ],
      "name": "balanceOfEncrypted",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct inEuint32",
          "name": "encryptedAmount",
          "type": "tuple"
        }
      ],
      "name": "transferEncrypted",
      "outputs": [
        {
          "internalType": "euint32",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "euint32",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferEncrypted",
      "outputs": [
        {
          "internalType": "euint32",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct inEuint32",
          "name": "value",
          "type": "tuple"
        }
      ],
      "name": "transferFromEncrypted",
      "outputs": [
        {
          "internalType": "euint32",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "euint32",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFromEncrypted",
      "outputs": [
        {
          "internalType": "euint32",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "amount",
          "type": "uint32"
        }
      ],
      "name": "unwrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "amount",
          "type": "uint32"
        }
      ],
      "name": "wrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x71e55d2b83441fd075a1d43327b174875d827df094be976f8cc8b748f27be244",
  "receipt": {
    "to": null,
    "from": "0xdBB3a210DD84635ddfBE271A34a76E5CE41a48b3",
    "contractAddress": "0xFb289cdE54cBC7B227607912f472c7f6449f6a69",
    "transactionIndex": 1,
    "gasUsed": "460727119",
    "logsBloom": "0x
    "blockHash": "0x7d1e1119135255366bc72c0cbbd11d9059233a8ce997db4d3ad8925264da8fcc",
    "transactionHash": "0x71e55d2b83441fd075a1d43327b174875d827df094be976f8cc8b748f27be244",
    "logs": [],
    "blockNumber": 124063,
    "cumulativeGasUsed": "460727119",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "data": {
        "0": 16,
        "1": 8,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 254,
        "9": 102,
        "10": 219,
        "11": 44,
        "12": 16,
        "13": 133,
        "14": 76,
        "15": 113,
        "16": 62,
        "17": 192,
        "18": 46,
        "19": 121,
        "20": 127,
        "21": 85,
        "22": 78,
        "23": 65,
        "24": 197,
        "25": 150,
        "26": 187,
        "27": 68,
        "28": 134,
        "29": 50,
        "30": 153,
        "31": 67,
        "32": 136,
        "33": 81,
        "34": 106,
        "35": 5,
        "36": 244,
        "37": 102,
        "38": 10,
        "39": 58,
        "40": 162,
        "41": 36,
        "42": 203,
        "43": 23,
        "44": 138,
        "45": 195,
        "46": 143,
        "47": 132,
        "48": 144,
        "49": 91,
        "50": 105,
        "51": 81,
        "52": 86,
        "53": 83,
        "54": 7,
        "55": 152,
        "56": 74,
        "57": 230,
        "58": 128,
        "59": 146,
        "60": 228,
        "61": 12,
        "62": 24,
        "63": 181,
        "64": 131,
        "65": 234,
        "66": 208,
        "67": 165,
        "68": 238,
        "69": 64,
        "70": 5,
        "71": 106,
        "72": 123,
        "73": 145,
        "74": 108,
        "75": 48,
        "76": 159,
        "77": 193,
        "78": 220,
        "79": 147,
        "80": 130,
        "81": 250,
        "82": 84,
        "83": 114,
        "84": 168,
        "85": 180,
        "86": 224,
        "87": 204,
        "88": 147,
        "89": 127,
        "90": 101,
        "91": 234,
        "92": 181,
        "93": 157,
        "94": 112,
        "95": 134,
        "96": 161,
        "97": 179,
        "98": 99,
        "99": 206,
        "100": 48,
        "101": 196,
        "102": 66,
        "103": 64,
        "104": 136,
        "105": 230,
        "106": 202,
        "107": 72,
        "108": 176,
        "109": 21,
        "110": 137,
        "111": 187,
        "112": 103,
        "113": 7,
        "114": 179,
        "115": 241,
        "116": 208,
        "117": 68,
        "118": 237,
        "119": 109,
        "120": 12,
        "121": 108,
        "122": 229,
        "123": 134,
        "124": 111,
        "125": 29,
        "126": 198,
        "127": 239,
        "128": 52,
        "129": 41,
        "130": 75,
        "131": 122,
        "132": 87,
        "133": 134,
        "134": 74,
        "135": 36,
        "136": 250,
        "137": 63,
        "138": 157,
        "139": 118,
        "140": 245,
        "141": 53,
        "142": 72,
        "143": 168,
        "144": 47,
        "145": 185,
        "146": 165,
        "147": 11,
        "148": 37,
        "149": 7,
        "150": 120,
        "151": 116,
        "152": 17,
        "153": 99,
        "154": 8,
        "155": 145,
        "156": 246,
        "157": 145,
        "158": 12,
        "159": 49,
        "160": 210,
        "161": 45,
        "162": 151,
        "163": 94,
        "164": 120,
        "165": 186,
        "166": 126,
        "167": 16,
        "168": 254,
        "169": 147,
        "170": 18,
        "171": 46,
        "172": 47,
        "173": 112,
        "174": 124,
        "175": 93,
        "176": 58,
        "177": 37,
        "178": 75,
        "179": 165,
        "180": 2,
        "181": 36,
        "182": 225,
        "183": 244,
        "184": 168,
        "185": 245,
        "186": 177,
        "187": 194,
        "188": 86,
        "189": 239,
        "190": 127,
        "191": 77,
        "192": 84,
        "193": 236,
        "194": 201,
        "195": 43,
        "196": 61,
        "197": 21,
        "198": 26,
        "199": 150,
        "200": 126,
        "201": 253,
        "202": 129,
        "203": 134,
        "204": 236,
        "205": 159,
        "206": 59,
        "207": 148,
        "208": 81,
        "209": 132,
        "210": 100,
        "211": 0,
        "212": 113,
        "213": 147,
        "214": 120,
        "215": 83,
        "216": 177,
        "217": 73,
        "218": 146,
        "219": 3,
        "220": 123,
        "221": 97,
        "222": 157,
        "223": 97,
        "224": 34,
        "225": 43,
        "226": 102,
        "227": 56,
        "228": 139,
        "229": 92,
        "230": 12,
        "231": 116,
        "232": 226,
        "233": 96,
        "234": 117,
        "235": 50,
        "236": 186,
        "237": 163,
        "238": 186,
        "239": 20,
        "240": 117,
        "241": 176,
        "242": 223,
        "243": 67,
        "244": 203,
        "245": 212,
        "246": 47,
        "247": 246,
        "248": 112,
        "249": 5,
        "250": 206,
        "251": 231,
        "252": 241,
        "253": 133,
        "254": 22,
        "255": 235,
        "256": 118,
        "257": 67,
        "258": 247,
        "259": 167,
        "260": 232,
        "261": 134,
        "262": 211,
        "263": 237,
        "264": 114,
        "265": 22,
        "266": 221,
        "267": 239,
        "268": 228,
        "269": 85,
        "270": 23,
        "271": 141,
        "272": 68,
        "273": 91,
        "274": 66,
        "275": 85,
        "276": 237,
        "277": 37,
        "278": 195,
        "279": 210,
        "280": 106,
        "281": 34,
        "282": 247,
        "283": 94,
        "284": 7,
        "285": 57,
        "286": 247,
        "287": 145,
        "288": 173,
        "289": 211,
        "290": 37,
        "291": 222,
        "292": 68,
        "293": 210,
        "294": 189,
        "295": 124,
        "296": 31,
        "297": 73,
        "298": 54,
        "299": 239,
        "300": 14,
        "301": 29,
        "302": 115,
        "303": 116,
        "304": 237,
        "305": 26,
        "306": 29,
        "307": 12,
        "308": 67,
        "309": 43,
        "310": 63,
        "311": 22,
        "312": 84,
        "313": 162,
        "314": 158,
        "315": 34,
        "316": 163,
        "317": 241,
        "318": 136,
        "319": 203,
        "320": 186,
        "321": 83,
        "322": 19,
        "323": 208,
        "324": 38,
        "325": 215,
        "326": 48,
        "327": 124,
        "328": 231,
        "329": 144,
        "330": 130,
        "331": 22,
        "332": 4,
        "333": 4,
        "334": 19,
        "335": 122,
        "336": 232,
        "337": 243,
        "338": 19,
        "339": 50,
        "340": 144,
        "341": 30,
        "342": 150,
        "343": 254,
        "344": 243,
        "345": 51,
        "346": 60,
        "347": 235,
        "348": 62,
        "349": 41,
        "350": 221,
        "351": 185,
        "352": 83,
        "353": 113,
        "354": 206,
        "355": 104,
        "356": 214,
        "357": 156,
        "358": 101,
        "359": 90,
        "360": 85,
        "361": 249,
        "362": 93,
        "363": 166,
        "364": 88,
        "365": 225,
        "366": 9,
        "367": 242,
        "368": 12,
        "369": 206,
        "370": 65,
        "371": 100,
        "372": 217,
        "373": 161,
        "374": 48,
        "375": 131,
        "376": 40,
        "377": 36,
        "378": 22,
        "379": 226,
        "380": 147,
        "381": 156,
        "382": 82,
        "383": 51,
        "384": 201,
        "385": 174,
        "386": 104,
        "387": 227,
        "388": 213,
        "389": 41,
        "390": 68,
        "391": 238,
        "392": 150,
        "393": 210,
        "394": 216,
        "395": 20,
        "396": 134,
        "397": 22,
        "398": 51,
        "399": 99,
        "400": 181,
        "401": 243,
        "402": 80,
        "403": 215,
        "404": 146,
        "405": 45,
        "406": 124,
        "407": 221,
        "408": 89,
        "409": 214,
        "410": 90,
        "411": 242,
        "412": 144,
        "413": 62,
        "414": 204,
        "415": 100,
        "416": 146,
        "417": 61,
        "418": 142,
        "419": 147,
        "420": 78,
        "421": 22,
        "422": 201,
        "423": 167,
        "424": 131,
        "425": 65,
        "426": 51,
        "427": 5,
        "428": 86,
        "429": 216,
        "430": 37,
        "431": 10,
        "432": 91,
        "433": 212,
        "434": 255,
        "435": 193,
        "436": 180,
        "437": 200,
        "438": 150,
        "439": 101,
        "440": 222,
        "441": 123,
        "442": 81,
        "443": 70,
        "444": 137,
        "445": 37,
        "446": 155,
        "447": 79,
        "448": 173,
        "449": 48,
        "450": 199,
        "451": 63,
        "452": 123,
        "453": 62,
        "454": 227,
        "455": 33,
        "456": 220,
        "457": 209,
        "458": 228,
        "459": 35,
        "460": 227,
        "461": 30,
        "462": 21,
        "463": 20,
        "464": 153,
        "465": 17,
        "466": 56,
        "467": 113,
        "468": 56,
        "469": 4,
        "470": 82,
        "471": 149,
        "472": 227,
        "473": 195,
        "474": 214,
        "475": 106,
        "476": 60,
        "477": 85,
        "478": 24,
        "479": 66,
        "480": 51,
        "481": 196,
        "482": 107,
        "483": 133,
        "484": 234,
        "485": 150,
        "486": 111,
        "487": 202,
        "488": 78,
        "489": 122,
        "490": 188,
        "491": 251,
        "492": 56,
        "493": 84,
        "494": 150,
        "495": 24,
        "496": 250,
        "497": 196,
        "498": 45,
        "499": 18,
        "500": 189,
        "501": 179,
        "502": 40,
        "503": 174,
        "504": 179,
        "505": 191,
        "506": 73,
        "507": 62,
        "508": 135,
        "509": 187,
        "510": 192,
        "511": 102,
        "512": 165,
        "513": 187,
        "514": 236,
        "515": 60,
        "516": 244,
        "517": 167,
        "518": 35,
        "519": 115,
        "520": 179,
        "521": 117,
        "522": 254,
        "523": 148,
        "524": 79,
        "525": 240,
        "526": 152,
        "527": 65,
        "528": 77,
        "529": 204,
        "530": 141,
        "531": 235,
        "532": 116,
        "533": 254,
        "534": 159,
        "535": 110,
        "536": 240,
        "537": 236,
        "538": 157,
        "539": 31,
        "540": 106,
        "541": 243,
        "542": 219,
        "543": 130,
        "544": 181,
        "545": 118,
        "546": 228,
        "547": 42,
        "548": 0,
        "549": 176,
        "550": 135,
        "551": 238,
        "552": 153,
        "553": 148,
        "554": 101,
        "555": 165,
        "556": 59,
        "557": 229,
        "558": 80,
        "559": 251,
        "560": 152,
        "561": 14,
        "562": 250,
        "563": 187,
        "564": 239,
        "565": 180,
        "566": 89,
        "567": 80,
        "568": 143,
        "569": 65,
        "570": 31,
        "571": 86,
        "572": 66,
        "573": 204,
        "574": 121,
        "575": 232,
        "576": 234,
        "577": 150,
        "578": 218,
        "579": 72,
        "580": 122,
        "581": 184,
        "582": 94,
        "583": 111,
        "584": 213,
        "585": 48,
        "586": 83,
        "587": 226,
        "588": 250,
        "589": 237,
        "590": 59,
        "591": 82,
        "592": 6,
        "593": 6,
        "594": 154,
        "595": 227,
        "596": 4,
        "597": 207,
        "598": 67,
        "599": 226,
        "600": 247,
        "601": 58,
        "602": 205,
        "603": 60,
        "604": 109,
        "605": 246,
        "606": 233,
        "607": 106,
        "608": 117,
        "609": 83,
        "610": 91,
        "611": 181,
        "612": 114,
        "613": 227,
        "614": 243,
        "615": 237,
        "616": 73,
        "617": 44,
        "618": 183,
        "619": 233,
        "620": 132,
        "621": 21,
        "622": 128,
        "623": 54,
        "624": 175,
        "625": 213,
        "626": 222,
        "627": 72,
        "628": 182,
        "629": 49,
        "630": 220,
        "631": 227,
        "632": 227,
        "633": 93,
        "634": 64,
        "635": 236,
        "636": 246,
        "637": 201,
        "638": 139,
        "639": 244,
        "640": 61,
        "641": 35,
        "642": 240,
        "643": 11,
        "644": 159,
        "645": 232,
        "646": 6,
        "647": 228,
        "648": 86,
        "649": 118,
        "650": 234,
        "651": 85,
        "652": 11,
        "653": 70,
        "654": 0,
        "655": 81,
        "656": 233,
        "657": 106,
        "658": 195,
        "659": 99,
        "660": 15,
        "661": 227,
        "662": 234,
        "663": 83,
        "664": 170,
        "665": 70,
        "666": 111,
        "667": 13,
        "668": 187,
        "669": 185,
        "670": 98,
        "671": 198,
        "672": 232,
        "673": 231,
        "674": 210,
        "675": 120,
        "676": 247,
        "677": 50,
        "678": 23,
        "679": 145,
        "680": 177,
        "681": 195,
        "682": 57,
        "683": 190,
        "684": 103,
        "685": 122,
        "686": 5,
        "687": 161,
        "688": 8,
        "689": 173,
        "690": 110,
        "691": 188,
        "692": 169,
        "693": 211,
        "694": 4,
        "695": 111,
        "696": 21,
        "697": 108,
        "698": 185,
        "699": 141,
        "700": 156,
        "701": 111,
        "702": 90,
        "703": 108,
        "704": 99,
        "705": 127,
        "706": 51,
        "707": 200,
        "708": 126,
        "709": 83,
        "710": 205,
        "711": 252,
        "712": 65,
        "713": 42,
        "714": 205,
        "715": 26,
        "716": 34,
        "717": 17,
        "718": 190,
        "719": 145,
        "720": 232,
        "721": 19,
        "722": 37,
        "723": 89,
        "724": 169,
        "725": 156,
        "726": 95,
        "727": 54,
        "728": 57,
        "729": 20,
        "730": 0,
        "731": 25,
        "732": 20,
        "733": 15,
        "734": 87,
        "735": 24,
        "736": 116,
        "737": 241,
        "738": 254,
        "739": 189,
        "740": 90,
        "741": 252,
        "742": 109,
        "743": 178,
        "744": 250,
        "745": 143,
        "746": 110,
        "747": 18,
        "748": 42,
        "749": 210,
        "750": 61,
        "751": 241,
        "752": 167,
        "753": 187,
        "754": 213,
        "755": 219,
        "756": 70,
        "757": 0,
        "758": 203,
        "759": 185,
        "760": 60,
        "761": 66,
        "762": 39,
        "763": 87,
        "764": 235,
        "765": 129,
        "766": 12,
        "767": 5,
        "768": 49,
        "769": 205,
        "770": 160,
        "771": 121,
        "772": 241,
        "773": 9,
        "774": 111,
        "775": 12,
        "776": 135,
        "777": 72,
        "778": 138,
        "779": 237,
        "780": 243,
        "781": 177,
        "782": 137,
        "783": 56,
        "784": 161,
        "785": 178,
        "786": 188,
        "787": 30,
        "788": 74,
        "789": 192,
        "790": 47,
        "791": 249,
        "792": 184,
        "793": 70,
        "794": 195,
        "795": 39,
        "796": 214,
        "797": 171,
        "798": 200,
        "799": 179,
        "800": 163,
        "801": 24,
        "802": 105,
        "803": 212,
        "804": 252,
        "805": 150,
        "806": 203,
        "807": 227,
        "808": 57,
        "809": 208,
        "810": 110,
        "811": 6,
        "812": 185,
        "813": 178,
        "814": 87,
        "815": 119,
        "816": 213,
        "817": 226,
        "818": 185,
        "819": 69,
        "820": 9,
        "821": 248,
        "822": 145,
        "823": 214,
        "824": 195,
        "825": 110,
        "826": 221,
        "827": 114,
        "828": 183,
        "829": 105,
        "830": 95,
        "831": 164,
        "832": 82,
        "833": 244,
        "834": 175,
        "835": 254,
        "836": 176,
        "837": 202,
        "838": 113,
        "839": 100,
        "840": 159,
        "841": 113,
        "842": 74,
        "843": 180,
        "844": 211,
        "845": 210,
        "846": 25,
        "847": 153,
        "848": 21,
        "849": 62,
        "850": 141,
        "851": 203,
        "852": 148,
        "853": 64,
        "854": 190,
        "855": 189,
        "856": 202,
        "857": 72,
        "858": 20,
        "859": 236,
        "860": 53,
        "861": 139,
        "862": 71,
        "863": 96,
        "864": 192,
        "865": 127,
        "866": 205,
        "867": 134,
        "868": 39,
        "869": 109,
        "870": 171,
        "871": 100,
        "872": 172,
        "873": 151,
        "874": 181,
        "875": 135,
        "876": 245,
        "877": 110,
        "878": 76,
        "879": 190,
        "880": 21,
        "881": 132,
        "882": 193,
        "883": 29,
        "884": 252,
        "885": 72,
        "886": 8,
        "887": 208,
        "888": 164,
        "889": 41,
        "890": 37,
        "891": 213,
        "892": 195,
        "893": 239,
        "894": 214,
        "895": 136,
        "896": 193,
        "897": 208,
        "898": 171,
        "899": 167,
        "900": 63,
        "901": 174,
        "902": 66,
        "903": 187,
        "904": 41,
        "905": 213,
        "906": 161,
        "907": 45,
        "908": 164,
        "909": 145,
        "910": 176,
        "911": 114,
        "912": 30,
        "913": 212,
        "914": 199,
        "915": 13,
        "916": 46,
        "917": 114,
        "918": 52,
        "919": 236,
        "920": 230,
        "921": 26,
        "922": 130,
        "923": 151,
        "924": 25,
        "925": 198,
        "926": 19,
        "927": 243,
        "928": 46,
        "929": 226,
        "930": 245,
        "931": 68,
        "932": 158,
        "933": 239,
        "934": 242,
        "935": 175,
        "936": 70,
        "937": 20,
        "938": 242,
        "939": 221,
        "940": 11,
        "941": 55,
        "942": 184,
        "943": 88,
        "944": 199,
        "945": 13,
        "946": 127,
        "947": 60,
        "948": 237,
        "949": 173,
        "950": 198,
        "951": 223,
        "952": 108,
        "953": 83,
        "954": 42,
        "955": 122,
        "956": 3,
        "957": 35,
        "958": 29,
        "959": 161,
        "960": 158,
        "961": 20,
        "962": 53,
        "963": 55,
        "964": 226,
        "965": 138,
        "966": 36,
        "967": 93,
        "968": 83,
        "969": 32,
        "970": 234,
        "971": 193,
        "972": 66,
        "973": 179,
        "974": 8,
        "975": 0,
        "976": 110,
        "977": 167,
        "978": 159,
        "979": 198,
        "980": 72,
        "981": 20,
        "982": 42,
        "983": 83,
        "984": 201,
        "985": 254,
        "986": 128,
        "987": 190,
        "988": 115,
        "989": 124,
        "990": 26,
        "991": 63,
        "992": 228,
        "993": 211,
        "994": 97,
        "995": 141,
        "996": 156,
        "997": 8,
        "998": 152,
        "999": 132,
        "1000": 81,
        "1001": 164,
        "1002": 183,
        "1003": 88,
        "1004": 232,
        "1005": 78,
        "1006": 190,
        "1007": 102,
        "1008": 236,
        "1009": 206,
        "1010": 86,
        "1011": 88,
        "1012": 49,
        "1013": 36,
        "1014": 133,
        "1015": 178,
        "1016": 226,
        "1017": 105,
        "1018": 22,
        "1019": 2,
        "1020": 128,
        "1021": 231,
        "1022": 46,
        "1023": 209,
        "1024": 240,
        "1025": 80,
        "1026": 46,
        "1027": 112,
        "1028": 8,
        "1029": 241,
        "1030": 22,
        "1031": 87,
        "1032": 177,
        "1033": 28,
        "1034": 149,
        "1035": 200,
        "1036": 44,
        "1037": 194,
        "1038": 190,
        "1039": 189,
        "1040": 145,
        "1041": 207,
        "1042": 1,
        "1043": 228,
        "1044": 97,
        "1045": 245,
        "1046": 220,
        "1047": 44,
        "1048": 249,
        "1049": 152,
        "1050": 103,
        "1051": 26,
        "1052": 215,
        "1053": 233,
        "1054": 223,
        "1055": 64,
        "1056": 23,
        "1057": 121,
        "1058": 200,
        "1059": 203,
        "1060": 135,
        "1061": 163,
        "1062": 119,
        "1063": 161,
        "1064": 48,
        "1065": 223,
        "1066": 228,
        "1067": 147,
        "1068": 147,
        "1069": 226,
        "1070": 199,
        "1071": 165,
        "1072": 2,
        "1073": 122,
        "1074": 180,
        "1075": 217,
        "1076": 86,
        "1077": 160,
        "1078": 104,
        "1079": 239,
        "1080": 158,
        "1081": 142,
        "1082": 252,
        "1083": 119,
        "1084": 255,
        "1085": 48,
        "1086": 248,
        "1087": 125,
        "1088": 142,
        "1089": 98,
        "1090": 126,
        "1091": 45,
        "1092": 4,
        "1093": 171,
        "1094": 98,
        "1095": 54,
        "1096": 16,
        "1097": 34,
        "1098": 53,
        "1099": 71,
        "1100": 17,
        "1101": 95,
        "1102": 253,
        "1103": 214,
        "1104": 18,
        "1105": 42,
        "1106": 192,
        "1107": 33,
        "1108": 106,
        "1109": 122,
        "1110": 2,
        "1111": 31,
        "1112": 191,
        "1113": 216,
        "1114": 18,
        "1115": 204,
        "1116": 86,
        "1117": 247,
        "1118": 178,
        "1119": 143,
        "1120": 200,
        "1121": 227,
        "1122": 152,
        "1123": 87,
        "1124": 250,
        "1125": 109,
        "1126": 120,
        "1127": 125,
        "1128": 104,
        "1129": 6,
        "1130": 148,
        "1131": 56,
        "1132": 154,
        "1133": 36,
        "1134": 66,
        "1135": 108,
        "1136": 134,
        "1137": 164,
        "1138": 129,
        "1139": 238,
        "1140": 201,
        "1141": 151,
        "1142": 65,
        "1143": 135,
        "1144": 243,
        "1145": 239,
        "1146": 44,
        "1147": 29,
        "1148": 62,
        "1149": 234,
        "1150": 31,
        "1151": 179,
        "1152": 17,
        "1153": 119,
        "1154": 126,
        "1155": 251,
        "1156": 133,
        "1157": 179,
        "1158": 206,
        "1159": 216,
        "1160": 90,
        "1161": 35,
        "1162": 3,
        "1163": 139,
        "1164": 10,
        "1165": 164,
        "1166": 45,
        "1167": 151,
        "1168": 150,
        "1169": 178,
        "1170": 93,
        "1171": 81,
        "1172": 118,
        "1173": 89,
        "1174": 203,
        "1175": 160,
        "1176": 66,
        "1177": 213,
        "1178": 7,
        "1179": 42,
        "1180": 198,
        "1181": 233,
        "1182": 177,
        "1183": 7,
        "1184": 0,
        "1185": 187,
        "1186": 224,
        "1187": 31,
        "1188": 85,
        "1189": 136,
        "1190": 86,
        "1191": 44,
        "1192": 105,
        "1193": 103,
        "1194": 8,
        "1195": 133,
        "1196": 20,
        "1197": 54,
        "1198": 110,
        "1199": 223,
        "1200": 9,
        "1201": 161,
        "1202": 128,
        "1203": 155,
        "1204": 247,
        "1205": 189,
        "1206": 216,
        "1207": 139,
        "1208": 242,
        "1209": 42,
        "1210": 119,
        "1211": 24,
        "1212": 108,
        "1213": 196,
        "1214": 102,
        "1215": 24,
        "1216": 121,
        "1217": 139,
        "1218": 210,
        "1219": 105,
        "1220": 154,
        "1221": 209,
        "1222": 115,
        "1223": 201,
        "1224": 78,
        "1225": 162,
        "1226": 71,
        "1227": 60,
        "1228": 24,
        "1229": 37,
        "1230": 82,
        "1231": 248,
        "1232": 206,
        "1233": 54,
        "1234": 94,
        "1235": 171,
        "1236": 153,
        "1237": 138,
        "1238": 204,
        "1239": 8,
        "1240": 78,
        "1241": 201,
        "1242": 27,
        "1243": 193,
        "1244": 32,
        "1245": 121,
        "1246": 61,
        "1247": 181,
        "1248": 40,
        "1249": 213,
        "1250": 134,
        "1251": 77,
        "1252": 246,
        "1253": 131,
        "1254": 42,
        "1255": 236,
        "1256": 41,
        "1257": 171,
        "1258": 251,
        "1259": 16,
        "1260": 172,
        "1261": 156,
        "1262": 70,
        "1263": 183,
        "1264": 132,
        "1265": 129,
        "1266": 81,
        "1267": 252,
        "1268": 248,
        "1269": 68,
        "1270": 190,
        "1271": 31,
        "1272": 7,
        "1273": 2,
        "1274": 134,
        "1275": 40,
        "1276": 44,
        "1277": 100,
        "1278": 153,
        "1279": 116,
        "1280": 68,
        "1281": 93,
        "1282": 132,
        "1283": 35,
        "1284": 24,
        "1285": 162,
        "1286": 204,
        "1287": 28,
        "1288": 138,
        "1289": 56,
        "1290": 209,
        "1291": 250,
        "1292": 206,
        "1293": 147,
        "1294": 233,
        "1295": 180,
        "1296": 156,
        "1297": 190,
        "1298": 208,
        "1299": 17,
        "1300": 242,
        "1301": 54,
        "1302": 113,
        "1303": 141,
        "1304": 53,
        "1305": 62,
        "1306": 214,
        "1307": 251,
        "1308": 56,
        "1309": 74,
        "1310": 202,
        "1311": 214,
        "1312": 24,
        "1313": 222,
        "1314": 36,
        "1315": 9,
        "1316": 66,
        "1317": 218,
        "1318": 144,
        "1319": 183,
        "1320": 95,
        "1321": 140,
        "1322": 106,
        "1323": 88,
        "1324": 196,
        "1325": 58,
        "1326": 112,
        "1327": 87,
        "1328": 221,
        "1329": 17,
        "1330": 0,
        "1331": 3,
        "1332": 204,
        "1333": 175,
        "1334": 152,
        "1335": 98,
        "1336": 227,
        "1337": 192,
        "1338": 172,
        "1339": 47,
        "1340": 211,
        "1341": 19,
        "1342": 132,
        "1343": 34,
        "1344": 22,
        "1345": 251,
        "1346": 153,
        "1347": 45,
        "1348": 138,
        "1349": 139,
        "1350": 172,
        "1351": 121,
        "1352": 228,
        "1353": 80,
        "1354": 209,
        "1355": 221,
        "1356": 70,
        "1357": 124,
        "1358": 202,
        "1359": 32,
        "1360": 186,
        "1361": 200,
        "1362": 21,
        "1363": 213,
        "1364": 188,
        "1365": 100,
        "1366": 206,
        "1367": 113,
        "1368": 212,
        "1369": 185,
        "1370": 56,
        "1371": 250,
        "1372": 223,
        "1373": 24,
        "1374": 148,
        "1375": 71,
        "1376": 100,
        "1377": 164,
        "1378": 231,
        "1379": 87,
        "1380": 190,
        "1381": 159,
        "1382": 165,
        "1383": 21,
        "1384": 67,
        "1385": 35,
        "1386": 167,
        "1387": 15,
        "1388": 161,
        "1389": 117,
        "1390": 234,
        "1391": 14,
        "1392": 134,
        "1393": 20,
        "1394": 228,
        "1395": 137,
        "1396": 251,
        "1397": 248,
        "1398": 56,
        "1399": 191,
        "1400": 189,
        "1401": 35,
        "1402": 223,
        "1403": 209,
        "1404": 74,
        "1405": 90,
        "1406": 124,
        "1407": 140,
        "1408": 8,
        "1409": 97,
        "1410": 120,
        "1411": 134,
        "1412": 15,
        "1413": 6,
        "1414": 1,
        "1415": 129,
        "1416": 239,
        "1417": 103,
        "1418": 9,
        "1419": 163,
        "1420": 244,
        "1421": 174,
        "1422": 22,
        "1423": 144,
        "1424": 112,
        "1425": 61,
        "1426": 11,
        "1427": 253,
        "1428": 216,
        "1429": 104,
        "1430": 140,
        "1431": 146,
        "1432": 22,
        "1433": 12,
        "1434": 196,
        "1435": 239,
        "1436": 57,
        "1437": 69,
        "1438": 198,
        "1439": 117,
        "1440": 172,
        "1441": 137,
        "1442": 166,
        "1443": 63,
        "1444": 188,
        "1445": 102,
        "1446": 208,
        "1447": 43,
        "1448": 130,
        "1449": 218,
        "1450": 132,
        "1451": 229,
        "1452": 85,
        "1453": 14,
        "1454": 46,
        "1455": 89,
        "1456": 87,
        "1457": 219,
        "1458": 102,
        "1459": 11,
        "1460": 204,
        "1461": 19,
        "1462": 231,
        "1463": 213,
        "1464": 179,
        "1465": 156,
        "1466": 85,
        "1467": 186,
        "1468": 74,
        "1469": 137,
        "1470": 221,
        "1471": 126,
        "1472": 27,
        "1473": 226,
        "1474": 236,
        "1475": 85,
        "1476": 179,
        "1477": 22,
        "1478": 131,
        "1479": 120,
        "1480": 90,
        "1481": 143,
        "1482": 18,
        "1483": 105,
        "1484": 92,
        "1485": 62,
        "1486": 228,
        "1487": 33,
        "1488": 122,
        "1489": 125,
        "1490": 186,
        "1491": 102,
        "1492": 194,
        "1493": 173,
        "1494": 119,
        "1495": 134,
        "1496": 216,
        "1497": 23,
        "1498": 118,
        "1499": 2,
        "1500": 151,
        "1501": 71,
        "1502": 144,
        "1503": 97,
        "1504": 89,
        "1505": 208,
        "1506": 74,
        "1507": 185,
        "1508": 217,
        "1509": 137,
        "1510": 94,
        "1511": 7,
        "1512": 216,
        "1513": 15,
        "1514": 213,
        "1515": 31,
        "1516": 116,
        "1517": 41,
        "1518": 246,
        "1519": 183,
        "1520": 206,
        "1521": 214,
        "1522": 60,
        "1523": 61,
        "1524": 138,
        "1525": 119,
        "1526": 21,
        "1527": 239,
        "1528": 204,
        "1529": 47,
        "1530": 150,
        "1531": 153,
        "1532": 173,
        "1533": 82,
        "1534": 97,
        "1535": 166,
        "1536": 200,
        "1537": 205,
        "1538": 53,
        "1539": 218,
        "1540": 141,
        "1541": 134,
        "1542": 244,
        "1543": 159,
        "1544": 136,
        "1545": 237,
        "1546": 29,
        "1547": 94,
        "1548": 202,
        "1549": 129,
        "1550": 181,
        "1551": 25,
        "1552": 142,
        "1553": 87,
        "1554": 164,
        "1555": 120,
        "1556": 214,
        "1557": 57,
        "1558": 202,
        "1559": 39,
        "1560": 171,
        "1561": 233,
        "1562": 75,
        "1563": 117,
        "1564": 231,
        "1565": 226,
        "1566": 96,
        "1567": 66,
        "1568": 69,
        "1569": 98,
        "1570": 245,
        "1571": 120,
        "1572": 146,
        "1573": 77,
        "1574": 154,
        "1575": 44,
        "1576": 124,
        "1577": 3,
        "1578": 230,
        "1579": 188,
        "1580": 114,
        "1581": 46,
        "1582": 130,
        "1583": 228,
        "1584": 158,
        "1585": 158,
        "1586": 7,
        "1587": 210,
        "1588": 51,
        "1589": 4,
        "1590": 202,
        "1591": 195,
        "1592": 62,
        "1593": 134,
        "1594": 20,
        "1595": 191,
        "1596": 60,
        "1597": 198,
        "1598": 110,
        "1599": 7,
        "1600": 155,
        "1601": 128,
        "1602": 93,
        "1603": 215,
        "1604": 102,
        "1605": 62,
        "1606": 227,
        "1607": 91,
        "1608": 16,
        "1609": 17,
        "1610": 93,
        "1611": 87,
        "1612": 235,
        "1613": 118,
        "1614": 176,
        "1615": 19,
        "1616": 230,
        "1617": 249,
        "1618": 46,
        "1619": 72,
        "1620": 174,
        "1621": 211,
        "1622": 152,
        "1623": 79,
        "1624": 148,
        "1625": 127,
        "1626": 158,
        "1627": 141,
        "1628": 188,
        "1629": 235,
        "1630": 60,
        "1631": 93,
        "1632": 92,
        "1633": 127,
        "1634": 85,
        "1635": 91,
        "1636": 197,
        "1637": 29,
        "1638": 15,
        "1639": 29,
        "1640": 152,
        "1641": 90,
        "1642": 238,
        "1643": 116,
        "1644": 23,
        "1645": 143,
        "1646": 46,
        "1647": 231,
        "1648": 26,
        "1649": 139,
        "1650": 197,
        "1651": 227,
        "1652": 249,
        "1653": 220,
        "1654": 169,
        "1655": 169,
        "1656": 224,
        "1657": 169,
        "1658": 206,
        "1659": 94,
        "1660": 201,
        "1661": 0,
        "1662": 163,
        "1663": 115,
        "1664": 253,
        "1665": 45,
        "1666": 82,
        "1667": 10,
        "1668": 228,
        "1669": 123,
        "1670": 171,
        "1671": 78,
        "1672": 178,
        "1673": 194,
        "1674": 156,
        "1675": 186,
        "1676": 0,
        "1677": 253,
        "1678": 235,
        "1679": 114,
        "1680": 79,
        "1681": 99,
        "1682": 47,
        "1683": 14,
        "1684": 168,
        "1685": 107,
        "1686": 48,
        "1687": 16,
        "1688": 100,
        "1689": 88,
        "1690": 196,
        "1691": 73,
        "1692": 122,
        "1693": 185,
        "1694": 10,
        "1695": 73,
        "1696": 191,
        "1697": 199,
        "1698": 210,
        "1699": 131,
        "1700": 56,
        "1701": 170,
        "1702": 213,
        "1703": 177,
        "1704": 122,
        "1705": 221,
        "1706": 117,
        "1707": 108,
        "1708": 82,
        "1709": 134,
        "1710": 166,
        "1711": 158,
        "1712": 194,
        "1713": 5,
        "1714": 160,
        "1715": 195,
        "1716": 1,
        "1717": 214,
        "1718": 140,
        "1719": 200,
        "1720": 90,
        "1721": 88,
        "1722": 54,
        "1723": 228,
        "1724": 54,
        "1725": 194,
        "1726": 8,
        "1727": 102,
        "1728": 158,
        "1729": 209,
        "1730": 215,
        "1731": 255,
        "1732": 212,
        "1733": 187,
        "1734": 216,
        "1735": 20,
        "1736": 53,
        "1737": 131,
        "1738": 148,
        "1739": 64,
        "1740": 85,
        "1741": 80,
        "1742": 248,
        "1743": 64,
        "1744": 135,
        "1745": 237,
        "1746": 53,
        "1747": 27,
        "1748": 87,
        "1749": 43,
        "1750": 128,
        "1751": 204,
        "1752": 22,
        "1753": 137,
        "1754": 91,
        "1755": 18,
        "1756": 206,
        "1757": 238,
        "1758": 157,
        "1759": 219,
        "1760": 199,
        "1761": 67,
        "1762": 30,
        "1763": 19,
        "1764": 140,
        "1765": 11,
        "1766": 173,
        "1767": 159,
        "1768": 56,
        "1769": 66,
        "1770": 172,
        "1771": 182,
        "1772": 65,
        "1773": 157,
        "1774": 201,
        "1775": 250,
        "1776": 68,
        "1777": 141,
        "1778": 106,
        "1779": 194,
        "1780": 21,
        "1781": 220,
        "1782": 131,
        "1783": 116,
        "1784": 244,
        "1785": 63,
        "1786": 97,
        "1787": 193,
        "1788": 180,
        "1789": 111,
        "1790": 168,
        "1791": 65,
        "1792": 236,
        "1793": 97,
        "1794": 106,
        "1795": 246,
        "1796": 169,
        "1797": 242,
        "1798": 121,
        "1799": 239,
        "1800": 13,
        "1801": 77,
        "1802": 56,
        "1803": 31,
        "1804": 81,
        "1805": 249,
        "1806": 62,
        "1807": 152,
        "1808": 150,
        "1809": 162,
        "1810": 193,
        "1811": 28,
        "1812": 213,
        "1813": 87,
        "1814": 122,
        "1815": 2,
        "1816": 157,
        "1817": 99,
        "1818": 152,
        "1819": 219,
        "1820": 151,
        "1821": 186,
        "1822": 35,
        "1823": 107,
        "1824": 177,
        "1825": 115,
        "1826": 203,
        "1827": 7,
        "1828": 139,
        "1829": 148,
        "1830": 15,
        "1831": 185,
        "1832": 201,
        "1833": 230,
        "1834": 242,
        "1835": 126,
        "1836": 47,
        "1837": 137,
        "1838": 5,
        "1839": 148,
        "1840": 132,
        "1841": 4,
        "1842": 227,
        "1843": 251,
        "1844": 28,
        "1845": 34,
        "1846": 45,
        "1847": 50,
        "1848": 36,
        "1849": 197,
        "1850": 123,
        "1851": 39,
        "1852": 146,
        "1853": 174,
        "1854": 73,
        "1855": 93,
        "1856": 17,
        "1857": 191,
        "1858": 80,
        "1859": 186,
        "1860": 200,
        "1861": 79,
        "1862": 150,
        "1863": 23,
        "1864": 88,
        "1865": 127,
        "1866": 29,
        "1867": 51,
        "1868": 82,
        "1869": 128,
        "1870": 52,
        "1871": 102,
        "1872": 207,
        "1873": 226,
        "1874": 72,
        "1875": 115,
        "1876": 235,
        "1877": 224,
        "1878": 165,
        "1879": 69,
        "1880": 242,
        "1881": 89,
        "1882": 44,
        "1883": 153,
        "1884": 35,
        "1885": 167,
        "1886": 110,
        "1887": 116,
        "1888": 216,
        "1889": 8,
        "1890": 47,
        "1891": 43,
        "1892": 0,
        "1893": 73,
        "1894": 190,
        "1895": 228,
        "1896": 239,
        "1897": 68,
        "1898": 127,
        "1899": 222,
        "1900": 31,
        "1901": 193,
        "1902": 16,
        "1903": 216,
        "1904": 176,
        "1905": 225,
        "1906": 32,
        "1907": 88,
        "1908": 159,
        "1909": 218,
        "1910": 15,
        "1911": 179,
        "1912": 15,
        "1913": 73,
        "1914": 223,
        "1915": 182,
        "1916": 166,
        "1917": 23,
        "1918": 204,
        "1919": 52,
        "1920": 86,
        "1921": 183,
        "1922": 96,
        "1923": 214,
        "1924": 106,
        "1925": 175,
        "1926": 254,
        "1927": 168,
        "1928": 28,
        "1929": 11,
        "1930": 172,
        "1931": 168,
        "1932": 6,
        "1933": 154,
        "1934": 250,
        "1935": 227,
        "1936": 132,
        "1937": 133,
        "1938": 31,
        "1939": 66,
        "1940": 87,
        "1941": 156,
        "1942": 181,
        "1943": 103,
        "1944": 200,
        "1945": 57,
        "1946": 195,
        "1947": 73,
        "1948": 115,
        "1949": 223,
        "1950": 172,
        "1951": 128,
        "1952": 34,
        "1953": 21,
        "1954": 181,
        "1955": 26,
        "1956": 185,
        "1957": 254,
        "1958": 169,
        "1959": 198,
        "1960": 173,
        "1961": 17,
        "1962": 206,
        "1963": 90,
        "1964": 42,
        "1965": 35,
        "1966": 147,
        "1967": 66,
        "1968": 231,
        "1969": 132,
        "1970": 22,
        "1971": 49,
        "1972": 254,
        "1973": 27,
        "1974": 46,
        "1975": 66,
        "1976": 243,
        "1977": 50,
        "1978": 102,
        "1979": 66,
        "1980": 46,
        "1981": 59,
        "1982": 183,
        "1983": 66,
        "1984": 63,
        "1985": 34,
        "1986": 57,
        "1987": 141,
        "1988": 217,
        "1989": 224,
        "1990": 250,
        "1991": 163,
        "1992": 178,
        "1993": 171,
        "1994": 34,
        "1995": 125,
        "1996": 162,
        "1997": 113,
        "1998": 115,
        "1999": 79,
        "2000": 193,
        "2001": 166,
        "2002": 208,
        "2003": 116,
        "2004": 118,
        "2005": 176,
        "2006": 108,
        "2007": 133,
        "2008": 70,
        "2009": 138,
        "2010": 253,
        "2011": 166,
        "2012": 242,
        "2013": 14,
        "2014": 181,
        "2015": 111,
        "2016": 85,
        "2017": 117,
        "2018": 1,
        "2019": 184,
        "2020": 49,
        "2021": 15,
        "2022": 226,
        "2023": 175,
        "2024": 115,
        "2025": 173,
        "2026": 184,
        "2027": 112,
        "2028": 123,
        "2029": 233,
        "2030": 132,
        "2031": 98,
        "2032": 216,
        "2033": 255,
        "2034": 152,
        "2035": 53,
        "2036": 239,
        "2037": 201,
        "2038": 229,
        "2039": 147,
        "2040": 78,
        "2041": 109,
        "2042": 182,
        "2043": 190,
        "2044": 238,
        "2045": 66,
        "2046": 113,
        "2047": 180,
        "2048": 26,
        "2049": 190,
        "2050": 106,
        "2051": 5,
        "2052": 96,
        "2053": 93,
        "2054": 136,
        "2055": 38,
        "2056": 255,
        "2057": 138,
        "2058": 197,
        "2059": 198,
        "2060": 241,
        "2061": 78,
        "2062": 17,
        "2063": 55,
        "2064": 93,
        "2065": 76,
        "2066": 112,
        "2067": 203,
        "2068": 211,
        "2069": 3,
        "2070": 210,
        "2071": 25,
        "2072": 48,
        "2073": 215,
        "2074": 14,
        "2075": 49,
        "2076": 224,
        "2077": 32,
        "2078": 41,
        "2079": 176,
        "2080": 235,
        "2081": 175,
        "2082": 141,
        "2083": 217,
        "2084": 104,
        "2085": 240,
        "2086": 150,
        "2087": 18,
        "2088": 27,
        "2089": 42,
        "2090": 182,
        "2091": 216,
        "2092": 105,
        "2093": 129,
        "2094": 57,
        "2095": 6,
        "2096": 62,
        "2097": 209,
        "2098": 192,
        "2099": 189,
        "2100": 220,
        "2101": 87,
        "2102": 175,
        "2103": 225,
        "2104": 107,
        "2105": 141,
        "2106": 42,
        "2107": 118,
        "2108": 201,
        "2109": 180,
        "2110": 231,
        "2111": 248,
        "2112": 140,
        "2113": 191,
        "2114": 25,
        "2115": 29,
        "2116": 27,
        "2117": 2,
        "2118": 232,
        "2119": 245,
        "2120": 21,
        "2121": 176,
        "2122": 216,
        "2123": 113,
        "2124": 37,
        "2125": 216,
        "2126": 193,
        "2127": 185,
        "2128": 199,
        "2129": 82,
        "2130": 39,
        "2131": 44,
        "2132": 83,
        "2133": 246,
        "2134": 101,
        "2135": 237,
        "2136": 123,
        "2137": 26,
        "2138": 14,
        "2139": 56,
        "2140": 229,
        "2141": 53,
        "2142": 174,
        "2143": 141,
        "2144": 16,
        "2145": 218,
        "2146": 233,
        "2147": 96,
        "2148": 50,
        "2149": 159,
        "2150": 89,
        "2151": 21,
        "2152": 80,
        "2153": 61,
        "2154": 20,
        "2155": 227,
        "2156": 225,
        "2157": 122,
        "2158": 156,
        "2159": 143,
        "2160": 137,
        "2161": 144,
        "2162": 4,
        "2163": 51,
        "2164": 244,
        "2165": 98,
        "2166": 234,
        "2167": 65,
        "2168": 40,
        "2169": 201,
        "2170": 127,
        "2171": 130,
        "2172": 121,
        "2173": 246,
        "2174": 84,
        "2175": 41,
        "2176": 10,
        "2177": 156,
        "2178": 53,
        "2179": 36,
        "2180": 151,
        "2181": 239,
        "2182": 1,
        "2183": 209,
        "2184": 26,
        "2185": 154,
        "2186": 25,
        "2187": 83,
        "2188": 160,
        "2189": 150,
        "2190": 221,
        "2191": 248,
        "2192": 172,
        "2193": 84,
        "2194": 246,
        "2195": 35,
        "2196": 87,
        "2197": 242,
        "2198": 169,
        "2199": 220,
        "2200": 24,
        "2201": 124,
        "2202": 198,
        "2203": 196,
        "2204": 203,
        "2205": 169,
        "2206": 180,
        "2207": 29,
        "2208": 158,
        "2209": 178,
        "2210": 169,
        "2211": 220,
        "2212": 221,
        "2213": 92,
        "2214": 24,
        "2215": 105,
        "2216": 7,
        "2217": 44,
        "2218": 40,
        "2219": 56,
        "2220": 139,
        "2221": 72,
        "2222": 162,
        "2223": 197,
        "2224": 82,
        "2225": 143,
        "2226": 101,
        "2227": 123,
        "2228": 162,
        "2229": 172,
        "2230": 242,
        "2231": 9,
        "2232": 39,
        "2233": 134,
        "2234": 219,
        "2235": 64,
        "2236": 91,
        "2237": 113,
        "2238": 249,
        "2239": 98,
        "2240": 189,
        "2241": 242,
        "2242": 154,
        "2243": 211,
        "2244": 165,
        "2245": 74,
        "2246": 118,
        "2247": 196,
        "2248": 63,
        "2249": 100,
        "2250": 163,
        "2251": 47,
        "2252": 20,
        "2253": 206,
        "2254": 23,
        "2255": 163,
        "2256": 235,
        "2257": 228,
        "2258": 112,
        "2259": 229,
        "2260": 4,
        "2261": 129,
        "2262": 198,
        "2263": 56,
        "2264": 171,
        "2265": 83,
        "2266": 18,
        "2267": 29,
        "2268": 68,
        "2269": 18,
        "2270": 26,
        "2271": 181,
        "2272": 134,
        "2273": 175,
        "2274": 200,
        "2275": 207,
        "2276": 58,
        "2277": 33,
        "2278": 176,
        "2279": 45,
        "2280": 134,
        "2281": 107,
        "2282": 254,
        "2283": 235,
        "2284": 4,
        "2285": 75,
        "2286": 232,
        "2287": 225,
        "2288": 65,
        "2289": 178,
        "2290": 44,
        "2291": 140,
        "2292": 150,
        "2293": 70,
        "2294": 255,
        "2295": 142,
        "2296": 190,
        "2297": 193,
        "2298": 91,
        "2299": 87,
        "2300": 27,
        "2301": 22,
        "2302": 104,
        "2303": 139,
        "2304": 136,
        "2305": 201,
        "2306": 229,
        "2307": 183,
        "2308": 16,
        "2309": 157,
        "2310": 161,
        "2311": 136,
        "2312": 144,
        "2313": 27,
        "2314": 80,
        "2315": 122,
        "2316": 66,
        "2317": 38,
        "2318": 158,
        "2319": 123,
        "2320": 216,
        "2321": 183,
        "2322": 79,
        "2323": 12,
        "2324": 74,
        "2325": 149,
        "2326": 77,
        "2327": 218,
        "2328": 2,
        "2329": 18,
        "2330": 229,
        "2331": 196,
        "2332": 13,
        "2333": 217,
        "2334": 152,
        "2335": 94,
        "2336": 86,
        "2337": 27,
        "2338": 75,
        "2339": 96,
        "2340": 142,
        "2341": 181,
        "2342": 226,
        "2343": 155,
        "2344": 4,
        "2345": 192,
        "2346": 173,
        "2347": 207,
        "2348": 33,
        "2349": 194,
        "2350": 77,
        "2351": 39,
        "2352": 9,
        "2353": 190,
        "2354": 138,
        "2355": 177,
        "2356": 182,
        "2357": 150,
        "2358": 210,
        "2359": 14,
        "2360": 173,
        "2361": 173,
        "2362": 218,
        "2363": 217,
        "2364": 94,
        "2365": 253,
        "2366": 151,
        "2367": 53,
        "2368": 61,
        "2369": 113,
        "2370": 12,
        "2371": 95,
        "2372": 81,
        "2373": 26,
        "2374": 117,
        "2375": 106,
        "2376": 100,
        "2377": 112,
        "2378": 192,
        "2379": 31,
        "2380": 42,
        "2381": 158,
        "2382": 60,
        "2383": 149,
        "2384": 35,
        "2385": 77,
        "2386": 90,
        "2387": 253,
        "2388": 93,
        "2389": 64,
        "2390": 168,
        "2391": 211,
        "2392": 209,
        "2393": 202,
        "2394": 16,
        "2395": 252,
        "2396": 217,
        "2397": 92,
        "2398": 215,
        "2399": 217,
        "2400": 79,
        "2401": 15,
        "2402": 186,
        "2403": 19,
        "2404": 169,
        "2405": 242,
        "2406": 152,
        "2407": 107,
        "2408": 159,
        "2409": 194,
        "2410": 40,
        "2411": 206,
        "2412": 27,
        "2413": 255,
        "2414": 75,
        "2415": 246,
        "2416": 95,
        "2417": 215,
        "2418": 154,
        "2419": 254,
        "2420": 79,
        "2421": 96,
        "2422": 176,
        "2423": 72,
        "2424": 73,
        "2425": 59,
        "2426": 250,
        "2427": 167,
        "2428": 104,
        "2429": 87,
        "2430": 24,
        "2431": 63,
        "2432": 106,
        "2433": 70,
        "2434": 193,
        "2435": 163,
        "2436": 49,
        "2437": 162,
        "2438": 172,
        "2439": 109,
        "2440": 28,
        "2441": 180,
        "2442": 145,
        "2443": 173,
        "2444": 240,
        "2445": 12,
        "2446": 203,
        "2447": 198,
        "2448": 152,
        "2449": 186,
        "2450": 170,
        "2451": 251,
        "2452": 104,
        "2453": 104,
        "2454": 8,
        "2455": 79,
        "2456": 67,
        "2457": 203,
        "2458": 174,
        "2459": 162,
        "2460": 202,
        "2461": 62,
        "2462": 102,
        "2463": 49,
        "2464": 101,
        "2465": 1,
        "2466": 186,
        "2467": 26,
        "2468": 224,
        "2469": 39,
        "2470": 58,
        "2471": 199,
        "2472": 181,
        "2473": 46,
        "2474": 98,
        "2475": 213,
        "2476": 161,
        "2477": 84,
        "2478": 106,
        "2479": 5,
        "2480": 114,
        "2481": 209,
        "2482": 42,
        "2483": 198,
        "2484": 132,
        "2485": 43,
        "2486": 83,
        "2487": 25,
        "2488": 43,
        "2489": 99,
        "2490": 239,
        "2491": 237,
        "2492": 112,
        "2493": 84,
        "2494": 110,
        "2495": 192,
        "2496": 131,
        "2497": 9,
        "2498": 71,
        "2499": 208,
        "2500": 167,
        "2501": 68,
        "2502": 106,
        "2503": 165,
        "2504": 66,
        "2505": 93,
        "2506": 131,
        "2507": 225,
        "2508": 144,
        "2509": 44,
        "2510": 232,
        "2511": 39,
        "2512": 152,
        "2513": 72,
        "2514": 192,
        "2515": 157,
        "2516": 150,
        "2517": 95,
        "2518": 65,
        "2519": 143,
        "2520": 158,
        "2521": 163,
        "2522": 123,
        "2523": 71,
        "2524": 254,
        "2525": 62,
        "2526": 69,
        "2527": 120,
        "2528": 234,
        "2529": 239,
        "2530": 99,
        "2531": 184,
        "2532": 226,
        "2533": 233,
        "2534": 166,
        "2535": 47,
        "2536": 127,
        "2537": 164,
        "2538": 179,
        "2539": 89,
        "2540": 47,
        "2541": 170,
        "2542": 120,
        "2543": 74,
        "2544": 183,
        "2545": 10,
        "2546": 66,
        "2547": 105,
        "2548": 141,
        "2549": 97,
        "2550": 254,
        "2551": 19,
        "2552": 204,
        "2553": 140,
        "2554": 190,
        "2555": 184,
        "2556": 198,
        "2557": 35,
        "2558": 252,
        "2559": 242,
        "2560": 82,
        "2561": 218,
        "2562": 52,
        "2563": 228,
        "2564": 133,
        "2565": 33,
        "2566": 19,
        "2567": 110,
        "2568": 8,
        "2569": 141,
        "2570": 234,
        "2571": 91,
        "2572": 221,
        "2573": 102,
        "2574": 166,
        "2575": 93,
        "2576": 173,
        "2577": 143,
        "2578": 34,
        "2579": 50,
        "2580": 141,
        "2581": 172,
        "2582": 127,
        "2583": 214,
        "2584": 143,
        "2585": 33,
        "2586": 64,
        "2587": 147,
        "2588": 72,
        "2589": 182,
        "2590": 189,
        "2591": 132,
        "2592": 233,
        "2593": 23,
        "2594": 20,
        "2595": 80,
        "2596": 96,
        "2597": 36,
        "2598": 69,
        "2599": 139,
        "2600": 157,
        "2601": 48,
        "2602": 120,
        "2603": 15,
        "2604": 143,
        "2605": 231,
        "2606": 135,
        "2607": 45,
        "2608": 127,
        "2609": 85,
        "2610": 236,
        "2611": 134,
        "2612": 30,
        "2613": 70,
        "2614": 124,
        "2615": 109,
        "2616": 241,
        "2617": 135,
        "2618": 240,
        "2619": 113,
        "2620": 13,
        "2621": 255,
        "2622": 50,
        "2623": 138,
        "2624": 91,
        "2625": 138,
        "2626": 125,
        "2627": 50,
        "2628": 78,
        "2629": 250,
        "2630": 82,
        "2631": 157,
        "2632": 185,
        "2633": 48,
        "2634": 64,
        "2635": 55,
        "2636": 108,
        "2637": 242,
        "2638": 162,
        "2639": 112,
        "2640": 123,
        "2641": 253,
        "2642": 38,
        "2643": 154,
        "2644": 119,
        "2645": 29,
        "2646": 0,
        "2647": 202,
        "2648": 148,
        "2649": 35,
        "2650": 129,
        "2651": 204,
        "2652": 70,
        "2653": 222,
        "2654": 32,
        "2655": 151,
        "2656": 222,
        "2657": 62,
        "2658": 27,
        "2659": 197,
        "2660": 102,
        "2661": 218,
        "2662": 204,
        "2663": 252,
        "2664": 229,
        "2665": 110,
        "2666": 206,
        "2667": 38,
        "2668": 224,
        "2669": 246,
        "2670": 170,
        "2671": 221,
        "2672": 233,
        "2673": 141,
        "2674": 171,
        "2675": 45,
        "2676": 34,
        "2677": 247,
        "2678": 193,
        "2679": 67,
        "2680": 108,
        "2681": 47,
        "2682": 101,
        "2683": 172,
        "2684": 113,
        "2685": 125,
        "2686": 160,
        "2687": 125,
        "2688": 98,
        "2689": 150,
        "2690": 147,
        "2691": 179,
        "2692": 61,
        "2693": 27,
        "2694": 41,
        "2695": 181,
        "2696": 22,
        "2697": 202,
        "2698": 97,
        "2699": 127,
        "2700": 130,
        "2701": 177,
        "2702": 8,
        "2703": 167,
        "2704": 149,
        "2705": 167,
        "2706": 4,
        "2707": 16,
        "2708": 217,
        "2709": 25,
        "2710": 60,
        "2711": 23,
        "2712": 93,
        "2713": 2,
        "2714": 90,
        "2715": 123,
        "2716": 49,
        "2717": 226,
        "2718": 48,
        "2719": 142,
        "2720": 166,
        "2721": 4,
        "2722": 241,
        "2723": 211,
        "2724": 51,
        "2725": 200,
        "2726": 25,
        "2727": 101,
        "2728": 31,
        "2729": 146,
        "2730": 33,
        "2731": 51,
        "2732": 86,
        "2733": 28,
        "2734": 253,
        "2735": 96,
        "2736": 150,
        "2737": 165,
        "2738": 175,
        "2739": 120,
        "2740": 186,
        "2741": 29,
        "2742": 60,
        "2743": 42,
        "2744": 99,
        "2745": 42,
        "2746": 94,
        "2747": 188,
        "2748": 83,
        "2749": 185,
        "2750": 80,
        "2751": 74,
        "2752": 208,
        "2753": 175,
        "2754": 87,
        "2755": 152,
        "2756": 50,
        "2757": 245,
        "2758": 122,
        "2759": 107,
        "2760": 168,
        "2761": 109,
        "2762": 83,
        "2763": 7,
        "2764": 137,
        "2765": 121,
        "2766": 107,
        "2767": 108,
        "2768": 51,
        "2769": 98,
        "2770": 60,
        "2771": 212,
        "2772": 123,
        "2773": 124,
        "2774": 85,
        "2775": 147,
        "2776": 162,
        "2777": 35,
        "2778": 240,
        "2779": 93,
        "2780": 17,
        "2781": 69,
        "2782": 214,
        "2783": 224,
        "2784": 152,
        "2785": 114,
        "2786": 76,
        "2787": 236,
        "2788": 44,
        "2789": 120,
        "2790": 177,
        "2791": 235,
        "2792": 216,
        "2793": 4,
        "2794": 117,
        "2795": 234,
        "2796": 181,
        "2797": 98,
        "2798": 196,
        "2799": 22,
        "2800": 238,
        "2801": 200,
        "2802": 14,
        "2803": 221,
        "2804": 114,
        "2805": 221,
        "2806": 50,
        "2807": 235,
        "2808": 195,
        "2809": 118,
        "2810": 39,
        "2811": 204,
        "2812": 154,
        "2813": 37,
        "2814": 14,
        "2815": 0,
        "2816": 132,
        "2817": 152,
        "2818": 208,
        "2819": 5,
        "2820": 18,
        "2821": 51,
        "2822": 20,
        "2823": 172,
        "2824": 227,
        "2825": 99,
        "2826": 102,
        "2827": 242,
        "2828": 94,
        "2829": 60,
        "2830": 228,
        "2831": 10,
        "2832": 124,
        "2833": 206,
        "2834": 137,
        "2835": 18,
        "2836": 101,
        "2837": 170,
        "2838": 35,
        "2839": 238,
        "2840": 172,
        "2841": 175,
        "2842": 94,
        "2843": 61,
        "2844": 40,
        "2845": 213,
        "2846": 187,
        "2847": 142,
        "2848": 203,
        "2849": 77,
        "2850": 73,
        "2851": 167,
        "2852": 135,
        "2853": 71,
        "2854": 148,
        "2855": 76,
        "2856": 196,
        "2857": 192,
        "2858": 133,
        "2859": 133,
        "2860": 19,
        "2861": 44,
        "2862": 71,
        "2863": 251,
        "2864": 161,
        "2865": 33,
        "2866": 44,
        "2867": 80,
        "2868": 123,
        "2869": 44,
        "2870": 148,
        "2871": 14,
        "2872": 162,
        "2873": 219,
        "2874": 234,
        "2875": 145,
        "2876": 218,
        "2877": 236,
        "2878": 155,
        "2879": 36,
        "2880": 211,
        "2881": 40,
        "2882": 170,
        "2883": 233,
        "2884": 75,
        "2885": 183,
        "2886": 181,
        "2887": 69,
        "2888": 80,
        "2889": 232,
        "2890": 125,
        "2891": 91,
        "2892": 176,
        "2893": 26,
        "2894": 106,
        "2895": 139,
        "2896": 25,
        "2897": 98,
        "2898": 116,
        "2899": 7,
        "2900": 17,
        "2901": 119,
        "2902": 132,
        "2903": 45,
        "2904": 254,
        "2905": 197,
        "2906": 219,
        "2907": 27,
        "2908": 166,
        "2909": 11,
        "2910": 157,
        "2911": 231,
        "2912": 46,
        "2913": 199,
        "2914": 191,
        "2915": 206,
        "2916": 53,
        "2917": 105,
        "2918": 88,
        "2919": 171,
        "2920": 243,
        "2921": 240,
        "2922": 143,
        "2923": 182,
        "2924": 235,
        "2925": 212,
        "2926": 181,
        "2927": 201,
        "2928": 121,
        "2929": 218,
        "2930": 223,
        "2931": 128,
        "2932": 17,
        "2933": 68,
        "2934": 104,
        "2935": 11,
        "2936": 215,
        "2937": 61,
        "2938": 222,
        "2939": 133,
        "2940": 201,
        "2941": 10,
        "2942": 13,
        "2943": 146,
        "2944": 65,
        "2945": 174,
        "2946": 116,
        "2947": 85,
        "2948": 175,
        "2949": 170,
        "2950": 167,
        "2951": 236,
        "2952": 230,
        "2953": 242,
        "2954": 155,
        "2955": 217,
        "2956": 228,
        "2957": 22,
        "2958": 53,
        "2959": 140,
        "2960": 154,
        "2961": 96,
        "2962": 61,
        "2963": 42,
        "2964": 26,
        "2965": 143,
        "2966": 210,
        "2967": 82,
        "2968": 201,
        "2969": 96,
        "2970": 171,
        "2971": 250,
        "2972": 42,
        "2973": 195,
        "2974": 119,
        "2975": 144,
        "2976": 52,
        "2977": 231,
        "2978": 76,
        "2979": 152,
        "2980": 251,
        "2981": 205,
        "2982": 18,
        "2983": 24,
        "2984": 18,
        "2985": 98,
        "2986": 103,
        "2987": 33,
        "2988": 177,
        "2989": 37,
        "2990": 20,
        "2991": 106,
        "2992": 86,
        "2993": 228,
        "2994": 15,
        "2995": 190,
        "2996": 120,
        "2997": 158,
        "2998": 201,
        "2999": 144,
        "3000": 134,
        "3001": 132,
        "3002": 218,
        "3003": 36,
        "3004": 87,
        "3005": 239,
        "3006": 168,
        "3007": 162,
        "3008": 172,
        "3009": 88,
        "3010": 16,
        "3011": 180,
        "3012": 14,
        "3013": 66,
        "3014": 93,
        "3015": 223,
        "3016": 48,
        "3017": 147,
        "3018": 98,
        "3019": 156,
        "3020": 75,
        "3021": 172,
        "3022": 232,
        "3023": 191,
        "3024": 152,
        "3025": 24,
        "3026": 97,
        "3027": 77,
        "3028": 228,
        "3029": 56,
        "3030": 138,
        "3031": 243,
        "3032": 18,
        "3033": 194,
        "3034": 8,
        "3035": 34,
        "3036": 123,
        "3037": 209,
        "3038": 0,
        "3039": 78,
        "3040": 174,
        "3041": 196,
        "3042": 229,
        "3043": 215,
        "3044": 160,
        "3045": 132,
        "3046": 203,
        "3047": 143,
        "3048": 18,
        "3049": 244,
        "3050": 198,
        "3051": 67,
        "3052": 231,
        "3053": 233,
        "3054": 45,
        "3055": 10,
        "3056": 102,
        "3057": 187,
        "3058": 73,
        "3059": 27,
        "3060": 71,
        "3061": 108,
        "3062": 41,
        "3063": 23,
        "3064": 232,
        "3065": 40,
        "3066": 243,
        "3067": 108,
        "3068": 218,
        "3069": 33,
        "3070": 16,
        "3071": 194,
        "3072": 29,
        "3073": 78,
        "3074": 200,
        "3075": 130,
        "3076": 63,
        "3077": 6,
        "3078": 29,
        "3079": 163,
        "3080": 108,
        "3081": 36,
        "3082": 126,
        "3083": 2,
        "3084": 56,
        "3085": 163,
        "3086": 145,
        "3087": 244,
        "3088": 142,
        "3089": 198,
        "3090": 240,
        "3091": 160,
        "3092": 166,
        "3093": 226,
        "3094": 119,
        "3095": 234,
        "3096": 180,
        "3097": 9,
        "3098": 87,
        "3099": 60,
        "3100": 148,
        "3101": 173,
        "3102": 210,
        "3103": 58,
        "3104": 249,
        "3105": 166,
        "3106": 70,
        "3107": 78,
        "3108": 215,
        "3109": 181,
        "3110": 106,
        "3111": 57,
        "3112": 193,
        "3113": 91,
        "3114": 135,
        "3115": 119,
        "3116": 148,
        "3117": 73,
        "3118": 206,
        "3119": 240,
        "3120": 147,
        "3121": 77,
        "3122": 246,
        "3123": 75,
        "3124": 198,
        "3125": 42,
        "3126": 183,
        "3127": 212,
        "3128": 37,
        "3129": 181,
        "3130": 173,
        "3131": 206,
        "3132": 216,
        "3133": 137,
        "3134": 188,
        "3135": 153,
        "3136": 237,
        "3137": 170,
        "3138": 1,
        "3139": 195,
        "3140": 168,
        "3141": 125,
        "3142": 102,
        "3143": 209,
        "3144": 34,
        "3145": 173,
        "3146": 238,
        "3147": 60,
        "3148": 86,
        "3149": 94,
        "3150": 223,
        "3151": 102,
        "3152": 100,
        "3153": 17,
        "3154": 155,
        "3155": 189,
        "3156": 115,
        "3157": 94,
        "3158": 182,
        "3159": 223,
        "3160": 239,
        "3161": 202,
        "3162": 1,
        "3163": 162,
        "3164": 136,
        "3165": 35,
        "3166": 110,
        "3167": 176,
        "3168": 148,
        "3169": 92,
        "3170": 13,
        "3171": 224,
        "3172": 116,
        "3173": 241,
        "3174": 54,
        "3175": 158,
        "3176": 40,
        "3177": 45,
        "3178": 123,
        "3179": 218,
        "3180": 221,
        "3181": 246,
        "3182": 20,
        "3183": 1,
        "3184": 115,
        "3185": 184,
        "3186": 121,
        "3187": 248,
        "3188": 197,
        "3189": 76,
        "3190": 92,
        "3191": 67,
        "3192": 218,
        "3193": 223,
        "3194": 86,
        "3195": 93,
        "3196": 199,
        "3197": 25,
        "3198": 78,
        "3199": 62,
        "3200": 124,
        "3201": 248,
        "3202": 207,
        "3203": 252,
        "3204": 181,
        "3205": 128,
        "3206": 77,
        "3207": 227,
        "3208": 83,
        "3209": 123,
        "3210": 236,
        "3211": 217,
        "3212": 18,
        "3213": 88,
        "3214": 99,
        "3215": 210,
        "3216": 132,
        "3217": 160,
        "3218": 205,
        "3219": 77,
        "3220": 248,
        "3221": 164,
        "3222": 192,
        "3223": 118,
        "3224": 160,
        "3225": 58,
        "3226": 107,
        "3227": 132,
        "3228": 176,
        "3229": 211,
        "3230": 117,
        "3231": 238,
        "3232": 194,
        "3233": 89,
        "3234": 247,
        "3235": 242,
        "3236": 183,
        "3237": 60,
        "3238": 150,
        "3239": 137,
        "3240": 50,
        "3241": 168,
        "3242": 167,
        "3243": 29,
        "3244": 139,
        "3245": 77,
        "3246": 248,
        "3247": 19,
        "3248": 233,
        "3249": 253,
        "3250": 134,
        "3251": 147,
        "3252": 7,
        "3253": 136,
        "3254": 70,
        "3255": 15,
        "3256": 191,
        "3257": 19,
        "3258": 103,
        "3259": 113,
        "3260": 229,
        "3261": 134,
        "3262": 213,
        "3263": 221,
        "3264": 22,
        "3265": 195,
        "3266": 91,
        "3267": 206,
        "3268": 14,
        "3269": 0,
        "3270": 63,
        "3271": 123,
        "3272": 66,
        "3273": 50,
        "3274": 249,
        "3275": 79,
        "3276": 181,
        "3277": 215,
        "3278": 33,
        "3279": 94,
        "3280": 33,
        "3281": 159,
        "3282": 181,
        "3283": 87,
        "3284": 43,
        "3285": 213,
        "3286": 22,
        "3287": 44,
        "3288": 243,
        "3289": 52,
        "3290": 207,
        "3291": 14,
        "3292": 9,
        "3293": 245,
        "3294": 118,
        "3295": 112,
        "3296": 123,
        "3297": 101,
        "3298": 162,
        "3299": 239,
        "3300": 73,
        "3301": 15,
        "3302": 182,
        "3303": 82,
        "3304": 17,
        "3305": 88,
        "3306": 35,
        "3307": 187,
        "3308": 115,
        "3309": 145,
        "3310": 95,
        "3311": 3,
        "3312": 14,
        "3313": 23,
        "3314": 195,
        "3315": 29,
        "3316": 36,
        "3317": 102,
        "3318": 191,
        "3319": 169,
        "3320": 86,
        "3321": 39,
        "3322": 210,
        "3323": 44,
        "3324": 75,
        "3325": 234,
        "3326": 3,
        "3327": 103,
        "3328": 20,
        "3329": 123,
        "3330": 106,
        "3331": 108,
        "3332": 25,
        "3333": 108,
        "3334": 38,
        "3335": 161,
        "3336": 180,
        "3337": 49,
        "3338": 108,
        "3339": 119,
        "3340": 48,
        "3341": 94,
        "3342": 93,
        "3343": 38,
        "3344": 133,
        "3345": 243,
        "3346": 239,
        "3347": 186,
        "3348": 150,
        "3349": 166,
        "3350": 182,
        "3351": 71,
        "3352": 144,
        "3353": 111,
        "3354": 210,
        "3355": 142,
        "3356": 63,
        "3357": 178,
        "3358": 104,
        "3359": 29,
        "3360": 79,
        "3361": 197,
        "3362": 79,
        "3363": 227,
        "3364": 125,
        "3365": 159,
        "3366": 156,
        "3367": 222,
        "3368": 212,
        "3369": 132,
        "3370": 233,
        "3371": 74,
        "3372": 248,
        "3373": 74,
        "3374": 18,
        "3375": 125,
        "3376": 225,
        "3377": 51,
        "3378": 224,
        "3379": 238,
        "3380": 148,
        "3381": 254,
        "3382": 196,
        "3383": 183,
        "3384": 52,
        "3385": 153,
        "3386": 191,
        "3387": 119,
        "3388": 75,
        "3389": 96,
        "3390": 19,
        "3391": 38,
        "3392": 56,
        "3393": 73,
        "3394": 183,
        "3395": 89,
        "3396": 30,
        "3397": 135,
        "3398": 143,
        "3399": 227,
        "3400": 215,
        "3401": 248,
        "3402": 56,
        "3403": 197,
        "3404": 44,
        "3405": 109,
        "3406": 8,
        "3407": 1,
        "3408": 129,
        "3409": 222,
        "3410": 190,
        "3411": 150,
        "3412": 129,
        "3413": 148,
        "3414": 238,
        "3415": 18,
        "3416": 242,
        "3417": 209,
        "3418": 65,
        "3419": 93,
        "3420": 131,
        "3421": 142,
        "3422": 216,
        "3423": 76,
        "3424": 113,
        "3425": 91,
        "3426": 16,
        "3427": 22,
        "3428": 40,
        "3429": 54,
        "3430": 143,
        "3431": 142,
        "3432": 76,
        "3433": 117,
        "3434": 6,
        "3435": 186,
        "3436": 245,
        "3437": 55,
        "3438": 8,
        "3439": 36,
        "3440": 34,
        "3441": 214,
        "3442": 106,
        "3443": 153,
        "3444": 250,
        "3445": 228,
        "3446": 146,
        "3447": 28,
        "3448": 6,
        "3449": 220,
        "3450": 84,
        "3451": 143,
        "3452": 62,
        "3453": 231,
        "3454": 120,
        "3455": 61,
        "3456": 193,
        "3457": 110,
        "3458": 140,
        "3459": 67,
        "3460": 172,
        "3461": 81,
        "3462": 155,
        "3463": 49,
        "3464": 157,
        "3465": 169,
        "3466": 120,
        "3467": 68,
        "3468": 119,
        "3469": 131,
        "3470": 143,
        "3471": 79,
        "3472": 50,
        "3473": 222,
        "3474": 197,
        "3475": 172,
        "3476": 237,
        "3477": 140,
        "3478": 255,
        "3479": 0,
        "3480": 204,
        "3481": 72,
        "3482": 72,
        "3483": 207,
        "3484": 134,
        "3485": 118,
        "3486": 163,
        "3487": 144,
        "3488": 105,
        "3489": 114,
        "3490": 76,
        "3491": 219,
        "3492": 148,
        "3493": 63,
        "3494": 165,
        "3495": 40,
        "3496": 16,
        "3497": 60,
        "3498": 139,
        "3499": 5,
        "3500": 10,
        "3501": 163,
        "3502": 193,
        "3503": 67,
        "3504": 83,
        "3505": 177,
        "3506": 136,
        "3507": 20,
        "3508": 16,
        "3509": 39,
        "3510": 157,
        "3511": 118,
        "3512": 219,
        "3513": 13,
        "3514": 215,
        "3515": 1,
        "3516": 210,
        "3517": 66,
        "3518": 146,
        "3519": 22,
        "3520": 163,
        "3521": 202,
        "3522": 184,
        "3523": 35,
        "3524": 98,
        "3525": 62,
        "3526": 53,
        "3527": 53,
        "3528": 215,
        "3529": 114,
        "3530": 129,
        "3531": 145,
        "3532": 249,
        "3533": 236,
        "3534": 195,
        "3535": 215,
        "3536": 85,
        "3537": 134,
        "3538": 120,
        "3539": 137,
        "3540": 100,
        "3541": 248,
        "3542": 230,
        "3543": 43,
        "3544": 60,
        "3545": 123,
        "3546": 232,
        "3547": 145,
        "3548": 58,
        "3549": 39,
        "3550": 106,
        "3551": 120,
        "3552": 143,
        "3553": 130,
        "3554": 39,
        "3555": 244,
        "3556": 45,
        "3557": 170,
        "3558": 144,
        "3559": 141,
        "3560": 9,
        "3561": 139,
        "3562": 68,
        "3563": 81,
        "3564": 18,
        "3565": 200,
        "3566": 250,
        "3567": 106,
        "3568": 223,
        "3569": 166,
        "3570": 243,
        "3571": 169,
        "3572": 181,
        "3573": 236,
        "3574": 94,
        "3575": 112,
        "3576": 167,
        "3577": 70,
        "3578": 138,
        "3579": 22,
        "3580": 120,
        "3581": 197,
        "3582": 246,
        "3583": 200,
        "3584": 92,
        "3585": 250,
        "3586": 234,
        "3587": 155,
        "3588": 228,
        "3589": 212,
        "3590": 198,
        "3591": 89,
        "3592": 195,
        "3593": 130,
        "3594": 149,
        "3595": 145,
        "3596": 47,
        "3597": 239,
        "3598": 12,
        "3599": 16,
        "3600": 68,
        "3601": 103,
        "3602": 208,
        "3603": 204,
        "3604": 35,
        "3605": 210,
        "3606": 41,
        "3607": 199,
        "3608": 159,
        "3609": 224,
        "3610": 97,
        "3611": 204,
        "3612": 230,
        "3613": 40,
        "3614": 78,
        "3615": 144,
        "3616": 124,
        "3617": 91,
        "3618": 224,
        "3619": 155,
        "3620": 200,
        "3621": 91,
        "3622": 129,
        "3623": 78,
        "3624": 146,
        "3625": 130,
        "3626": 74,
        "3627": 134,
        "3628": 111,
        "3629": 187,
        "3630": 14,
        "3631": 31,
        "3632": 46,
        "3633": 244,
        "3634": 51,
        "3635": 102,
        "3636": 83,
        "3637": 48,
        "3638": 48,
        "3639": 234,
        "3640": 28,
        "3641": 32,
        "3642": 161,
        "3643": 122,
        "3644": 105,
        "3645": 58,
        "3646": 254,
        "3647": 52,
        "3648": 246,
        "3649": 127,
        "3650": 206,
        "3651": 139,
        "3652": 216,
        "3653": 50,
        "3654": 97,
        "3655": 32,
        "3656": 10,
        "3657": 74,
        "3658": 26,
        "3659": 77,
        "3660": 193,
        "3661": 178,
        "3662": 8,
        "3663": 186,
        "3664": 116,
        "3665": 214,
        "3666": 183,
        "3667": 250,
        "3668": 214,
        "3669": 18,
        "3670": 66,
        "3671": 115,
        "3672": 73,
        "3673": 58,
        "3674": 98,
        "3675": 196,
        "3676": 28,
        "3677": 233,
        "3678": 141,
        "3679": 67,
        "3680": 117,
        "3681": 232,
        "3682": 57,
        "3683": 110,
        "3684": 134,
        "3685": 34,
        "3686": 231,
        "3687": 139,
        "3688": 158,
        "3689": 87,
        "3690": 223,
        "3691": 23,
        "3692": 86,
        "3693": 213,
        "3694": 135,
        "3695": 131,
        "3696": 208,
        "3697": 20,
        "3698": 182,
        "3699": 49,
        "3700": 47,
        "3701": 196,
        "3702": 23,
        "3703": 66,
        "3704": 57,
        "3705": 196,
        "3706": 218,
        "3707": 213,
        "3708": 36,
        "3709": 27,
        "3710": 0,
        "3711": 70,
        "3712": 220,
        "3713": 234,
        "3714": 117,
        "3715": 56,
        "3716": 41,
        "3717": 14,
        "3718": 203,
        "3719": 135,
        "3720": 153,
        "3721": 144,
        "3722": 182,
        "3723": 233,
        "3724": 158,
        "3725": 151,
        "3726": 167,
        "3727": 74,
        "3728": 198,
        "3729": 235,
        "3730": 202,
        "3731": 203,
        "3732": 59,
        "3733": 82,
        "3734": 75,
        "3735": 197,
        "3736": 96,
        "3737": 196,
        "3738": 133,
        "3739": 131,
        "3740": 127,
        "3741": 238,
        "3742": 241,
        "3743": 228,
        "3744": 135,
        "3745": 162,
        "3746": 144,
        "3747": 181,
        "3748": 156,
        "3749": 24,
        "3750": 233,
        "3751": 30,
        "3752": 61,
        "3753": 175,
        "3754": 196,
        "3755": 155,
        "3756": 43,
        "3757": 52,
        "3758": 151,
        "3759": 41,
        "3760": 180,
        "3761": 248,
        "3762": 240,
        "3763": 40,
        "3764": 53,
        "3765": 122,
        "3766": 212,
        "3767": 65,
        "3768": 114,
        "3769": 2,
        "3770": 222,
        "3771": 236,
        "3772": 63,
        "3773": 63,
        "3774": 142,
        "3775": 44,
        "3776": 48,
        "3777": 195,
        "3778": 222,
        "3779": 109,
        "3780": 84,
        "3781": 37,
        "3782": 45,
        "3783": 42,
        "3784": 77,
        "3785": 235,
        "3786": 169,
        "3787": 224,
        "3788": 255,
        "3789": 145,
        "3790": 205,
        "3791": 3,
        "3792": 224,
        "3793": 51,
        "3794": 4,
        "3795": 225,
        "3796": 222,
        "3797": 219,
        "3798": 101,
        "3799": 22,
        "3800": 171,
        "3801": 170,
        "3802": 162,
        "3803": 132,
        "3804": 85,
        "3805": 120,
        "3806": 103,
        "3807": 82,
        "3808": 63,
        "3809": 48,
        "3810": 77,
        "3811": 175,
        "3812": 4,
        "3813": 199,
        "3814": 211,
        "3815": 20,
        "3816": 141,
        "3817": 141,
        "3818": 28,
        "3819": 233,
        "3820": 210,
        "3821": 252,
        "3822": 56,
        "3823": 89,
        "3824": 213,
        "3825": 6,
        "3826": 111,
        "3827": 94,
        "3828": 244,
        "3829": 33,
        "3830": 202,
        "3831": 225,
        "3832": 3,
        "3833": 222,
        "3834": 140,
        "3835": 32,
        "3836": 119,
        "3837": 54,
        "3838": 100,
        "3839": 135,
        "3840": 194,
        "3841": 29,
        "3842": 209,
        "3843": 29,
        "3844": 119,
        "3845": 69,
        "3846": 2,
        "3847": 250,
        "3848": 126,
        "3849": 100,
        "3850": 32,
        "3851": 234,
        "3852": 14,
        "3853": 78,
        "3854": 157,
        "3855": 170,
        "3856": 134,
        "3857": 12,
        "3858": 124,
        "3859": 67,
        "3860": 141,
        "3861": 49,
        "3862": 186,
        "3863": 72,
        "3864": 30,
        "3865": 156,
        "3866": 165,
        "3867": 100,
        "3868": 88,
        "3869": 173,
        "3870": 118,
        "3871": 122,
        "3872": 253,
        "3873": 19,
        "3874": 107,
        "3875": 180,
        "3876": 20,
        "3877": 235,
        "3878": 252,
        "3879": 214,
        "3880": 187,
        "3881": 133,
        "3882": 82,
        "3883": 1,
        "3884": 236,
        "3885": 94,
        "3886": 198,
        "3887": 242,
        "3888": 48,
        "3889": 26,
        "3890": 205,
        "3891": 223,
        "3892": 131,
        "3893": 242,
        "3894": 48,
        "3895": 222,
        "3896": 97,
        "3897": 37,
        "3898": 124,
        "3899": 249,
        "3900": 177,
        "3901": 31,
        "3902": 156,
        "3903": 105,
        "3904": 137,
        "3905": 60,
        "3906": 198,
        "3907": 16,
        "3908": 50,
        "3909": 99,
        "3910": 147,
        "3911": 30,
        "3912": 31,
        "3913": 39,
        "3914": 124,
        "3915": 55,
        "3916": 139,
        "3917": 201,
        "3918": 143,
        "3919": 211,
        "3920": 25,
        "3921": 109,
        "3922": 225,
        "3923": 179,
        "3924": 85,
        "3925": 25,
        "3926": 210,
        "3927": 44,
        "3928": 73,
        "3929": 142,
        "3930": 85,
        "3931": 207,
        "3932": 208,
        "3933": 71,
        "3934": 148,
        "3935": 204,
        "3936": 130,
        "3937": 187,
        "3938": 78,
        "3939": 37,
        "3940": 130,
        "3941": 154,
        "3942": 221,
        "3943": 10,
        "3944": 247,
        "3945": 92,
        "3946": 70,
        "3947": 235,
        "3948": 184,
        "3949": 36,
        "3950": 223,
        "3951": 27,
        "3952": 222,
        "3953": 5,
        "3954": 193,
        "3955": 175,
        "3956": 243,
        "3957": 100,
        "3958": 175,
        "3959": 11,
        "3960": 22,
        "3961": 199,
        "3962": 88,
        "3963": 32,
        "3964": 208,
        "3965": 146,
        "3966": 120,
        "3967": 232,
        "3968": 25,
        "3969": 81,
        "3970": 115,
        "3971": 67,
        "3972": 247,
        "3973": 106,
        "3974": 63,
        "3975": 46,
        "3976": 102,
        "3977": 76,
        "3978": 134,
        "3979": 19,
        "3980": 108,
        "3981": 201,
        "3982": 16,
        "3983": 133,
        "3984": 195,
        "3985": 227,
        "3986": 222,
        "3987": 97,
        "3988": 7,
        "3989": 201,
        "3990": 44,
        "3991": 220,
        "3992": 18,
        "3993": 191,
        "3994": 246,
        "3995": 252,
        "3996": 7,
        "3997": 55,
        "3998": 155,
        "3999": 73,
        "4000": 80,
        "4001": 187,
        "4002": 71,
        "4003": 192,
        "4004": 105,
        "4005": 139,
        "4006": 106,
        "4007": 51,
        "4008": 74,
        "4009": 74,
        "4010": 219,
        "4011": 144,
        "4012": 169,
        "4013": 1,
        "4014": 8,
        "4015": 78,
        "4016": 71,
        "4017": 11,
        "4018": 76,
        "4019": 218,
        "4020": 114,
        "4021": 102,
        "4022": 112,
        "4023": 30,
        "4024": 114,
        "4025": 93,
        "4026": 180,
        "4027": 64,
        "4028": 118,
        "4029": 76,
        "4030": 243,
        "4031": 15,
        "4032": 73,
        "4033": 223,
        "4034": 206,
        "4035": 52,
        "4036": 119,
        "4037": 47,
        "4038": 178,
        "4039": 128,
        "4040": 145,
        "4041": 46,
        "4042": 149,
        "4043": 107,
        "4044": 14,
        "4045": 62,
        "4046": 160,
        "4047": 75,
        "4048": 142,
        "4049": 169,
        "4050": 162,
        "4051": 42,
        "4052": 61,
        "4053": 63,
        "4054": 234,
        "4055": 114,
        "4056": 89,
        "4057": 236,
        "4058": 198,
        "4059": 158,
        "4060": 228,
        "4061": 188,
        "4062": 214,
        "4063": 158,
        "4064": 138,
        "4065": 208,
        "4066": 207,
        "4067": 102,
        "4068": 120,
        "4069": 196,
        "4070": 124,
        "4071": 127,
        "4072": 209,
        "4073": 223,
        "4074": 196,
        "4075": 233,
        "4076": 147,
        "4077": 172,
        "4078": 240,
        "4079": 170,
        "4080": 97,
        "4081": 133,
        "4082": 148,
        "4083": 205,
        "4084": 195,
        "4085": 31,
        "4086": 223,
        "4087": 227,
        "4088": 169,
        "4089": 252,
        "4090": 131,
        "4091": 95,
        "4092": 249,
        "4093": 239,
        "4094": 249,
        "4095": 72,
        "4096": 188,
        "4097": 92,
        "4098": 216,
        "4099": 232,
        "4100": 28,
        "4101": 34,
        "4102": 204,
        "4103": 120,
        "4104": 134,
        "4105": 72,
        "4106": 142,
        "4107": 167,
        "4108": 217,
        "4109": 97,
        "4110": 220,
        "4111": 29,
        "4112": 79,
        "4113": 77,
        "4114": 78,
        "4115": 182,
        "4116": 58,
        "4117": 29,
        "4118": 107,
        "4119": 161,
        "4120": 6,
        "4121": 212,
        "4122": 44,
        "4123": 48,
        "4124": 69,
        "4125": 107,
        "4126": 89,
        "4127": 6,
        "4128": 90,
        "4129": 123,
        "4130": 226,
        "4131": 220,
        "4132": 148,
        "4133": 92,
        "4134": 210,
        "4135": 1,
        "4136": 97,
        "4137": 151,
        "4138": 66,
        "4139": 190,
        "4140": 234,
        "4141": 229,
        "4142": 201,
        "4143": 25,
        "4144": 50,
        "4145": 196,
        "4146": 240,
        "4147": 123,
        "4148": 42,
        "4149": 36,
        "4150": 46,
        "4151": 207,
        "4152": 86,
        "4153": 95,
        "4154": 117,
        "4155": 223,
        "4156": 107,
        "4157": 217,
        "4158": 94,
        "4159": 173,
        "4160": 84,
        "4161": 137,
        "4162": 143,
        "4163": 84,
        "4164": 135,
        "4165": 127,
        "4166": 47,
        "4167": 233,
        "4168": 162,
        "4169": 160,
        "4170": 68,
        "4171": 211,
        "4172": 236,
        "4173": 212,
        "4174": 26,
        "4175": 167,
        "4176": 25,
        "4177": 54,
        "4178": 114,
        "4179": 4,
        "4180": 255,
        "4181": 240,
        "4182": 92,
        "4183": 23,
        "4184": 201,
        "4185": 194,
        "4186": 15,
        "4187": 185,
        "4188": 241,
        "4189": 211,
        "4190": 234,
        "4191": 34,
        "4192": 178,
        "4193": 180,
        "4194": 248,
        "4195": 203,
        "4196": 132,
        "4197": 223,
        "4198": 134,
        "4199": 226,
        "4200": 59,
        "4201": 157,
        "4202": 188,
        "4203": 241,
        "4204": 174,
        "4205": 7,
        "4206": 142,
        "4207": 142,
        "4208": 25,
        "4209": 130,
        "4210": 188,
        "4211": 125,
        "4212": 166,
        "4213": 94,
        "4214": 81,
        "4215": 160,
        "4216": 185,
        "4217": 240,
        "4218": 166,
        "4219": 56,
        "4220": 95,
        "4221": 78,
        "4222": 75,
        "4223": 36,
        "4224": 80,
        "4225": 9,
        "4226": 192,
        "4227": 63,
        "4228": 139,
        "4229": 12,
        "4230": 166,
        "4231": 147,
        "4232": 8,
        "4233": 212,
        "4234": 51,
        "4235": 89,
        "4236": 104,
        "4237": 114,
        "4238": 24,
        "4239": 125,
        "4240": 216,
        "4241": 131,
        "4242": 146,
        "4243": 194,
        "4244": 238,
        "4245": 166,
        "4246": 136,
        "4247": 109,
        "4248": 55,
        "4249": 80,
        "4250": 108,
        "4251": 64,
        "4252": 112,
        "4253": 157,
        "4254": 252,
        "4255": 87,
        "4256": 216,
        "4257": 91,
        "4258": 23,
        "4259": 30,
        "4260": 160,
        "4261": 169,
        "4262": 151,
        "4263": 254,
        "4264": 206,
        "4265": 107,
        "4266": 20,
        "4267": 104,
        "4268": 201,
        "4269": 26,
        "4270": 54,
        "4271": 6,
        "4272": 219,
        "4273": 223,
        "4274": 24,
        "4275": 194,
        "4276": 122,
        "4277": 155,
        "4278": 45,
        "4279": 70,
        "4280": 159,
        "4281": 45,
        "4282": 169,
        "4283": 53,
        "4284": 130,
        "4285": 132,
        "4286": 239,
        "4287": 76,
        "4288": 192,
        "4289": 211,
        "4290": 212,
        "4291": 176,
        "4292": 62,
        "4293": 165,
        "4294": 63,
        "4295": 202,
        "4296": 55,
        "4297": 230,
        "4298": 214,
        "4299": 229,
        "4300": 44,
        "4301": 107,
        "4302": 83,
        "4303": 242,
        "4304": 51,
        "4305": 216,
        "4306": 176,
        "4307": 65,
        "4308": 153,
        "4309": 96,
        "4310": 195,
        "4311": 207,
        "4312": 91,
        "4313": 37,
        "4314": 232,
        "4315": 235,
        "4316": 124,
        "4317": 10,
        "4318": 97,
        "4319": 109,
        "4320": 93,
        "4321": 124,
        "4322": 84,
        "4323": 8,
        "4324": 176,
        "4325": 74,
        "4326": 246,
        "4327": 53,
        "4328": 213,
        "4329": 238,
        "4330": 225,
        "4331": 114,
        "4332": 195,
        "4333": 74,
        "4334": 26,
        "4335": 14,
        "4336": 103,
        "4337": 188,
        "4338": 232,
        "4339": 39,
        "4340": 17,
        "4341": 24,
        "4342": 150,
        "4343": 134,
        "4344": 85,
        "4345": 120,
        "4346": 39,
        "4347": 100,
        "4348": 0,
        "4349": 70,
        "4350": 152,
        "4351": 125,
        "4352": 180,
        "4353": 100,
        "4354": 234,
        "4355": 61,
        "4356": 66,
        "4357": 10,
        "4358": 178,
        "4359": 226,
        "4360": 215,
        "4361": 163,
        "4362": 28,
        "4363": 205,
        "4364": 164,
        "4365": 241,
        "4366": 1,
        "4367": 141,
        "4368": 92,
        "4369": 196,
        "4370": 124,
        "4371": 243,
        "4372": 11,
        "4373": 170,
        "4374": 123,
        "4375": 48,
        "4376": 179,
        "4377": 167,
        "4378": 193,
        "4379": 214,
        "4380": 62,
        "4381": 69,
        "4382": 105,
        "4383": 178,
        "4384": 181,
        "4385": 212,
        "4386": 149,
        "4387": 111,
        "4388": 212,
        "4389": 77,
        "4390": 165,
        "4391": 202,
        "4392": 133,
        "4393": 106,
        "4394": 185,
        "4395": 160,
        "4396": 184,
        "4397": 161,
        "4398": 246,
        "4399": 58,
        "4400": 114,
        "4401": 4,
        "4402": 229,
        "4403": 124,
        "4404": 223,
        "4405": 94,
        "4406": 204,
        "4407": 82,
        "4408": 61,
        "4409": 49,
        "4410": 55,
        "4411": 220,
        "4412": 218,
        "4413": 204,
        "4414": 56,
        "4415": 93,
        "4416": 53,
        "4417": 197,
        "4418": 21,
        "4419": 142,
        "4420": 154,
        "4421": 224,
        "4422": 92,
        "4423": 124,
        "4424": 221,
        "4425": 86,
        "4426": 156,
        "4427": 22,
        "4428": 185,
        "4429": 38,
        "4430": 242,
        "4431": 89,
        "4432": 79,
        "4433": 156,
        "4434": 179,
        "4435": 40,
        "4436": 234,
        "4437": 255,
        "4438": 108,
        "4439": 214,
        "4440": 46,
        "4441": 180,
        "4442": 253,
        "4443": 206,
        "4444": 82,
        "4445": 205,
        "4446": 138,
        "4447": 165,
        "4448": 170,
        "4449": 76,
        "4450": 142,
        "4451": 9,
        "4452": 238,
        "4453": 168,
        "4454": 133,
        "4455": 220,
        "4456": 204,
        "4457": 178,
        "4458": 187,
        "4459": 32,
        "4460": 220,
        "4461": 29,
        "4462": 210,
        "4463": 220,
        "4464": 183,
        "4465": 141,
        "4466": 135,
        "4467": 134,
        "4468": 50,
        "4469": 74,
        "4470": 37,
        "4471": 134,
        "4472": 241,
        "4473": 94,
        "4474": 82,
        "4475": 249,
        "4476": 135,
        "4477": 64,
        "4478": 14,
        "4479": 194,
        "4480": 0,
        "4481": 132,
        "4482": 50,
        "4483": 189,
        "4484": 231,
        "4485": 127,
        "4486": 236,
        "4487": 253,
        "4488": 84,
        "4489": 50,
        "4490": 18,
        "4491": 28,
        "4492": 150,
        "4493": 242,
        "4494": 79,
        "4495": 3,
        "4496": 1,
        "4497": 198,
        "4498": 6,
        "4499": 111,
        "4500": 246,
        "4501": 114,
        "4502": 96,
        "4503": 72,
        "4504": 64,
        "4505": 10,
        "4506": 150,
        "4507": 182,
        "4508": 205,
        "4509": 60,
        "4510": 237,
        "4511": 84,
        "4512": 159,
        "4513": 231,
        "4514": 105,
        "4515": 94,
        "4516": 11,
        "4517": 29,
        "4518": 253,
        "4519": 109,
        "4520": 226,
        "4521": 122,
        "4522": 221,
        "4523": 85,
        "4524": 250,
        "4525": 150,
        "4526": 109,
        "4527": 17,
        "4528": 103,
        "4529": 164,
        "4530": 6,
        "4531": 45,
        "4532": 234,
        "4533": 156,
        "4534": 72,
        "4535": 1,
        "4536": 84,
        "4537": 68,
        "4538": 162,
        "4539": 240,
        "4540": 59,
        "4541": 133,
        "4542": 225,
        "4543": 29,
        "4544": 232,
        "4545": 50,
        "4546": 153,
        "4547": 155,
        "4548": 32,
        "4549": 54,
        "4550": 95,
        "4551": 13,
        "4552": 32,
        "4553": 123,
        "4554": 233,
        "4555": 131,
        "4556": 215,
        "4557": 180,
        "4558": 134,
        "4559": 130,
        "4560": 246,
        "4561": 69,
        "4562": 238,
        "4563": 115,
        "4564": 170,
        "4565": 71,
        "4566": 96,
        "4567": 11,
        "4568": 128,
        "4569": 56,
        "4570": 82,
        "4571": 77,
        "4572": 136,
        "4573": 209,
        "4574": 61,
        "4575": 106,
        "4576": 106,
        "4577": 12,
        "4578": 49,
        "4579": 241,
        "4580": 180,
        "4581": 102,
        "4582": 83,
        "4583": 190,
        "4584": 88,
        "4585": 200,
        "4586": 181,
        "4587": 7,
        "4588": 76,
        "4589": 8,
        "4590": 246,
        "4591": 145,
        "4592": 19,
        "4593": 198,
        "4594": 215,
        "4595": 206,
        "4596": 189,
        "4597": 69,
        "4598": 82,
        "4599": 111,
        "4600": 212,
        "4601": 81,
        "4602": 176,
        "4603": 223,
        "4604": 228,
        "4605": 78,
        "4606": 22,
        "4607": 38,
        "4608": 253,
        "4609": 230,
        "4610": 36,
        "4611": 187,
        "4612": 39,
        "4613": 105,
        "4614": 57,
        "4615": 55,
        "4616": 11,
        "4617": 183,
        "4618": 70,
        "4619": 73,
        "4620": 178,
        "4621": 24,
        "4622": 212,
        "4623": 182,
        "4624": 161,
        "4625": 46,
        "4626": 97,
        "4627": 217,
        "4628": 243,
        "4629": 199,
        "4630": 21,
        "4631": 237,
        "4632": 213,
        "4633": 154,
        "4634": 219,
        "4635": 233,
        "4636": 252,
        "4637": 23,
        "4638": 7,
        "4639": 188,
        "4640": 28,
        "4641": 139,
        "4642": 228,
        "4643": 200,
        "4644": 71,
        "4645": 161,
        "4646": 119,
        "4647": 161,
        "4648": 33,
        "4649": 126,
        "4650": 55,
        "4651": 152,
        "4652": 113,
        "4653": 91,
        "4654": 61,
        "4655": 194,
        "4656": 177,
        "4657": 224,
        "4658": 47,
        "4659": 255,
        "4660": 38,
        "4661": 91,
        "4662": 170,
        "4663": 75,
        "4664": 46,
        "4665": 1,
        "4666": 196,
        "4667": 207,
        "4668": 85,
        "4669": 2,
        "4670": 17,
        "4671": 122,
        "4672": 133,
        "4673": 84,
        "4674": 87,
        "4675": 104,
        "4676": 198,
        "4677": 123,
        "4678": 63,
        "4679": 63,
        "4680": 155,
        "4681": 152,
        "4682": 194,
        "4683": 137,
        "4684": 130,
        "4685": 180,
        "4686": 143,
        "4687": 104,
        "4688": 37,
        "4689": 207,
        "4690": 137,
        "4691": 38,
        "4692": 94,
        "4693": 227,
        "4694": 241,
        "4695": 242,
        "4696": 217,
        "4697": 83,
        "4698": 181,
        "4699": 101,
        "4700": 191,
        "4701": 9,
        "4702": 57,
        "4703": 50,
        "4704": 65,
        "4705": 185,
        "4706": 64,
        "4707": 91,
        "4708": 55,
        "4709": 131,
        "4710": 166,
        "4711": 240,
        "4712": 184,
        "4713": 173,
        "4714": 95,
        "4715": 109,
        "4716": 61,
        "4717": 53,
        "4718": 31,
        "4719": 183,
        "4720": 135,
        "4721": 211,
        "4722": 167,
        "4723": 136,
        "4724": 172,
        "4725": 99,
        "4726": 230,
        "4727": 29,
        "4728": 36,
        "4729": 201,
        "4730": 104,
        "4731": 210,
        "4732": 82,
        "4733": 58,
        "4734": 186,
        "4735": 154,
        "4736": 213,
        "4737": 192,
        "4738": 191,
        "4739": 203,
        "4740": 5,
        "4741": 209,
        "4742": 161,
        "4743": 155,
        "4744": 200,
        "4745": 78,
        "4746": 37,
        "4747": 36,
        "4748": 40,
        "4749": 93,
        "4750": 182,
        "4751": 20,
        "4752": 202,
        "4753": 45,
        "4754": 108,
        "4755": 160,
        "4756": 47,
        "4757": 99,
        "4758": 168,
        "4759": 137,
        "4760": 38,
        "4761": 104,
        "4762": 107,
        "4763": 135,
        "4764": 39,
        "4765": 47,
        "4766": 37,
        "4767": 177,
        "4768": 1,
        "4769": 93,
        "4770": 175,
        "4771": 254,
        "4772": 130,
        "4773": 175,
        "4774": 131,
        "4775": 37,
        "4776": 137,
        "4777": 43,
        "4778": 148,
        "4779": 91,
        "4780": 4,
        "4781": 216,
        "4782": 118,
        "4783": 181,
        "4784": 219,
        "4785": 13,
        "4786": 7,
        "4787": 220,
        "4788": 146,
        "4789": 119,
        "4790": 78,
        "4791": 157,
        "4792": 150,
        "4793": 129,
        "4794": 225,
        "4795": 173,
        "4796": 21,
        "4797": 60,
        "4798": 59,
        "4799": 34,
        "4800": 184,
        "4801": 205,
        "4802": 81,
        "4803": 255,
        "4804": 190,
        "4805": 11,
        "4806": 136,
        "4807": 234,
        "4808": 174,
        "4809": 111,
        "4810": 198,
        "4811": 40,
        "4812": 209,
        "4813": 57,
        "4814": 205,
        "4815": 12,
        "4816": 142,
        "4817": 59,
        "4818": 139,
        "4819": 115,
        "4820": 216,
        "4821": 183,
        "4822": 57,
        "4823": 8,
        "4824": 141,
        "4825": 92,
        "4826": 50,
        "4827": 101,
        "4828": 53,
        "4829": 74,
        "4830": 68,
        "4831": 45,
        "4832": 16,
        "4833": 2,
        "4834": 190,
        "4835": 47,
        "4836": 21,
        "4837": 82,
        "4838": 63,
        "4839": 102,
        "4840": 93,
        "4841": 170,
        "4842": 137,
        "4843": 223,
        "4844": 134,
        "4845": 47,
        "4846": 91,
        "4847": 108,
        "4848": 94,
        "4849": 247,
        "4850": 128,
        "4851": 70,
        "4852": 205,
        "4853": 31,
        "4854": 239,
        "4855": 66,
        "4856": 22,
        "4857": 22,
        "4858": 81,
        "4859": 99,
        "4860": 55,
        "4861": 97,
        "4862": 41,
        "4863": 60,
        "4864": 194,
        "4865": 90,
        "4866": 175,
        "4867": 222,
        "4868": 185,
        "4869": 47,
        "4870": 229,
        "4871": 127,
        "4872": 235,
        "4873": 220,
        "4874": 1,
        "4875": 170,
        "4876": 200,
        "4877": 103,
        "4878": 158,
        "4879": 83,
        "4880": 104,
        "4881": 131,
        "4882": 227,
        "4883": 123,
        "4884": 13,
        "4885": 106,
        "4886": 92,
        "4887": 229,
        "4888": 65,
        "4889": 96,
        "4890": 38,
        "4891": 98,
        "4892": 76,
        "4893": 58,
        "4894": 131,
        "4895": 24,
        "4896": 72,
        "4897": 106,
        "4898": 250,
        "4899": 58,
        "4900": 142,
        "4901": 206,
        "4902": 126,
        "4903": 160,
        "4904": 79,
        "4905": 232,
        "4906": 250,
        "4907": 37,
        "4908": 239,
        "4909": 7,
        "4910": 177,
        "4911": 92,
        "4912": 82,
        "4913": 163,
        "4914": 87,
        "4915": 56,
        "4916": 230,
        "4917": 105,
        "4918": 223,
        "4919": 28,
        "4920": 17,
        "4921": 184,
        "4922": 80,
        "4923": 62,
        "4924": 228,
        "4925": 168,
        "4926": 33,
        "4927": 61,
        "4928": 198,
        "4929": 165,
        "4930": 9,
        "4931": 149,
        "4932": 184,
        "4933": 145,
        "4934": 27,
        "4935": 212,
        "4936": 222,
        "4937": 214,
        "4938": 227,
        "4939": 96,
        "4940": 118,
        "4941": 237,
        "4942": 240,
        "4943": 47,
        "4944": 47,
        "4945": 75,
        "4946": 23,
        "4947": 227,
        "4948": 11,
        "4949": 77,
        "4950": 9,
        "4951": 182,
        "4952": 63,
        "4953": 182,
        "4954": 186,
        "4955": 98,
        "4956": 73,
        "4957": 136,
        "4958": 76,
        "4959": 133,
        "4960": 13,
        "4961": 55,
        "4962": 55,
        "4963": 236,
        "4964": 88,
        "4965": 96,
        "4966": 219,
        "4967": 51,
        "4968": 27,
        "4969": 199,
        "4970": 58,
        "4971": 140,
        "4972": 145,
        "4973": 196,
        "4974": 251,
        "4975": 11,
        "4976": 4,
        "4977": 226,
        "4978": 137,
        "4979": 192,
        "4980": 185,
        "4981": 91,
        "4982": 146,
        "4983": 47,
        "4984": 232,
        "4985": 105,
        "4986": 136,
        "4987": 214,
        "4988": 216,
        "4989": 148,
        "4990": 168,
        "4991": 123,
        "4992": 4,
        "4993": 140,
        "4994": 19,
        "4995": 123,
        "4996": 80,
        "4997": 255,
        "4998": 75,
        "4999": 14,
        "5000": 0,
        "5001": 115,
        "5002": 107,
        "5003": 49,
        "5004": 16,
        "5005": 198,
        "5006": 69,
        "5007": 204,
        "5008": 63,
        "5009": 49,
        "5010": 112,
        "5011": 232,
        "5012": 58,
        "5013": 39,
        "5014": 22,
        "5015": 162,
        "5016": 88,
        "5017": 129,
        "5018": 35,
        "5019": 198,
        "5020": 13,
        "5021": 228,
        "5022": 137,
        "5023": 62,
        "5024": 134,
        "5025": 138,
        "5026": 239,
        "5027": 114,
        "5028": 170,
        "5029": 220,
        "5030": 67,
        "5031": 251,
        "5032": 233,
        "5033": 36,
        "5034": 212,
        "5035": 204,
        "5036": 30,
        "5037": 251,
        "5038": 139,
        "5039": 214,
        "5040": 87,
        "5041": 214,
        "5042": 234,
        "5043": 84,
        "5044": 63,
        "5045": 149,
        "5046": 168,
        "5047": 193,
        "5048": 31,
        "5049": 207,
        "5050": 94,
        "5051": 183,
        "5052": 90,
        "5053": 14,
        "5054": 34,
        "5055": 87,
        "5056": 165,
        "5057": 138,
        "5058": 248,
        "5059": 147,
        "5060": 80,
        "5061": 0,
        "5062": 201,
        "5063": 33,
        "5064": 39,
        "5065": 151,
        "5066": 176,
        "5067": 158,
        "5068": 57,
        "5069": 229,
        "5070": 146,
        "5071": 94,
        "5072": 141,
        "5073": 56,
        "5074": 93,
        "5075": 129,
        "5076": 242,
        "5077": 87,
        "5078": 32,
        "5079": 138,
        "5080": 39,
        "5081": 154,
        "5082": 72,
        "5083": 29,
        "5084": 56,
        "5085": 142,
        "5086": 210,
        "5087": 230,
        "5088": 136,
        "5089": 231,
        "5090": 242,
        "5091": 143,
        "5092": 61,
        "5093": 213,
        "5094": 162,
        "5095": 117,
        "5096": 174,
        "5097": 193,
        "5098": 59,
        "5099": 43,
        "5100": 18,
        "5101": 193,
        "5102": 228,
        "5103": 21,
        "5104": 191,
        "5105": 153,
        "5106": 61,
        "5107": 168,
        "5108": 76,
        "5109": 22,
        "5110": 154,
        "5111": 82,
        "5112": 77,
        "5113": 164,
        "5114": 95,
        "5115": 14,
        "5116": 207,
        "5117": 238,
        "5118": 73,
        "5119": 63,
        "5120": 48,
        "5121": 11,
        "5122": 110,
        "5123": 78,
        "5124": 19,
        "5125": 145,
        "5126": 59,
        "5127": 250,
        "5128": 110,
        "5129": 160,
        "5130": 61,
        "5131": 187,
        "5132": 11,
        "5133": 240,
        "5134": 75,
        "5135": 236,
        "5136": 75,
        "5137": 209,
        "5138": 182,
        "5139": 98,
        "5140": 197,
        "5141": 125,
        "5142": 69,
        "5143": 239,
        "5144": 196,
        "5145": 130,
        "5146": 158,
        "5147": 188,
        "5148": 119,
        "5149": 164,
        "5150": 1,
        "5151": 60,
        "5152": 231,
        "5153": 108,
        "5154": 166,
        "5155": 159,
        "5156": 216,
        "5157": 89,
        "5158": 82,
        "5159": 235,
        "5160": 247,
        "5161": 235,
        "5162": 72,
        "5163": 175,
        "5164": 147,
        "5165": 179,
        "5166": 88,
        "5167": 38,
        "5168": 191,
        "5169": 135,
        "5170": 132,
        "5171": 167,
        "5172": 227,
        "5173": 222,
        "5174": 85,
        "5175": 141,
        "5176": 91,
        "5177": 9,
        "5178": 196,
        "5179": 251,
        "5180": 155,
        "5181": 182,
        "5182": 182,
        "5183": 109,
        "5184": 186,
        "5185": 2,
        "5186": 105,
        "5187": 251,
        "5188": 12,
        "5189": 238,
        "5190": 177,
        "5191": 67,
        "5192": 219,
        "5193": 82,
        "5194": 206,
        "5195": 191,
        "5196": 94,
        "5197": 158,
        "5198": 228,
        "5199": 68,
        "5200": 147,
        "5201": 105,
        "5202": 212,
        "5203": 248,
        "5204": 56,
        "5205": 31,
        "5206": 189,
        "5207": 26,
        "5208": 186,
        "5209": 143,
        "5210": 63,
        "5211": 35,
        "5212": 73,
        "5213": 166,
        "5214": 236,
        "5215": 218,
        "5216": 79,
        "5217": 11,
        "5218": 109,
        "5219": 198,
        "5220": 143,
        "5221": 211,
        "5222": 190,
        "5223": 4,
        "5224": 93,
        "5225": 186,
        "5226": 16,
        "5227": 69,
        "5228": 228,
        "5229": 125,
        "5230": 7,
        "5231": 211,
        "5232": 32,
        "5233": 251,
        "5234": 150,
        "5235": 6,
        "5236": 6,
        "5237": 50,
        "5238": 243,
        "5239": 67,
        "5240": 205,
        "5241": 145,
        "5242": 121,
        "5243": 211,
        "5244": 112,
        "5245": 40,
        "5246": 42,
        "5247": 23,
        "5248": 61,
        "5249": 164,
        "5250": 9,
        "5251": 55,
        "5252": 143,
        "5253": 132,
        "5254": 147,
        "5255": 14,
        "5256": 57,
        "5257": 152,
        "5258": 188,
        "5259": 213,
        "5260": 122,
        "5261": 204,
        "5262": 38,
        "5263": 72,
        "5264": 203,
        "5265": 207,
        "5266": 248,
        "5267": 228,
        "5268": 103,
        "5269": 8,
        "5270": 159,
        "5271": 231,
        "5272": 214,
        "5273": 169,
        "5274": 109,
        "5275": 139,
        "5276": 159,
        "5277": 45,
        "5278": 38,
        "5279": 119,
        "5280": 224,
        "5281": 128,
        "5282": 156,
        "5283": 30,
        "5284": 63,
        "5285": 34,
        "5286": 222,
        "5287": 121,
        "5288": 106,
        "5289": 26,
        "5290": 172,
        "5291": 92,
        "5292": 219,
        "5293": 182,
        "5294": 3,
        "5295": 161,
        "5296": 61,
        "5297": 145,
        "5298": 198,
        "5299": 45,
        "5300": 216,
        "5301": 213,
        "5302": 48,
        "5303": 90,
        "5304": 89,
        "5305": 22,
        "5306": 251,
        "5307": 130,
        "5308": 227,
        "5309": 165,
        "5310": 216,
        "5311": 224,
        "5312": 51,
        "5313": 83,
        "5314": 151,
        "5315": 27,
        "5316": 223,
        "5317": 199,
        "5318": 143,
        "5319": 11,
        "5320": 140,
        "5321": 189,
        "5322": 241,
        "5323": 19,
        "5324": 18,
        "5325": 12,
        "5326": 150,
        "5327": 241,
        "5328": 37,
        "5329": 108,
        "5330": 46,
        "5331": 90,
        "5332": 162,
        "5333": 92,
        "5334": 42,
        "5335": 54,
        "5336": 171,
        "5337": 198,
        "5338": 45,
        "5339": 220,
        "5340": 193,
        "5341": 104,
        "5342": 151,
        "5343": 161,
        "5344": 97,
        "5345": 84,
        "5346": 84,
        "5347": 96,
        "5348": 208,
        "5349": 224,
        "5350": 153,
        "5351": 104,
        "5352": 83,
        "5353": 127,
        "5354": 142,
        "5355": 4,
        "5356": 109,
        "5357": 99,
        "5358": 135,
        "5359": 100,
        "5360": 184,
        "5361": 213,
        "5362": 121,
        "5363": 66,
        "5364": 114,
        "5365": 153,
        "5366": 190,
        "5367": 109,
        "5368": 210,
        "5369": 153,
        "5370": 141,
        "5371": 241,
        "5372": 124,
        "5373": 112,
        "5374": 84,
        "5375": 76,
        "5376": 75,
        "5377": 173,
        "5378": 165,
        "5379": 42,
        "5380": 26,
        "5381": 65,
        "5382": 19,
        "5383": 55,
        "5384": 151,
        "5385": 222,
        "5386": 118,
        "5387": 94,
        "5388": 87,
        "5389": 42,
        "5390": 157,
        "5391": 98,
        "5392": 93,
        "5393": 178,
        "5394": 149,
        "5395": 152,
        "5396": 138,
        "5397": 210,
        "5398": 229,
        "5399": 102,
        "5400": 29,
        "5401": 20,
        "5402": 165,
        "5403": 179,
        "5404": 238,
        "5405": 32,
        "5406": 8,
        "5407": 176,
        "5408": 248,
        "5409": 3,
        "5410": 148,
        "5411": 185,
        "5412": 146,
        "5413": 55,
        "5414": 60,
        "5415": 193,
        "5416": 104,
        "5417": 229,
        "5418": 249,
        "5419": 14,
        "5420": 121,
        "5421": 77,
        "5422": 243,
        "5423": 115,
        "5424": 230,
        "5425": 251,
        "5426": 85,
        "5427": 238,
        "5428": 74,
        "5429": 82,
        "5430": 20,
        "5431": 61,
        "5432": 75,
        "5433": 113,
        "5434": 49,
        "5435": 215,
        "5436": 136,
        "5437": 162,
        "5438": 167,
        "5439": 18,
        "5440": 90,
        "5441": 210,
        "5442": 65,
        "5443": 0,
        "5444": 252,
        "5445": 232,
        "5446": 20,
        "5447": 237,
        "5448": 120,
        "5449": 115,
        "5450": 220,
        "5451": 213,
        "5452": 245,
        "5453": 128,
        "5454": 78,
        "5455": 119,
        "5456": 74,
        "5457": 42,
        "5458": 228,
        "5459": 100,
        "5460": 29,
        "5461": 181,
        "5462": 21,
        "5463": 163,
        "5464": 146,
        "5465": 210,
        "5466": 48,
        "5467": 1,
        "5468": 227,
        "5469": 163,
        "5470": 76,
        "5471": 241,
        "5472": 180,
        "5473": 82,
        "5474": 106,
        "5475": 253,
        "5476": 153,
        "5477": 16,
        "5478": 148,
        "5479": 17,
        "5480": 74,
        "5481": 138,
        "5482": 105,
        "5483": 46,
        "5484": 137,
        "5485": 64,
        "5486": 237,
        "5487": 97,
        "5488": 218,
        "5489": 218,
        "5490": 198,
        "5491": 42,
        "5492": 84,
        "5493": 241,
        "5494": 100,
        "5495": 44,
        "5496": 199,
        "5497": 179,
        "5498": 180,
        "5499": 56,
        "5500": 55,
        "5501": 128,
        "5502": 94,
        "5503": 4,
        "5504": 4,
        "5505": 136,
        "5506": 173,
        "5507": 252,
        "5508": 109,
        "5509": 88,
        "5510": 32,
        "5511": 188,
        "5512": 44,
        "5513": 227,
        "5514": 95,
        "5515": 179,
        "5516": 244,
        "5517": 6,
        "5518": 14,
        "5519": 171,
        "5520": 191,
        "5521": 69,
        "5522": 63,
        "5523": 132,
        "5524": 179,
        "5525": 9,
        "5526": 124,
        "5527": 13,
        "5528": 43,
        "5529": 200,
        "5530": 152,
        "5531": 37,
        "5532": 130,
        "5533": 95,
        "5534": 223,
        "5535": 73,
        "5536": 155,
        "5537": 216,
        "5538": 203,
        "5539": 121,
        "5540": 194,
        "5541": 87,
        "5542": 119,
        "5543": 57,
        "5544": 59,
        "5545": 6,
        "5546": 128,
        "5547": 245,
        "5548": 7,
        "5549": 39,
        "5550": 151,
        "5551": 65,
        "5552": 242,
        "5553": 17,
        "5554": 45,
        "5555": 147,
        "5556": 79,
        "5557": 76,
        "5558": 81,
        "5559": 24,
        "5560": 185,
        "5561": 39,
        "5562": 43,
        "5563": 48,
        "5564": 166,
        "5565": 63,
        "5566": 14,
        "5567": 124,
        "5568": 20,
        "5569": 81,
        "5570": 27,
        "5571": 115,
        "5572": 81,
        "5573": 14,
        "5574": 99,
        "5575": 81,
        "5576": 28,
        "5577": 253,
        "5578": 238,
        "5579": 218,
        "5580": 215,
        "5581": 185,
        "5582": 170,
        "5583": 22,
        "5584": 56,
        "5585": 13,
        "5586": 185,
        "5587": 44,
        "5588": 185,
        "5589": 33,
        "5590": 183,
        "5591": 178,
        "5592": 187,
        "5593": 175,
        "5594": 149,
        "5595": 11,
        "5596": 211,
        "5597": 111,
        "5598": 205,
        "5599": 224,
        "5600": 104,
        "5601": 60,
        "5602": 27,
        "5603": 155,
        "5604": 153,
        "5605": 13,
        "5606": 161,
        "5607": 30,
        "5608": 21,
        "5609": 57,
        "5610": 117,
        "5611": 153,
        "5612": 95,
        "5613": 183,
        "5614": 139,
        "5615": 42,
        "5616": 23,
        "5617": 35,
        "5618": 159,
        "5619": 102,
        "5620": 234,
        "5621": 90,
        "5622": 100,
        "5623": 188,
        "5624": 37,
        "5625": 91,
        "5626": 221,
        "5627": 45,
        "5628": 67,
        "5629": 37,
        "5630": 179,
        "5631": 156,
        "5632": 103,
        "5633": 237,
        "5634": 189,
        "5635": 85,
        "5636": 120,
        "5637": 125,
        "5638": 235,
        "5639": 236,
        "5640": 38,
        "5641": 161,
        "5642": 128,
        "5643": 117,
        "5644": 129,
        "5645": 134,
        "5646": 6,
        "5647": 157,
        "5648": 227,
        "5649": 206,
        "5650": 151,
        "5651": 31,
        "5652": 72,
        "5653": 110,
        "5654": 32,
        "5655": 164,
        "5656": 247,
        "5657": 240,
        "5658": 114,
        "5659": 82,
        "5660": 15,
        "5661": 83,
        "5662": 251,
        "5663": 39,
        "5664": 212,
        "5665": 137,
        "5666": 38,
        "5667": 247,
        "5668": 169,
        "5669": 42,
        "5670": 85,
        "5671": 248,
        "5672": 228,
        "5673": 21,
        "5674": 200,
        "5675": 215,
        "5676": 238,
        "5677": 56,
        "5678": 224,
        "5679": 33,
        "5680": 62,
        "5681": 240,
        "5682": 128,
        "5683": 10,
        "5684": 200,
        "5685": 172,
        "5686": 236,
        "5687": 181,
        "5688": 97,
        "5689": 83,
        "5690": 248,
        "5691": 31,
        "5692": 230,
        "5693": 177,
        "5694": 162,
        "5695": 68,
        "5696": 64,
        "5697": 86,
        "5698": 242,
        "5699": 82,
        "5700": 75,
        "5701": 201,
        "5702": 39,
        "5703": 194,
        "5704": 43,
        "5705": 114,
        "5706": 41,
        "5707": 43,
        "5708": 24,
        "5709": 130,
        "5710": 205,
        "5711": 186,
        "5712": 32,
        "5713": 27,
        "5714": 7,
        "5715": 236,
        "5716": 179,
        "5717": 72,
        "5718": 82,
        "5719": 39,
        "5720": 250,
        "5721": 194,
        "5722": 95,
        "5723": 60,
        "5724": 28,
        "5725": 137,
        "5726": 127,
        "5727": 109,
        "5728": 143,
        "5729": 145,
        "5730": 129,
        "5731": 25,
        "5732": 157,
        "5733": 119,
        "5734": 174,
        "5735": 7,
        "5736": 245,
        "5737": 44,
        "5738": 105,
        "5739": 141,
        "5740": 50,
        "5741": 73,
        "5742": 77,
        "5743": 171,
        "5744": 119,
        "5745": 241,
        "5746": 64,
        "5747": 47,
        "5748": 14,
        "5749": 216,
        "5750": 187,
        "5751": 104,
        "5752": 200,
        "5753": 131,
        "5754": 146,
        "5755": 250,
        "5756": 99,
        "5757": 249,
        "5758": 90,
        "5759": 15,
        "5760": 73,
        "5761": 72,
        "5762": 121,
        "5763": 140,
        "5764": 182,
        "5765": 90,
        "5766": 164,
        "5767": 153,
        "5768": 160,
        "5769": 123,
        "5770": 19,
        "5771": 252,
        "5772": 146,
        "5773": 76,
        "5774": 112,
        "5775": 177,
        "5776": 8,
        "5777": 78,
        "5778": 61,
        "5779": 254,
        "5780": 52,
        "5781": 192,
        "5782": 40,
        "5783": 110,
        "5784": 149,
        "5785": 22,
        "5786": 36,
        "5787": 17,
        "5788": 35,
        "5789": 22,
        "5790": 16,
        "5791": 9,
        "5792": 113,
        "5793": 139,
        "5794": 163,
        "5795": 53,
        "5796": 89,
        "5797": 59,
        "5798": 182,
        "5799": 27,
        "5800": 242,
        "5801": 167,
        "5802": 64,
        "5803": 25,
        "5804": 146,
        "5805": 229,
        "5806": 111,
        "5807": 74,
        "5808": 131,
        "5809": 172,
        "5810": 166,
        "5811": 192,
        "5812": 162,
        "5813": 151,
        "5814": 252,
        "5815": 249,
        "5816": 106,
        "5817": 92,
        "5818": 58,
        "5819": 46,
        "5820": 73,
        "5821": 239,
        "5822": 65,
        "5823": 11,
        "5824": 48,
        "5825": 23,
        "5826": 248,
        "5827": 82,
        "5828": 254,
        "5829": 13,
        "5830": 126,
        "5831": 161,
        "5832": 99,
        "5833": 211,
        "5834": 69,
        "5835": 242,
        "5836": 77,
        "5837": 161,
        "5838": 253,
        "5839": 194,
        "5840": 127,
        "5841": 66,
        "5842": 33,
        "5843": 208,
        "5844": 94,
        "5845": 57,
        "5846": 113,
        "5847": 50,
        "5848": 42,
        "5849": 95,
        "5850": 177,
        "5851": 255,
        "5852": 24,
        "5853": 6,
        "5854": 224,
        "5855": 8,
        "5856": 69,
        "5857": 249,
        "5858": 150,
        "5859": 115,
        "5860": 82,
        "5861": 43,
        "5862": 37,
        "5863": 36,
        "5864": 189,
        "5865": 89,
        "5866": 24,
        "5867": 164,
        "5868": 4,
        "5869": 53,
        "5870": 144,
        "5871": 216,
        "5872": 184,
        "5873": 207,
        "5874": 82,
        "5875": 7,
        "5876": 87,
        "5877": 239,
        "5878": 188,
        "5879": 242,
        "5880": 165,
        "5881": 35,
        "5882": 72,
        "5883": 94,
        "5884": 119,
        "5885": 55,
        "5886": 14,
        "5887": 134,
        "5888": 138,
        "5889": 235,
        "5890": 242,
        "5891": 240,
        "5892": 134,
        "5893": 162,
        "5894": 243,
        "5895": 82,
        "5896": 15,
        "5897": 189,
        "5898": 230,
        "5899": 213,
        "5900": 172,
        "5901": 208,
        "5902": 87,
        "5903": 227,
        "5904": 118,
        "5905": 122,
        "5906": 223,
        "5907": 86,
        "5908": 211,
        "5909": 2,
        "5910": 237,
        "5911": 181,
        "5912": 73,
        "5913": 42,
        "5914": 218,
        "5915": 170,
        "5916": 44,
        "5917": 210,
        "5918": 108,
        "5919": 231,
        "5920": 231,
        "5921": 80,
        "5922": 104,
        "5923": 93,
        "5924": 243,
        "5925": 255,
        "5926": 18,
        "5927": 193,
        "5928": 141,
        "5929": 86,
        "5930": 14,
        "5931": 57,
        "5932": 241,
        "5933": 126,
        "5934": 167,
        "5935": 119,
        "5936": 146,
        "5937": 189,
        "5938": 57,
        "5939": 66,
        "5940": 9,
        "5941": 197,
        "5942": 44,
        "5943": 143,
        "5944": 231,
        "5945": 248,
        "5946": 81,
        "5947": 117,
        "5948": 36,
        "5949": 185,
        "5950": 225,
        "5951": 102,
        "5952": 148,
        "5953": 6,
        "5954": 184,
        "5955": 71,
        "5956": 254,
        "5957": 227,
        "5958": 229,
        "5959": 96,
        "5960": 18,
        "5961": 103,
        "5962": 49,
        "5963": 176,
        "5964": 132,
        "5965": 150,
        "5966": 72,
        "5967": 211,
        "5968": 198,
        "5969": 184,
        "5970": 234,
        "5971": 183,
        "5972": 77,
        "5973": 254,
        "5974": 55,
        "5975": 118,
        "5976": 242,
        "5977": 190,
        "5978": 116,
        "5979": 67,
        "5980": 39,
        "5981": 197,
        "5982": 63,
        "5983": 93,
        "5984": 34,
        "5985": 137,
        "5986": 90,
        "5987": 56,
        "5988": 104,
        "5989": 96,
        "5990": 236,
        "5991": 3,
        "5992": 92,
        "5993": 103,
        "5994": 126,
        "5995": 111,
        "5996": 210,
        "5997": 20,
        "5998": 26,
        "5999": 16,
        "6000": 205,
        "6001": 71,
        "6002": 209,
        "6003": 164,
        "6004": 247,
        "6005": 87,
        "6006": 31,
        "6007": 253,
        "6008": 165,
        "6009": 229,
        "6010": 35,
        "6011": 92,
        "6012": 92,
        "6013": 245,
        "6014": 243,
        "6015": 48,
        "6016": 68,
        "6017": 169,
        "6018": 113,
        "6019": 121,
        "6020": 109,
        "6021": 17,
        "6022": 249,
        "6023": 54,
        "6024": 51,
        "6025": 3,
        "6026": 240,
        "6027": 233,
        "6028": 91,
        "6029": 19,
        "6030": 56,
        "6031": 196,
        "6032": 26,
        "6033": 78,
        "6034": 31,
        "6035": 148,
        "6036": 187,
        "6037": 34,
        "6038": 251,
        "6039": 133,
        "6040": 194,
        "6041": 113,
        "6042": 210,
        "6043": 151,
        "6044": 1,
        "6045": 140,
        "6046": 107,
        "6047": 240,
        "6048": 21,
        "6049": 209,
        "6050": 216,
        "6051": 163,
        "6052": 124,
        "6053": 181,
        "6054": 227,
        "6055": 34,
        "6056": 171,
        "6057": 221,
        "6058": 18,
        "6059": 113,
        "6060": 119,
        "6061": 147,
        "6062": 209,
        "6063": 155,
        "6064": 253,
        "6065": 36,
        "6066": 207,
        "6067": 134,
        "6068": 186,
        "6069": 150,
        "6070": 228,
        "6071": 88,
        "6072": 169,
        "6073": 144,
        "6074": 187,
        "6075": 198,
        "6076": 55,
        "6077": 31,
        "6078": 1,
        "6079": 205,
        "6080": 211,
        "6081": 216,
        "6082": 150,
        "6083": 202,
        "6084": 73,
        "6085": 197,
        "6086": 249,
        "6087": 135,
        "6088": 93,
        "6089": 212,
        "6090": 143,
        "6091": 142,
        "6092": 233,
        "6093": 42,
        "6094": 85,
        "6095": 47,
        "6096": 32,
        "6097": 141,
        "6098": 209,
        "6099": 185,
        "6100": 109,
        "6101": 218,
        "6102": 108,
        "6103": 18,
        "6104": 5,
        "6105": 232,
        "6106": 189,
        "6107": 207,
        "6108": 239,
        "6109": 233,
        "6110": 46,
        "6111": 228,
        "6112": 158,
        "6113": 131,
        "6114": 188,
        "6115": 64,
        "6116": 153,
        "6117": 102,
        "6118": 143,
        "6119": 34,
        "6120": 65,
        "6121": 157,
        "6122": 177,
        "6123": 70,
        "6124": 100,
        "6125": 92,
        "6126": 30,
        "6127": 21,
        "6128": 255,
        "6129": 87,
        "6130": 170,
        "6131": 127,
        "6132": 2,
        "6133": 25,
        "6134": 222,
        "6135": 251,
        "6136": 52,
        "6137": 218,
        "6138": 102,
        "6139": 167,
        "6140": 150,
        "6141": 196,
        "6142": 69,
        "6143": 3,
        "6144": 108,
        "6145": 141,
        "6146": 48,
        "6147": 93,
        "6148": 75,
        "6149": 157,
        "6150": 71,
        "6151": 80,
        "6152": 140,
        "6153": 218,
        "6154": 79,
        "6155": 55,
        "6156": 89,
        "6157": 177,
        "6158": 90,
        "6159": 184,
        "6160": 171,
        "6161": 0,
        "6162": 173,
        "6163": 12,
        "6164": 76,
        "6165": 22,
        "6166": 121,
        "6167": 104,
        "6168": 209,
        "6169": 24,
        "6170": 155,
        "6171": 155,
        "6172": 179,
        "6173": 60,
        "6174": 60,
        "6175": 86,
        "6176": 165,
        "6177": 135,
        "6178": 22,
        "6179": 84,
        "6180": 229,
        "6181": 158,
        "6182": 187,
        "6183": 223,
        "6184": 195,
        "6185": 186,
        "6186": 97,
        "6187": 42,
        "6188": 65,
        "6189": 195,
        "6190": 131,
        "6191": 25,
        "6192": 61,
        "6193": 229,
        "6194": 45,
        "6195": 151,
        "6196": 233,
        "6197": 170,
        "6198": 39,
        "6199": 83,
        "6200": 187,
        "6201": 48,
        "6202": 37,
        "6203": 211,
        "6204": 149,
        "6205": 68,
        "6206": 110,
        "6207": 81,
        "6208": 111,
        "6209": 176,
        "6210": 89,
        "6211": 186,
        "6212": 38,
        "6213": 27,
        "6214": 162,
        "6215": 212,
        "6216": 196,
        "6217": 104,
        "6218": 102,
        "6219": 161,
        "6220": 215,
        "6221": 87,
        "6222": 200,
        "6223": 212,
        "6224": 124,
        "6225": 150,
        "6226": 71,
        "6227": 76,
        "6228": 46,
        "6229": 205,
        "6230": 107,
        "6231": 240,
        "6232": 152,
        "6233": 143,
        "6234": 226,
        "6235": 158,
        "6236": 135,
        "6237": 82,
        "6238": 253,
        "6239": 191,
        "6240": 220,
        "6241": 2,
        "6242": 225,
        "6243": 162,
        "6244": 51,
        "6245": 199,
        "6246": 207,
        "6247": 29,
        "6248": 41,
        "6249": 52,
        "6250": 231,
        "6251": 63,
        "6252": 132,
        "6253": 145,
        "6254": 141,
        "6255": 67,
        "6256": 13,
        "6257": 138,
        "6258": 179,
        "6259": 168,
        "6260": 59,
        "6261": 229,
        "6262": 164,
        "6263": 186,
        "6264": 138,
        "6265": 93,
        "6266": 129,
        "6267": 13,
        "6268": 61,
        "6269": 241,
        "6270": 162,
        "6271": 57,
        "6272": 215,
        "6273": 140,
        "6274": 33,
        "6275": 218,
        "6276": 13,
        "6277": 14,
        "6278": 208,
        "6279": 220,
        "6280": 8,
        "6281": 110,
        "6282": 32,
        "6283": 88,
        "6284": 74,
        "6285": 126,
        "6286": 61,
        "6287": 249,
        "6288": 185,
        "6289": 211,
        "6290": 124,
        "6291": 255,
        "6292": 131,
        "6293": 220,
        "6294": 113,
        "6295": 223,
        "6296": 102,
        "6297": 149,
        "6298": 1,
        "6299": 109,
        "6300": 3,
        "6301": 66,
        "6302": 246,
        "6303": 218,
        "6304": 170,
        "6305": 11,
        "6306": 180,
        "6307": 148,
        "6308": 124,
        "6309": 72,
        "6310": 82,
        "6311": 200,
        "6312": 55,
        "6313": 23,
        "6314": 246,
        "6315": 43,
        "6316": 58,
        "6317": 75,
        "6318": 253,
        "6319": 150,
        "6320": 103,
        "6321": 52,
        "6322": 32,
        "6323": 215,
        "6324": 144,
        "6325": 228,
        "6326": 195,
        "6327": 166,
        "6328": 240,
        "6329": 135,
        "6330": 35,
        "6331": 216,
        "6332": 166,
        "6333": 204,
        "6334": 134,
        "6335": 9,
        "6336": 233,
        "6337": 195,
        "6338": 211,
        "6339": 149,
        "6340": 220,
        "6341": 31,
        "6342": 30,
        "6343": 159,
        "6344": 250,
        "6345": 53,
        "6346": 223,
        "6347": 0,
        "6348": 170,
        "6349": 237,
        "6350": 168,
        "6351": 158,
        "6352": 166,
        "6353": 149,
        "6354": 199,
        "6355": 16,
        "6356": 154,
        "6357": 241,
        "6358": 86,
        "6359": 16,
        "6360": 116,
        "6361": 109,
        "6362": 229,
        "6363": 125,
        "6364": 208,
        "6365": 155,
        "6366": 146,
        "6367": 119,
        "6368": 120,
        "6369": 44,
        "6370": 222,
        "6371": 150,
        "6372": 23,
        "6373": 10,
        "6374": 164,
        "6375": 117,
        "6376": 5,
        "6377": 146,
        "6378": 149,
        "6379": 28,
        "6380": 102,
        "6381": 45,
        "6382": 55,
        "6383": 41,
        "6384": 65,
        "6385": 67,
        "6386": 225,
        "6387": 74,
        "6388": 34,
        "6389": 147,
        "6390": 105,
        "6391": 184,
        "6392": 52,
        "6393": 165,
        "6394": 155,
        "6395": 178,
        "6396": 101,
        "6397": 190,
        "6398": 111,
        "6399": 86,
        "6400": 36,
        "6401": 245,
        "6402": 71,
        "6403": 196,
        "6404": 157,
        "6405": 99,
        "6406": 59,
        "6407": 251,
        "6408": 105,
        "6409": 25,
        "6410": 13,
        "6411": 134,
        "6412": 107,
        "6413": 22,
        "6414": 35,
        "6415": 19,
        "6416": 72,
        "6417": 18,
        "6418": 185,
        "6419": 206,
        "6420": 244,
        "6421": 8,
        "6422": 130,
        "6423": 185,
        "6424": 254,
        "6425": 8,
        "6426": 95,
        "6427": 99,
        "6428": 5,
        "6429": 99,
        "6430": 173,
        "6431": 130,
        "6432": 133,
        "6433": 39,
        "6434": 127,
        "6435": 1,
        "6436": 235,
        "6437": 182,
        "6438": 183,
        "6439": 116,
        "6440": 23,
        "6441": 162,
        "6442": 104,
        "6443": 224,
        "6444": 223,
        "6445": 72,
        "6446": 225,
        "6447": 222,
        "6448": 152,
        "6449": 184,
        "6450": 53,
        "6451": 100,
        "6452": 147,
        "6453": 220,
        "6454": 113,
        "6455": 212,
        "6456": 197,
        "6457": 180,
        "6458": 7,
        "6459": 66,
        "6460": 188,
        "6461": 220,
        "6462": 111,
        "6463": 186,
        "6464": 62,
        "6465": 63,
        "6466": 195,
        "6467": 245,
        "6468": 237,
        "6469": 31,
        "6470": 200,
        "6471": 126,
        "6472": 229,
        "6473": 45,
        "6474": 153,
        "6475": 4,
        "6476": 86,
        "6477": 70,
        "6478": 81,
        "6479": 24,
        "6480": 213,
        "6481": 100,
        "6482": 58,
        "6483": 33,
        "6484": 132,
        "6485": 169,
        "6486": 181,
        "6487": 134,
        "6488": 180,
        "6489": 176,
        "6490": 251,
        "6491": 64,
        "6492": 133,
        "6493": 67,
        "6494": 117,
        "6495": 11,
        "6496": 102,
        "6497": 112,
        "6498": 53,
        "6499": 253,
        "6500": 155,
        "6501": 182,
        "6502": 37,
        "6503": 99,
        "6504": 96,
        "6505": 141,
        "6506": 136,
        "6507": 121,
        "6508": 219,
        "6509": 217,
        "6510": 61,
        "6511": 109,
        "6512": 87,
        "6513": 19,
        "6514": 93,
        "6515": 154,
        "6516": 147,
        "6517": 185,
        "6518": 239,
        "6519": 62,
        "6520": 97,
        "6521": 42,
        "6522": 172,
        "6523": 198,
        "6524": 130,
        "6525": 169,
        "6526": 161,
        "6527": 191,
        "6528": 136,
        "6529": 124,
        "6530": 247,
        "6531": 130,
        "6532": 237,
        "6533": 136,
        "6534": 161,
        "6535": 145,
        "6536": 155,
        "6537": 163,
        "6538": 60,
        "6539": 42,
        "6540": 207,
        "6541": 90,
        "6542": 98,
        "6543": 48,
        "6544": 34,
        "6545": 2,
        "6546": 51,
        "6547": 123,
        "6548": 89,
        "6549": 103,
        "6550": 135,
        "6551": 128,
        "6552": 183,
        "6553": 15,
        "6554": 147,
        "6555": 152,
        "6556": 158,
        "6557": 73,
        "6558": 181,
        "6559": 10,
        "6560": 113,
        "6561": 209,
        "6562": 102,
        "6563": 28,
        "6564": 146,
        "6565": 248,
        "6566": 253,
        "6567": 246,
        "6568": 57,
        "6569": 57,
        "6570": 237,
        "6571": 189,
        "6572": 195,
        "6573": 159,
        "6574": 168,
        "6575": 78,
        "6576": 144,
        "6577": 27,
        "6578": 208,
        "6579": 39,
        "6580": 8,
        "6581": 198,
        "6582": 122,
        "6583": 228,
        "6584": 58,
        "6585": 175,
        "6586": 189,
        "6587": 156,
        "6588": 223,
        "6589": 214,
        "6590": 221,
        "6591": 188,
        "6592": 153,
        "6593": 219,
        "6594": 214,
        "6595": 54,
        "6596": 68,
        "6597": 129,
        "6598": 102,
        "6599": 149,
        "6600": 20,
        "6601": 11,
        "6602": 53,
        "6603": 65,
        "6604": 249,
        "6605": 183,
        "6606": 129,
        "6607": 78,
        "6608": 230,
        "6609": 182,
        "6610": 182,
        "6611": 122,
        "6612": 243,
        "6613": 156,
        "6614": 73,
        "6615": 25,
        "6616": 169,
        "6617": 0,
        "6618": 253,
        "6619": 206,
        "6620": 82,
        "6621": 76,
        "6622": 137,
        "6623": 163,
        "6624": 44,
        "6625": 34,
        "6626": 80,
        "6627": 98,
        "6628": 227,
        "6629": 118,
        "6630": 153,
        "6631": 238,
        "6632": 202,
        "6633": 151,
        "6634": 158,
        "6635": 106,
        "6636": 169,
        "6637": 162,
        "6638": 8,
        "6639": 67,
        "6640": 231,
        "6641": 133,
        "6642": 136,
        "6643": 86,
        "6644": 182,
        "6645": 172,
        "6646": 48,
        "6647": 125,
        "6648": 1,
        "6649": 176,
        "6650": 45,
        "6651": 224,
        "6652": 228,
        "6653": 69,
        "6654": 146,
        "6655": 2,
        "6656": 71,
        "6657": 162,
        "6658": 137,
        "6659": 112,
        "6660": 170,
        "6661": 254,
        "6662": 75,
        "6663": 130,
        "6664": 132,
        "6665": 49,
        "6666": 144,
        "6667": 236,
        "6668": 100,
        "6669": 59,
        "6670": 225,
        "6671": 27,
        "6672": 33,
        "6673": 252,
        "6674": 118,
        "6675": 23,
        "6676": 117,
        "6677": 61,
        "6678": 181,
        "6679": 19,
        "6680": 144,
        "6681": 201,
        "6682": 33,
        "6683": 25,
        "6684": 75,
        "6685": 119,
        "6686": 69,
        "6687": 26,
        "6688": 223,
        "6689": 116,
        "6690": 229,
        "6691": 85,
        "6692": 87,
        "6693": 140,
        "6694": 170,
        "6695": 78,
        "6696": 202,
        "6697": 60,
        "6698": 77,
        "6699": 173,
        "6700": 77,
        "6701": 128,
        "6702": 174,
        "6703": 78,
        "6704": 118,
        "6705": 11,
        "6706": 22,
        "6707": 43,
        "6708": 3,
        "6709": 48,
        "6710": 32,
        "6711": 124,
        "6712": 111,
        "6713": 128,
        "6714": 94,
        "6715": 194,
        "6716": 157,
        "6717": 53,
        "6718": 216,
        "6719": 241,
        "6720": 63,
        "6721": 157,
        "6722": 142,
        "6723": 85,
        "6724": 68,
        "6725": 14,
        "6726": 32,
        "6727": 38,
        "6728": 44,
        "6729": 126,
        "6730": 44,
        "6731": 3,
        "6732": 61,
        "6733": 59,
        "6734": 87,
        "6735": 141,
        "6736": 12,
        "6737": 98,
        "6738": 255,
        "6739": 235,
        "6740": 91,
        "6741": 113,
        "6742": 147,
        "6743": 47,
        "6744": 164,
        "6745": 150,
        "6746": 55,
        "6747": 102,
        "6748": 161,
        "6749": 84,
        "6750": 174,
        "6751": 245,
        "6752": 201,
        "6753": 155,
        "6754": 44,
        "6755": 195,
        "6756": 234,
        "6757": 124,
        "6758": 120,
        "6759": 233,
        "6760": 99,
        "6761": 42,
        "6762": 77,
        "6763": 69,
        "6764": 232,
        "6765": 230,
        "6766": 49,
        "6767": 79,
        "6768": 34,
        "6769": 107,
        "6770": 208,
        "6771": 136,
        "6772": 221,
        "6773": 60,
        "6774": 103,
        "6775": 112,
        "6776": 203,
        "6777": 223,
        "6778": 30,
        "6779": 250,
        "6780": 95,
        "6781": 201,
        "6782": 134,
        "6783": 3,
        "6784": 4,
        "6785": 198,
        "6786": 79,
        "6787": 17,
        "6788": 135,
        "6789": 190,
        "6790": 147,
        "6791": 40,
        "6792": 12,
        "6793": 198,
        "6794": 153,
        "6795": 180,
        "6796": 222,
        "6797": 167,
        "6798": 171,
        "6799": 190,
        "6800": 123,
        "6801": 54,
        "6802": 232,
        "6803": 250,
        "6804": 96,
        "6805": 234,
        "6806": 22,
        "6807": 63,
        "6808": 115,
        "6809": 241,
        "6810": 13,
        "6811": 156,
        "6812": 246,
        "6813": 91,
        "6814": 216,
        "6815": 229,
        "6816": 136,
        "6817": 34,
        "6818": 241,
        "6819": 25,
        "6820": 18,
        "6821": 130,
        "6822": 85,
        "6823": 236,
        "6824": 222,
        "6825": 98,
        "6826": 30,
        "6827": 35,
        "6828": 83,
        "6829": 255,
        "6830": 3,
        "6831": 144,
        "6832": 89,
        "6833": 217,
        "6834": 243,
        "6835": 57,
        "6836": 0,
        "6837": 92,
        "6838": 155,
        "6839": 66,
        "6840": 40,
        "6841": 116,
        "6842": 71,
        "6843": 46,
        "6844": 196,
        "6845": 108,
        "6846": 38,
        "6847": 209,
        "6848": 234,
        "6849": 71,
        "6850": 44,
        "6851": 204,
        "6852": 209,
        "6853": 74,
        "6854": 64,
        "6855": 169,
        "6856": 111,
        "6857": 122,
        "6858": 76,
        "6859": 140,
        "6860": 86,
        "6861": 74,
        "6862": 122,
        "6863": 15,
        "6864": 148,
        "6865": 170,
        "6866": 219,
        "6867": 58,
        "6868": 123,
        "6869": 110,
        "6870": 109,
        "6871": 145,
        "6872": 61,
        "6873": 58,
        "6874": 122,
        "6875": 76,
        "6876": 207,
        "6877": 37,
        "6878": 249,
        "6879": 30,
        "6880": 22,
        "6881": 249,
        "6882": 208,
        "6883": 30,
        "6884": 88,
        "6885": 217,
        "6886": 9,
        "6887": 60,
        "6888": 182,
        "6889": 85,
        "6890": 95,
        "6891": 118,
        "6892": 42,
        "6893": 28,
        "6894": 56,
        "6895": 94,
        "6896": 109,
        "6897": 81,
        "6898": 48,
        "6899": 172,
        "6900": 18,
        "6901": 210,
        "6902": 147,
        "6903": 90,
        "6904": 20,
        "6905": 71,
        "6906": 248,
        "6907": 101,
        "6908": 254,
        "6909": 245,
        "6910": 87,
        "6911": 190,
        "6912": 25,
        "6913": 173,
        "6914": 4,
        "6915": 229,
        "6916": 75,
        "6917": 119,
        "6918": 61,
        "6919": 159,
        "6920": 206,
        "6921": 80,
        "6922": 233,
        "6923": 26,
        "6924": 211,
        "6925": 200,
        "6926": 150,
        "6927": 245,
        "6928": 242,
        "6929": 1,
        "6930": 123,
        "6931": 17,
        "6932": 80,
        "6933": 157,
        "6934": 212,
        "6935": 121,
        "6936": 240,
        "6937": 238,
        "6938": 109,
        "6939": 82,
        "6940": 65,
        "6941": 19,
        "6942": 184,
        "6943": 99,
        "6944": 207,
        "6945": 170,
        "6946": 164,
        "6947": 85,
        "6948": 209,
        "6949": 250,
        "6950": 211,
        "6951": 204,
        "6952": 243,
        "6953": 186,
        "6954": 243,
        "6955": 218,
        "6956": 17,
        "6957": 174,
        "6958": 19,
        "6959": 214,
        "6960": 250,
        "6961": 128,
        "6962": 68,
        "6963": 204,
        "6964": 111,
        "6965": 245,
        "6966": 51,
        "6967": 190,
        "6968": 79,
        "6969": 46,
        "6970": 226,
        "6971": 51,
        "6972": 40,
        "6973": 158,
        "6974": 117,
        "6975": 107,
        "6976": 244,
        "6977": 184,
        "6978": 218,
        "6979": 31,
        "6980": 195,
        "6981": 173,
        "6982": 173,
        "6983": 225,
        "6984": 135,
        "6985": 126,
        "6986": 169,
        "6987": 141,
        "6988": 255,
        "6989": 181,
        "6990": 25,
        "6991": 228,
        "6992": 47,
        "6993": 228,
        "6994": 90,
        "6995": 25,
        "6996": 186,
        "6997": 243,
        "6998": 1,
        "6999": 67,
        "7000": 41,
        "7001": 248,
        "7002": 157,
        "7003": 35,
        "7004": 28,
        "7005": 4,
        "7006": 141,
        "7007": 76,
        "7008": 56,
        "7009": 73,
        "7010": 180,
        "7011": 176,
        "7012": 10,
        "7013": 145,
        "7014": 77,
        "7015": 149,
        "7016": 192,
        "7017": 102,
        "7018": 55,
        "7019": 252,
        "7020": 85,
        "7021": 53,
        "7022": 91,
        "7023": 234,
        "7024": 240,
        "7025": 93,
        "7026": 97,
        "7027": 10,
        "7028": 17,
        "7029": 74,
        "7030": 7,
        "7031": 246,
        "7032": 199,
        "7033": 177,
        "7034": 214,
        "7035": 126,
        "7036": 145,
        "7037": 145,
        "7038": 24,
        "7039": 132,
        "7040": 53,
        "7041": 171,
        "7042": 89,
        "7043": 217,
        "7044": 110,
        "7045": 80,
        "7046": 229,
        "7047": 5,
        "7048": 71,
        "7049": 17,
        "7050": 61,
        "7051": 179,
        "7052": 169,
        "7053": 13,
        "7054": 51,
        "7055": 64,
        "7056": 44,
        "7057": 151,
        "7058": 14,
        "7059": 60,
        "7060": 100,
        "7061": 185,
        "7062": 73,
        "7063": 13,
        "7064": 60,
        "7065": 41,
        "7066": 80,
        "7067": 224,
        "7068": 194,
        "7069": 215,
        "7070": 211,
        "7071": 192,
        "7072": 49,
        "7073": 93,
        "7074": 246,
        "7075": 222,
        "7076": 180,
        "7077": 208,
        "7078": 80,
        "7079": 97,
        "7080": 237,
        "7081": 202,
        "7082": 252,
        "7083": 223,
        "7084": 154,
        "7085": 246,
        "7086": 18,
        "7087": 22,
        "7088": 191,
        "7089": 37,
        "7090": 169,
        "7091": 171,
        "7092": 235,
        "7093": 117,
        "7094": 134,
        "7095": 49,
        "7096": 214,
        "7097": 189,
        "7098": 243,
        "7099": 191,
        "7100": 222,
        "7101": 128,
        "7102": 242,
        "7103": 33,
        "7104": 207,
        "7105": 204,
        "7106": 242,
        "7107": 3,
        "7108": 6,
        "7109": 24,
        "7110": 56,
        "7111": 239,
        "7112": 206,
        "7113": 28,
        "7114": 83,
        "7115": 230,
        "7116": 7,
        "7117": 75,
        "7118": 163,
        "7119": 236,
        "7120": 12,
        "7121": 236,
        "7122": 254,
        "7123": 255,
        "7124": 144,
        "7125": 59,
        "7126": 29,
        "7127": 149,
        "7128": 24,
        "7129": 54,
        "7130": 97,
        "7131": 164,
        "7132": 11,
        "7133": 29,
        "7134": 195,
        "7135": 237,
        "7136": 247,
        "7137": 157,
        "7138": 104,
        "7139": 204,
        "7140": 238,
        "7141": 218,
        "7142": 238,
        "7143": 254,
        "7144": 171,
        "7145": 214,
        "7146": 191,
        "7147": 203,
        "7148": 3,
        "7149": 16,
        "7150": 212,
        "7151": 63,
        "7152": 218,
        "7153": 161,
        "7154": 81,
        "7155": 181,
        "7156": 43,
        "7157": 152,
        "7158": 194,
        "7159": 186,
        "7160": 243,
        "7161": 18,
        "7162": 124,
        "7163": 219,
        "7164": 34,
        "7165": 27,
        "7166": 54,
        "7167": 55,
        "7168": 118,
        "7169": 135,
        "7170": 90,
        "7171": 186,
        "7172": 0,
        "7173": 13,
        "7174": 2,
        "7175": 111,
        "7176": 145,
        "7177": 232,
        "7178": 187,
        "7179": 53,
        "7180": 93,
        "7181": 170,
        "7182": 6,
        "7183": 165,
        "7184": 129,
        "7185": 227,
        "7186": 176,
        "7187": 219,
        "7188": 38,
        "7189": 145,
        "7190": 14,
        "7191": 222,
        "7192": 55,
        "7193": 56,
        "7194": 22,
        "7195": 11,
        "7196": 140,
        "7197": 80,
        "7198": 179,
        "7199": 183,
        "7200": 58,
        "7201": 179,
        "7202": 48,
        "7203": 41,
        "7204": 90,
        "7205": 242,
        "7206": 215,
        "7207": 171,
        "7208": 82,
        "7209": 99,
        "7210": 217,
        "7211": 186,
        "7212": 121,
        "7213": 225,
        "7214": 88,
        "7215": 59,
        "7216": 15,
        "7217": 89,
        "7218": 65,
        "7219": 172,
        "7220": 113,
        "7221": 134,
        "7222": 65,
        "7223": 231,
        "7224": 196,
        "7225": 110,
        "7226": 182,
        "7227": 129,
        "7228": 249,
        "7229": 115,
        "7230": 147,
        "7231": 33,
        "7232": 218,
        "7233": 169,
        "7234": 181,
        "7235": 244,
        "7236": 108,
        "7237": 43,
        "7238": 53,
        "7239": 102,
        "7240": 245,
        "7241": 182,
        "7242": 143,
        "7243": 59,
        "7244": 80,
        "7245": 70,
        "7246": 171,
        "7247": 226,
        "7248": 41,
        "7249": 155,
        "7250": 248,
        "7251": 197,
        "7252": 227,
        "7253": 211,
        "7254": 179,
        "7255": 4,
        "7256": 170,
        "7257": 208,
        "7258": 211,
        "7259": 40,
        "7260": 161,
        "7261": 26,
        "7262": 109,
        "7263": 159,
        "7264": 34,
        "7265": 112,
        "7266": 142,
        "7267": 30,
        "7268": 56,
        "7269": 250,
        "7270": 200,
        "7271": 233,
        "7272": 175,
        "7273": 0,
        "7274": 13,
        "7275": 75,
        "7276": 197,
        "7277": 217,
        "7278": 48,
        "7279": 67,
        "7280": 16,
        "7281": 70,
        "7282": 16,
        "7283": 83,
        "7284": 216,
        "7285": 158,
        "7286": 179,
        "7287": 249,
        "7288": 185,
        "7289": 167,
        "7290": 116,
        "7291": 37,
        "7292": 196,
        "7293": 69,
        "7294": 107,
        "7295": 168,
        "7296": 69,
        "7297": 180,
        "7298": 104,
        "7299": 244,
        "7300": 2,
        "7301": 177,
        "7302": 74,
        "7303": 177,
        "7304": 20,
        "7305": 116,
        "7306": 248,
        "7307": 205,
        "7308": 127,
        "7309": 170,
        "7310": 139,
        "7311": 195,
        "7312": 26,
        "7313": 121,
        "7314": 171,
        "7315": 114,
        "7316": 48,
        "7317": 100,
        "7318": 209,
        "7319": 33,
        "7320": 163,
        "7321": 214,
        "7322": 3,
        "7323": 68,
        "7324": 27,
        "7325": 222,
        "7326": 81,
        "7327": 92,
        "7328": 217,
        "7329": 46,
        "7330": 237,
        "7331": 231,
        "7332": 46,
        "7333": 219,
        "7334": 63,
        "7335": 111,
        "7336": 162,
        "7337": 34,
        "7338": 195,
        "7339": 88,
        "7340": 186,
        "7341": 220,
        "7342": 6,
        "7343": 62,
        "7344": 193,
        "7345": 218,
        "7346": 92,
        "7347": 174,
        "7348": 188,
        "7349": 129,
        "7350": 71,
        "7351": 126,
        "7352": 131,
        "7353": 207,
        "7354": 186,
        "7355": 166,
        "7356": 174,
        "7357": 169,
        "7358": 220,
        "7359": 75,
        "7360": 178,
        "7361": 238,
        "7362": 6,
        "7363": 8,
        "7364": 178,
        "7365": 215,
        "7366": 218,
        "7367": 122,
        "7368": 156,
        "7369": 245,
        "7370": 90,
        "7371": 246,
        "7372": 154,
        "7373": 215,
        "7374": 93,
        "7375": 158,
        "7376": 189,
        "7377": 44,
        "7378": 41,
        "7379": 144,
        "7380": 167,
        "7381": 7,
        "7382": 180,
        "7383": 215,
        "7384": 2,
        "7385": 94,
        "7386": 191,
        "7387": 13,
        "7388": 96,
        "7389": 17,
        "7390": 30,
        "7391": 22,
        "7392": 58,
        "7393": 201,
        "7394": 89,
        "7395": 93,
        "7396": 66,
        "7397": 83,
        "7398": 152,
        "7399": 32,
        "7400": 196,
        "7401": 75,
        "7402": 178,
        "7403": 9,
        "7404": 229,
        "7405": 235,
        "7406": 107,
        "7407": 164,
        "7408": 163,
        "7409": 196,
        "7410": 82,
        "7411": 49,
        "7412": 163,
        "7413": 160,
        "7414": 198,
        "7415": 175,
        "7416": 118,
        "7417": 88,
        "7418": 59,
        "7419": 221,
        "7420": 213,
        "7421": 183,
        "7422": 104,
        "7423": 241,
        "7424": 25,
        "7425": 194,
        "7426": 40,
        "7427": 201,
        "7428": 119,
        "7429": 162,
        "7430": 230,
        "7431": 201,
        "7432": 55,
        "7433": 25,
        "7434": 189,
        "7435": 238,
        "7436": 90,
        "7437": 99,
        "7438": 93,
        "7439": 125,
        "7440": 131,
        "7441": 130,
        "7442": 183,
        "7443": 93,
        "7444": 157,
        "7445": 10,
        "7446": 240,
        "7447": 133,
        "7448": 171,
        "7449": 169,
        "7450": 23,
        "7451": 9,
        "7452": 45,
        "7453": 202,
        "7454": 115,
        "7455": 29,
        "7456": 204,
        "7457": 26,
        "7458": 241,
        "7459": 164,
        "7460": 194,
        "7461": 169,
        "7462": 165,
        "7463": 179,
        "7464": 40,
        "7465": 192,
        "7466": 44,
        "7467": 150,
        "7468": 32,
        "7469": 39,
        "7470": 134,
        "7471": 86,
        "7472": 31,
        "7473": 214,
        "7474": 95,
        "7475": 197,
        "7476": 187,
        "7477": 157,
        "7478": 143,
        "7479": 74,
        "7480": 19,
        "7481": 77,
        "7482": 135,
        "7483": 97,
        "7484": 35,
        "7485": 49,
        "7486": 15,
        "7487": 102,
        "7488": 201,
        "7489": 221,
        "7490": 5,
        "7491": 43,
        "7492": 7,
        "7493": 15,
        "7494": 55,
        "7495": 80,
        "7496": 15,
        "7497": 165,
        "7498": 36,
        "7499": 104,
        "7500": 87,
        "7501": 49,
        "7502": 108,
        "7503": 232,
        "7504": 197,
        "7505": 102,
        "7506": 229,
        "7507": 100,
        "7508": 214,
        "7509": 179,
        "7510": 233,
        "7511": 138,
        "7512": 165,
        "7513": 224,
        "7514": 182,
        "7515": 229,
        "7516": 3,
        "7517": 251,
        "7518": 77,
        "7519": 128,
        "7520": 18,
        "7521": 56,
        "7522": 247,
        "7523": 192,
        "7524": 61,
        "7525": 34,
        "7526": 143,
        "7527": 224,
        "7528": 74,
        "7529": 91,
        "7530": 175,
        "7531": 159,
        "7532": 254,
        "7533": 81,
        "7534": 81,
        "7535": 141,
        "7536": 46,
        "7537": 90,
        "7538": 141,
        "7539": 18,
        "7540": 149,
        "7541": 2,
        "7542": 215,
        "7543": 7,
        "7544": 60,
        "7545": 50,
        "7546": 83,
        "7547": 188,
        "7548": 248,
        "7549": 152,
        "7550": 143,
        "7551": 69,
        "7552": 55,
        "7553": 121,
        "7554": 34,
        "7555": 197,
        "7556": 250,
        "7557": 133,
        "7558": 25,
        "7559": 77,
        "7560": 2,
        "7561": 247,
        "7562": 101,
        "7563": 15,
        "7564": 30,
        "7565": 77,
        "7566": 56,
        "7567": 110,
        "7568": 148,
        "7569": 143,
        "7570": 75,
        "7571": 149,
        "7572": 91,
        "7573": 4,
        "7574": 12,
        "7575": 161,
        "7576": 33,
        "7577": 27,
        "7578": 37,
        "7579": 108,
        "7580": 71,
        "7581": 245,
        "7582": 213,
        "7583": 56,
        "7584": 18,
        "7585": 216,
        "7586": 13,
        "7587": 2,
        "7588": 1,
        "7589": 111,
        "7590": 127,
        "7591": 202,
        "7592": 128,
        "7593": 238,
        "7594": 245,
        "7595": 87,
        "7596": 128,
        "7597": 129,
        "7598": 100,
        "7599": 239,
        "7600": 234,
        "7601": 114,
        "7602": 198,
        "7603": 198,
        "7604": 4,
        "7605": 188,
        "7606": 40,
        "7607": 19,
        "7608": 169,
        "7609": 3,
        "7610": 124,
        "7611": 242,
        "7612": 132,
        "7613": 74,
        "7614": 45,
        "7615": 52,
        "7616": 90,
        "7617": 133,
        "7618": 52,
        "7619": 8,
        "7620": 142,
        "7621": 134,
        "7622": 203,
        "7623": 106,
        "7624": 154,
        "7625": 174,
        "7626": 170,
        "7627": 14,
        "7628": 165,
        "7629": 97,
        "7630": 91,
        "7631": 112,
        "7632": 72,
        "7633": 232,
        "7634": 224,
        "7635": 105,
        "7636": 93,
        "7637": 93,
        "7638": 50,
        "7639": 176,
        "7640": 103,
        "7641": 126,
        "7642": 255,
        "7643": 97,
        "7644": 193,
        "7645": 151,
        "7646": 72,
        "7647": 233,
        "7648": 116,
        "7649": 171,
        "7650": 217,
        "7651": 182,
        "7652": 123,
        "7653": 204,
        "7654": 27,
        "7655": 70,
        "7656": 6,
        "7657": 252,
        "7658": 118,
        "7659": 21,
        "7660": 25,
        "7661": 111,
        "7662": 171,
        "7663": 30,
        "7664": 23,
        "7665": 161,
        "7666": 114,
        "7667": 107,
        "7668": 250,
        "7669": 193,
        "7670": 138,
        "7671": 144,
        "7672": 185,
        "7673": 98,
        "7674": 39,
        "7675": 157,
        "7676": 132,
        "7677": 20,
        "7678": 45,
        "7679": 57,
        "7680": 65,
        "7681": 240,
        "7682": 66,
        "7683": 245,
        "7684": 88,
        "7685": 205,
        "7686": 71,
        "7687": 48,
        "7688": 0,
        "7689": 51,
        "7690": 183,
        "7691": 16,
        "7692": 76,
        "7693": 246,
        "7694": 221,
        "7695": 145,
        "7696": 18,
        "7697": 252,
        "7698": 84,
        "7699": 182,
        "7700": 75,
        "7701": 172,
        "7702": 37,
        "7703": 53,
        "7704": 133,
        "7705": 163,
        "7706": 34,
        "7707": 168,
        "7708": 83,
        "7709": 43,
        "7710": 12,
        "7711": 125,
        "7712": 241,
        "7713": 127,
        "7714": 133,
        "7715": 193,
        "7716": 231,
        "7717": 82,
        "7718": 0,
        "7719": 225,
        "7720": 239,
        "7721": 150,
        "7722": 54,
        "7723": 170,
        "7724": 90,
        "7725": 190,
        "7726": 91,
        "7727": 227,
        "7728": 92,
        "7729": 19,
        "7730": 203,
        "7731": 127,
        "7732": 172,
        "7733": 171,
        "7734": 101,
        "7735": 231,
        "7736": 135,
        "7737": 250,
        "7738": 116,
        "7739": 70,
        "7740": 231,
        "7741": 36,
        "7742": 85,
        "7743": 216,
        "7744": 188,
        "7745": 252,
        "7746": 221,
        "7747": 83,
        "7748": 164,
        "7749": 109,
        "7750": 61,
        "7751": 230,
        "7752": 132,
        "7753": 0,
        "7754": 185,
        "7755": 171,
        "7756": 16,
        "7757": 82,
        "7758": 172,
        "7759": 193,
        "7760": 97,
        "7761": 139,
        "7762": 106,
        "7763": 236,
        "7764": 135,
        "7765": 246,
        "7766": 251,
        "7767": 120,
        "7768": 242,
        "7769": 120,
        "7770": 105,
        "7771": 95,
        "7772": 113,
        "7773": 228,
        "7774": 202,
        "7775": 101,
        "7776": 98,
        "7777": 76,
        "7778": 193,
        "7779": 201,
        "7780": 86,
        "7781": 13,
        "7782": 85,
        "7783": 56,
        "7784": 107,
        "7785": 130,
        "7786": 9,
        "7787": 22,
        "7788": 83,
        "7789": 93,
        "7790": 41,
        "7791": 92,
        "7792": 154,
        "7793": 101,
        "7794": 24,
        "7795": 125,
        "7796": 180,
        "7797": 223,
        "7798": 34,
        "7799": 239,
        "7800": 167,
        "7801": 114,
        "7802": 53,
        "7803": 73,
        "7804": 69,
        "7805": 21,
        "7806": 11,
        "7807": 99,
        "7808": 182,
        "7809": 135,
        "7810": 254,
        "7811": 86,
        "7812": 250,
        "7813": 196,
        "7814": 197,
        "7815": 184,
        "7816": 173,
        "7817": 52,
        "7818": 105,
        "7819": 30,
        "7820": 145,
        "7821": 82,
        "7822": 164,
        "7823": 231,
        "7824": 32,
        "7825": 102,
        "7826": 240,
        "7827": 138,
        "7828": 219,
        "7829": 189,
        "7830": 213,
        "7831": 159,
        "7832": 32,
        "7833": 162,
        "7834": 18,
        "7835": 189,
        "7836": 25,
        "7837": 75,
        "7838": 154,
        "7839": 18,
        "7840": 36,
        "7841": 61,
        "7842": 162,
        "7843": 165,
        "7844": 221,
        "7845": 73,
        "7846": 200,
        "7847": 45,
        "7848": 147,
        "7849": 200,
        "7850": 71,
        "7851": 254,
        "7852": 200,
        "7853": 91,
        "7854": 71,
        "7855": 226,
        "7856": 10,
        "7857": 34,
        "7858": 150,
        "7859": 15,
        "7860": 220,
        "7861": 248,
        "7862": 119,
        "7863": 169,
        "7864": 171,
        "7865": 202,
        "7866": 186,
        "7867": 167,
        "7868": 212,
        "7869": 213,
        "7870": 220,
        "7871": 98,
        "7872": 94,
        "7873": 76,
        "7874": 80,
        "7875": 40,
        "7876": 90,
        "7877": 234,
        "7878": 240,
        "7879": 251,
        "7880": 98,
        "7881": 215,
        "7882": 96,
        "7883": 90,
        "7884": 243,
        "7885": 11,
        "7886": 2,
        "7887": 76,
        "7888": 10,
        "7889": 107,
        "7890": 86,
        "7891": 65,
        "7892": 161,
        "7893": 49,
        "7894": 0,
        "7895": 138,
        "7896": 59,
        "7897": 87,
        "7898": 181,
        "7899": 29,
        "7900": 94,
        "7901": 233,
        "7902": 88,
        "7903": 94,
        "7904": 207,
        "7905": 209,
        "7906": 177,
        "7907": 25,
        "7908": 255,
        "7909": 226,
        "7910": 51,
        "7911": 7,
        "7912": 170,
        "7913": 250,
        "7914": 30,
        "7915": 210,
        "7916": 111,
        "7917": 157,
        "7918": 252,
        "7919": 103,
        "7920": 205,
        "7921": 170,
        "7922": 182,
        "7923": 166,
        "7924": 114,
        "7925": 11,
        "7926": 56,
        "7927": 131,
        "7928": 230,
        "7929": 44,
        "7930": 183,
        "7931": 184,
        "7932": 210,
        "7933": 138,
        "7934": 218,
        "7935": 225,
        "7936": 198,
        "7937": 165,
        "7938": 14,
        "7939": 125,
        "7940": 124,
        "7941": 157,
        "7942": 62,
        "7943": 255,
        "7944": 8,
        "7945": 63,
        "7946": 157,
        "7947": 255,
        "7948": 231,
        "7949": 142,
        "7950": 62,
        "7951": 87,
        "7952": 231,
        "7953": 11,
        "7954": 12,
        "7955": 177,
        "7956": 223,
        "7957": 206,
        "7958": 180,
        "7959": 86,
        "7960": 244,
        "7961": 116,
        "7962": 112,
        "7963": 218,
        "7964": 100,
        "7965": 46,
        "7966": 155,
        "7967": 58,
        "7968": 81,
        "7969": 157,
        "7970": 176,
        "7971": 218,
        "7972": 6,
        "7973": 148,
        "7974": 1,
        "7975": 36,
        "7976": 164,
        "7977": 83,
        "7978": 224,
        "7979": 161,
        "7980": 94,
        "7981": 150,
        "7982": 227,
        "7983": 94,
        "7984": 244,
        "7985": 116,
        "7986": 84,
        "7987": 157,
        "7988": 246,
        "7989": 49,
        "7990": 83,
        "7991": 180,
        "7992": 3,
        "7993": 242,
        "7994": 240,
        "7995": 81,
        "7996": 49,
        "7997": 93,
        "7998": 34,
        "7999": 127,
        "8000": 247,
        "8001": 36,
        "8002": 96,
        "8003": 253,
        "8004": 56,
        "8005": 184,
        "8006": 191,
        "8007": 173,
        "8008": 180,
        "8009": 211,
        "8010": 32,
        "8011": 131,
        "8012": 133,
        "8013": 159,
        "8014": 135,
        "8015": 223,
        "8016": 146,
        "8017": 183,
        "8018": 160,
        "8019": 61,
        "8020": 157,
        "8021": 121,
        "8022": 102,
        "8023": 159,
        "8024": 105,
        "8025": 105,
        "8026": 123,
        "8027": 104,
        "8028": 186,
        "8029": 252,
        "8030": 168,
        "8031": 207,
        "8032": 173,
        "8033": 177,
        "8034": 165,
        "8035": 9,
        "8036": 170,
        "8037": 38,
        "8038": 61,
        "8039": 12,
        "8040": 137,
        "8041": 65,
        "8042": 157,
        "8043": 230,
        "8044": 33,
        "8045": 114,
        "8046": 9,
        "8047": 132,
        "8048": 213,
        "8049": 89,
        "8050": 157,
        "8051": 154,
        "8052": 241,
        "8053": 52,
        "8054": 37,
        "8055": 56,
        "8056": 103,
        "8057": 41,
        "8058": 46,
        "8059": 85,
        "8060": 175,
        "8061": 45,
        "8062": 37,
        "8063": 108,
        "8064": 109,
        "8065": 46,
        "8066": 84,
        "8067": 231,
        "8068": 115,
        "8069": 58,
        "8070": 16,
        "8071": 155,
        "8072": 79,
        "8073": 40,
        "8074": 52,
        "8075": 220,
        "8076": 190,
        "8077": 240,
        "8078": 117,
        "8079": 210,
        "8080": 49,
        "8081": 154,
        "8082": 236,
        "8083": 177,
        "8084": 24,
        "8085": 243,
        "8086": 79,
        "8087": 209,
        "8088": 86,
        "8089": 159,
        "8090": 82,
        "8091": 247,
        "8092": 47,
        "8093": 85,
        "8094": 132,
        "8095": 88,
        "8096": 25,
        "8097": 211,
        "8098": 111,
        "8099": 126,
        "8100": 159,
        "8101": 39,
        "8102": 9,
        "8103": 241,
        "8104": 38,
        "8105": 185,
        "8106": 181,
        "8107": 70,
        "8108": 177,
        "8109": 177,
        "8110": 56,
        "8111": 146,
        "8112": 184,
        "8113": 157,
        "8114": 150,
        "8115": 5,
        "8116": 253,
        "8117": 26,
        "8118": 18,
        "8119": 25,
        "8120": 93,
        "8121": 8,
        "8122": 5,
        "8123": 137,
        "8124": 66,
        "8125": 107,
        "8126": 14,
        "8127": 129,
        "8128": 86,
        "8129": 166,
        "8130": 74,
        "8131": 160,
        "8132": 162,
        "8133": 180,
        "8134": 226,
        "8135": 62,
        "8136": 131,
        "8137": 148,
        "8138": 63,
        "8139": 178,
        "8140": 203,
        "8141": 206,
        "8142": 66,
        "8143": 96,
        "8144": 200,
        "8145": 244,
        "8146": 214,
        "8147": 146,
        "8148": 138,
        "8149": 184,
        "8150": 17,
        "8151": 242,
        "8152": 12,
        "8153": 136,
        "8154": 251,
        "8155": 63,
        "8156": 223,
        "8157": 141,
        "8158": 189,
        "8159": 32,
        "8160": 79,
        "8161": 149,
        "8162": 65,
        "8163": 56,
        "8164": 126,
        "8165": 238,
        "8166": 56,
        "8167": 120,
        "8168": 45,
        "8169": 123,
        "8170": 200,
        "8171": 249,
        "8172": 12,
        "8173": 253,
        "8174": 57,
        "8175": 231,
        "8176": 240,
        "8177": 76,
        "8178": 59,
        "8179": 220,
        "8180": 156,
        "8181": 46,
        "8182": 156,
        "8183": 73,
        "8184": 12,
        "8185": 146,
        "8186": 225,
        "8187": 119,
        "8188": 231,
        "8189": 203,
        "8190": 66,
        "8191": 33,
        "8192": 152,
        "8193": 168,
        "8194": 195,
        "8195": 42,
        "8196": 183,
        "8197": 90,
        "8198": 31,
        "8199": 244,
        "8200": 191,
        "8201": 164,
        "8202": 57,
        "8203": 143,
        "8204": 173,
        "8205": 60,
        "8206": 29,
        "8207": 87,
        "8208": 11,
        "8209": 118,
        "8210": 250,
        "8211": 72,
        "8212": 246,
        "8213": 93,
        "8214": 67,
        "8215": 200,
        "8216": 3,
        "8217": 246,
        "8218": 148,
        "8219": 63,
        "8220": 162,
        "8221": 156,
        "8222": 147,
        "8223": 98,
        "8224": 81,
        "8225": 190,
        "8226": 249,
        "8227": 234,
        "8228": 233,
        "8229": 193,
        "8230": 124,
        "8231": 191,
        "8232": 101,
        "8233": 152,
        "8234": 24,
        "8235": 97,
        "8236": 168,
        "8237": 153,
        "8238": 42,
        "8239": 235,
        "8240": 64,
        "8241": 42,
        "8242": 97,
        "8243": 154,
        "8244": 148,
        "8245": 35,
        "8246": 7,
        "8247": 148,
        "8248": 193,
        "8249": 35,
        "8250": 172,
        "8251": 11,
        "8252": 202,
        "8253": 118,
        "8254": 208,
        "8255": 206,
        "8256": 27,
        "8257": 105,
        "8258": 204,
        "8259": 244,
        "8260": 136,
        "8261": 66,
        "8262": 23,
        "8263": 173,
        "8264": 159,
        "8265": 159,
        "8266": 58,
        "8267": 127,
        "8268": 238,
        "8269": 78,
        "8270": 30,
        "8271": 67,
        "8272": 109,
        "8273": 138,
        "8274": 197,
        "8275": 214,
        "8276": 231,
        "8277": 232,
        "8278": 214,
        "8279": 101,
        "8280": 162,
        "8281": 219,
        "8282": 223,
        "8283": 251,
        "8284": 86,
        "8285": 81,
        "8286": 117,
        "8287": 88,
        "8288": 84,
        "8289": 24,
        "8290": 27,
        "8291": 15,
        "8292": 253,
        "8293": 130,
        "8294": 138,
        "8295": 196,
        "8296": 172,
        "8297": 251,
        "8298": 251,
        "8299": 248,
        "8300": 224,
        "8301": 181,
        "8302": 49,
        "8303": 60,
        "8304": 171,
        "8305": 19,
        "8306": 133,
        "8307": 61,
        "8308": 208,
        "8309": 70,
        "8310": 250,
        "8311": 248,
        "8312": 212,
        "8313": 215,
        "8314": 63,
        "8315": 86,
        "8316": 83,
        "8317": 105,
        "8318": 143,
        "8319": 239,
        "8320": 122,
        "8321": 93,
        "8322": 132,
        "8323": 184,
        "8324": 112,
        "8325": 81,
        "8326": 217,
        "8327": 29,
        "8328": 140,
        "8329": 129,
        "8330": 26,
        "8331": 31,
        "8332": 16,
        "8333": 241,
        "8334": 131,
        "8335": 131,
        "8336": 49,
        "8337": 107,
        "8338": 127,
        "8339": 21,
        "8340": 166,
        "8341": 174,
        "8342": 77,
        "8343": 154,
        "8344": 205,
        "8345": 21,
        "8346": 202,
        "8347": 70,
        "8348": 22,
        "8349": 20,
        "8350": 218,
        "8351": 89,
        "8352": 157,
        "8353": 234,
        "8354": 87,
        "8355": 212,
        "8356": 219,
        "8357": 188,
        "8358": 123,
        "8359": 156,
        "8360": 93,
        "8361": 255,
        "8362": 189,
        "8363": 84,
        "8364": 244,
        "8365": 83,
        "8366": 237,
        "8367": 89,
        "8368": 141,
        "8369": 49,
        "8370": 231,
        "8371": 81,
        "8372": 119,
        "8373": 102,
        "8374": 30,
        "8375": 235,
        "8376": 254,
        "8377": 51,
        "8378": 69,
        "8379": 254,
        "8380": 174,
        "8381": 75,
        "8382": 5,
        "8383": 137,
        "8384": 119,
        "8385": 35,
        "8386": 36,
        "8387": 239,
        "8388": 93,
        "8389": 9,
        "8390": 78,
        "8391": 20,
        "8392": 72,
        "8393": 225,
        "8394": 114,
        "8395": 41,
        "8396": 233,
        "8397": 86,
        "8398": 52,
        "8399": 58,
        "8400": 44,
        "8401": 12,
        "8402": 0,
        "8403": 83,
        "8404": 94,
        "8405": 249,
        "8406": 149,
        "8407": 159,
        "8408": 100,
        "8409": 2,
        "8410": 163,
        "8411": 133,
        "8412": 31,
        "8413": 95,
        "8414": 31,
        "8415": 250,
        "8416": 247,
        "8417": 232,
        "8418": 245,
        "8419": 106,
        "8420": 51,
        "8421": 241,
        "8422": 204,
        "8423": 192,
        "8424": 152,
        "8425": 48,
        "8426": 88,
        "8427": 108,
        "8428": 205,
        "8429": 86,
        "8430": 181,
        "8431": 150,
        "8432": 47,
        "8433": 224,
        "8434": 152,
        "8435": 139,
        "8436": 202,
        "8437": 243,
        "8438": 48,
        "8439": 126,
        "8440": 16,
        "8441": 94,
        "8442": 26,
        "8443": 66,
        "8444": 63,
        "8445": 89,
        "8446": 45,
        "8447": 226,
        "8448": 238,
        "8449": 210,
        "8450": 236,
        "8451": 224,
        "8452": 221,
        "8453": 173,
        "8454": 79,
        "8455": 111,
        "8456": 137,
        "8457": 220,
        "8458": 141,
        "8459": 2,
        "8460": 182,
        "8461": 65,
        "8462": 5,
        "8463": 38,
        "8464": 244,
        "8465": 0,
        "8466": 70,
        "8467": 16,
        "8468": 121,
        "8469": 140,
        "8470": 169,
        "8471": 248,
        "8472": 117,
        "8473": 149,
        "8474": 161,
        "8475": 143,
        "8476": 115,
        "8477": 19,
        "8478": 18,
        "8479": 33,
        "8480": 196,
        "8481": 223,
        "8482": 177,
        "8483": 61,
        "8484": 180,
        "8485": 229,
        "8486": 250,
        "8487": 104,
        "8488": 76,
        "8489": 172,
        "8490": 98,
        "8491": 109,
        "8492": 116,
        "8493": 168,
        "8494": 187,
        "8495": 188,
        "8496": 131,
        "8497": 106,
        "8498": 69,
        "8499": 51,
        "8500": 248,
        "8501": 219,
        "8502": 162,
        "8503": 49,
        "8504": 238,
        "8505": 207,
        "8506": 239,
        "8507": 13,
        "8508": 163,
        "8509": 159,
        "8510": 124,
        "8511": 34,
        "8512": 163,
        "8513": 208,
        "8514": 105,
        "8515": 130,
        "8516": 76,
        "8517": 248,
        "8518": 185,
        "8519": 59,
        "8520": 12,
        "8521": 180,
        "8522": 210,
        "8523": 169,
        "8524": 123,
        "8525": 51,
        "8526": 35,
        "8527": 86,
        "8528": 53,
        "8529": 139,
        "8530": 15,
        "8531": 229,
        "8532": 8,
        "8533": 236,
        "8534": 49,
        "8535": 161,
        "8536": 238,
        "8537": 147,
        "8538": 42,
        "8539": 87,
        "8540": 127,
        "8541": 252,
        "8542": 100,
        "8543": 97,
        "8544": 161,
        "8545": 88,
        "8546": 96,
        "8547": 11,
        "8548": 105,
        "8549": 213,
        "8550": 20,
        "8551": 230,
        "8552": 88,
        "8553": 16,
        "8554": 234,
        "8555": 103,
        "8556": 13,
        "8557": 111,
        "8558": 27,
        "8559": 86,
        "8560": 43,
        "8561": 57,
        "8562": 92,
        "8563": 51,
        "8564": 31,
        "8565": 197,
        "8566": 67,
        "8567": 242,
        "8568": 173,
        "8569": 12,
        "8570": 185,
        "8571": 202,
        "8572": 91,
        "8573": 68,
        "8574": 180,
        "8575": 152,
        "8576": 135,
        "8577": 223,
        "8578": 76,
        "8579": 173,
        "8580": 209,
        "8581": 187,
        "8582": 62,
        "8583": 123,
        "8584": 110,
        "8585": 12,
        "8586": 46,
        "8587": 123,
        "8588": 131,
        "8589": 56,
        "8590": 183,
        "8591": 217,
        "8592": 214,
        "8593": 152,
        "8594": 59,
        "8595": 47,
        "8596": 84,
        "8597": 146,
        "8598": 187,
        "8599": 236,
        "8600": 228,
        "8601": 94,
        "8602": 228,
        "8603": 41,
        "8604": 166,
        "8605": 99,
        "8606": 242,
        "8607": 252,
        "8608": 221,
        "8609": 17,
        "8610": 40,
        "8611": 146,
        "8612": 80,
        "8613": 183,
        "8614": 118,
        "8615": 64,
        "8616": 75,
        "8617": 217,
        "8618": 8,
        "8619": 217,
        "8620": 115,
        "8621": 23,
        "8622": 204,
        "8623": 250,
        "8624": 128,
        "8625": 23,
        "8626": 112,
        "8627": 231,
        "8628": 129,
        "8629": 165,
        "8630": 8,
        "8631": 96,
        "8632": 112,
        "8633": 197,
        "8634": 64,
        "8635": 164,
        "8636": 113,
        "8637": 77,
        "8638": 96,
        "8639": 105,
        "8640": 102,
        "8641": 230,
        "8642": 139,
        "8643": 95,
        "8644": 110,
        "8645": 145,
        "8646": 213,
        "8647": 185,
        "8648": 28,
        "8649": 92,
        "8650": 55,
        "8651": 216,
        "8652": 201,
        "8653": 59,
        "8654": 127,
        "8655": 236,
        "8656": 250,
        "8657": 77,
        "8658": 237,
        "8659": 182,
        "8660": 225,
        "8661": 161,
        "8662": 63,
        "8663": 133,
        "8664": 255,
        "8665": 222,
        "8666": 152,
        "8667": 14,
        "8668": 180,
        "8669": 128,
        "8670": 221,
        "8671": 177,
        "8672": 155,
        "8673": 228,
        "8674": 94,
        "8675": 20,
        "8676": 101,
        "8677": 253,
        "8678": 170,
        "8679": 154,
        "8680": 141,
        "8681": 123,
        "8682": 245,
        "8683": 21,
        "8684": 164,
        "8685": 68,
        "8686": 223,
        "8687": 245,
        "8688": 174,
        "8689": 228,
        "8690": 8,
        "8691": 115,
        "8692": 10,
        "8693": 90,
        "8694": 187,
        "8695": 232,
        "8696": 38,
        "8697": 159,
        "8698": 75,
        "8699": 237,
        "8700": 190,
        "8701": 215,
        "8702": 210,
        "8703": 253,
        "8704": 98,
        "8705": 176,
        "8706": 12,
        "8707": 84,
        "8708": 2,
        "8709": 152,
        "8710": 189,
        "8711": 35,
        "8712": 193,
        "8713": 38,
        "8714": 207,
        "8715": 180,
        "8716": 229,
        "8717": 247,
        "8718": 53,
        "8719": 82,
        "8720": 125,
        "8721": 22,
        "8722": 58,
        "8723": 61,
        "8724": 7,
        "8725": 65,
        "8726": 89,
        "8727": 67,
        "8728": 23,
        "8729": 234,
        "8730": 201,
        "8731": 77,
        "8732": 39,
        "8733": 82,
        "8734": 113,
        "8735": 164,
        "8736": 3,
        "8737": 139,
        "8738": 37,
        "8739": 190,
        "8740": 17,
        "8741": 201,
        "8742": 29,
        "8743": 50,
        "8744": 145,
        "8745": 243,
        "8746": 135,
        "8747": 16,
        "8748": 188,
        "8749": 31,
        "8750": 106,
        "8751": 158,
        "8752": 35,
        "8753": 230,
        "8754": 34,
        "8755": 125,
        "8756": 15,
        "8757": 5,
        "8758": 214,
        "8759": 243,
        "8760": 176,
        "8761": 105,
        "8762": 249,
        "8763": 187,
        "8764": 97,
        "8765": 40,
        "8766": 234,
        "8767": 218,
        "8768": 134,
        "8769": 227,
        "8770": 25,
        "8771": 232,
        "8772": 30,
        "8773": 105,
        "8774": 243,
        "8775": 142,
        "8776": 5,
        "8777": 119,
        "8778": 156,
        "8779": 108,
        "8780": 45,
        "8781": 198,
        "8782": 212,
        "8783": 78,
        "8784": 76,
        "8785": 98,
        "8786": 68,
        "8787": 7,
        "8788": 171,
        "8789": 218,
        "8790": 82,
        "8791": 219,
        "8792": 69,
        "8793": 129,
        "8794": 213,
        "8795": 122,
        "8796": 66,
        "8797": 185,
        "8798": 190,
        "8799": 52,
        "8800": 121,
        "8801": 167,
        "8802": 140,
        "8803": 27,
        "8804": 91,
        "8805": 207,
        "8806": 15,
        "8807": 159,
        "8808": 236,
        "8809": 197,
        "8810": 127,
        "8811": 217,
        "8812": 250,
        "8813": 240,
        "8814": 192,
        "8815": 64,
        "8816": 99,
        "8817": 145,
        "8818": 109,
        "8819": 22,
        "8820": 99,
        "8821": 151,
        "8822": 121,
        "8823": 98,
        "8824": 193,
        "8825": 122,
        "8826": 53,
        "8827": 241,
        "8828": 134,
        "8829": 130,
        "8830": 107,
        "8831": 246,
        "8832": 160,
        "8833": 230,
        "8834": 188,
        "8835": 35,
        "8836": 26,
        "8837": 218,
        "8838": 219,
        "8839": 150,
        "8840": 100,
        "8841": 101,
        "8842": 53,
        "8843": 25,
        "8844": 125,
        "8845": 141,
        "8846": 171,
        "8847": 100,
        "8848": 152,
        "8849": 218,
        "8850": 70,
        "8851": 111,
        "8852": 243,
        "8853": 225,
        "8854": 25,
        "8855": 161,
        "8856": 250,
        "8857": 0,
        "8858": 109,
        "8859": 203,
        "8860": 186,
        "8861": 138,
        "8862": 157,
        "8863": 87,
        "8864": 183,
        "8865": 175,
        "8866": 200,
        "8867": 216,
        "8868": 92,
        "8869": 74,
        "8870": 45,
        "8871": 39,
        "8872": 154,
        "8873": 41,
        "8874": 110,
        "8875": 213,
        "8876": 224,
        "8877": 67,
        "8878": 76,
        "8879": 211,
        "8880": 183,
        "8881": 37,
        "8882": 81,
        "8883": 54,
        "8884": 247,
        "8885": 95,
        "8886": 105,
        "8887": 165,
        "8888": 228,
        "8889": 154,
        "8890": 23,
        "8891": 198,
        "8892": 236,
        "8893": 65,
        "8894": 201,
        "8895": 16,
        "8896": 54,
        "8897": 131,
        "8898": 164,
        "8899": 188,
        "8900": 2,
        "8901": 215,
        "8902": 123,
        "8903": 188,
        "8904": 228,
        "8905": 224,
        "8906": 81,
        "8907": 250,
        "8908": 75,
        "8909": 12,
        "8910": 38,
        "8911": 96,
        "8912": 80,
        "8913": 23,
        "8914": 8,
        "8915": 202,
        "8916": 215,
        "8917": 131,
        "8918": 100,
        "8919": 119,
        "8920": 67,
        "8921": 157,
        "8922": 189,
        "8923": 67,
        "8924": 138,
        "8925": 53,
        "8926": 223,
        "8927": 77,
        "8928": 254,
        "8929": 2,
        "8930": 96,
        "8931": 13,
        "8932": 88,
        "8933": 212,
        "8934": 218,
        "8935": 129,
        "8936": 163,
        "8937": 45,
        "8938": 197,
        "8939": 252,
        "8940": 118,
        "8941": 187,
        "8942": 240,
        "8943": 236,
        "8944": 136,
        "8945": 205,
        "8946": 242,
        "8947": 40,
        "8948": 21,
        "8949": 140,
        "8950": 240,
        "8951": 122,
        "8952": 73,
        "8953": 186,
        "8954": 243,
        "8955": 177,
        "8956": 252,
        "8957": 58,
        "8958": 49,
        "8959": 91,
        "8960": 148,
        "8961": 249,
        "8962": 152,
        "8963": 143,
        "8964": 128,
        "8965": 138,
        "8966": 70,
        "8967": 4,
        "8968": 58,
        "8969": 100,
        "8970": 175,
        "8971": 169,
        "8972": 158,
        "8973": 186,
        "8974": 88,
        "8975": 197,
        "8976": 93,
        "8977": 194,
        "8978": 177,
        "8979": 115,
        "8980": 191,
        "8981": 176,
        "8982": 8,
        "8983": 50,
        "8984": 127,
        "8985": 43,
        "8986": 166,
        "8987": 77,
        "8988": 153,
        "8989": 216,
        "8990": 70,
        "8991": 69,
        "8992": 239,
        "8993": 208,
        "8994": 88,
        "8995": 77,
        "8996": 195,
        "8997": 245,
        "8998": 163,
        "8999": 159,
        "9000": 227,
        "9001": 239,
        "9002": 62,
        "9003": 5,
        "9004": 221,
        "9005": 215,
        "9006": 77,
        "9007": 7,
        "9008": 79,
        "9009": 133,
        "9010": 24,
        "9011": 184,
        "9012": 59,
        "9013": 142,
        "9014": 67,
        "9015": 18,
        "9016": 139,
        "9017": 25,
        "9018": 235,
        "9019": 58,
        "9020": 219,
        "9021": 75,
        "9022": 210,
        "9023": 223,
        "9024": 157,
        "9025": 167,
        "9026": 175,
        "9027": 68,
        "9028": 165,
        "9029": 18,
        "9030": 233,
        "9031": 169,
        "9032": 9,
        "9033": 167,
        "9034": 208,
        "9035": 155,
        "9036": 238,
        "9037": 131,
        "9038": 55,
        "9039": 204,
        "9040": 114,
        "9041": 37,
        "9042": 46,
        "9043": 174,
        "9044": 180,
        "9045": 128,
        "9046": 21,
        "9047": 33,
        "9048": 143,
        "9049": 62,
        "9050": 163,
        "9051": 133,
        "9052": 49,
        "9053": 119,
        "9054": 63,
        "9055": 204,
        "9056": 77,
        "9057": 192,
        "9058": 83,
        "9059": 234,
        "9060": 78,
        "9061": 15,
        "9062": 43,
        "9063": 115,
        "9064": 80,
        "9065": 218,
        "9066": 191,
        "9067": 205,
        "9068": 110,
        "9069": 186,
        "9070": 203,
        "9071": 228,
        "9072": 4,
        "9073": 68,
        "9074": 146,
        "9075": 209,
        "9076": 96,
        "9077": 206,
        "9078": 53,
        "9079": 137,
        "9080": 197,
        "9081": 207,
        "9082": 88,
        "9083": 55,
        "9084": 219,
        "9085": 84,
        "9086": 190,
        "9087": 159,
        "9088": 143,
        "9089": 229,
        "9090": 255,
        "9091": 41,
        "9092": 63,
        "9093": 25,
        "9094": 207,
        "9095": 189,
        "9096": 147,
        "9097": 43,
        "9098": 100,
        "9099": 13,
        "9100": 45,
        "9101": 145,
        "9102": 168,
        "9103": 58,
        "9104": 61,
        "9105": 105,
        "9106": 230,
        "9107": 39,
        "9108": 163,
        "9109": 162,
        "9110": 214,
        "9111": 71,
        "9112": 80,
        "9113": 185,
        "9114": 176,
        "9115": 242,
        "9116": 166,
        "9117": 16,
        "9118": 80,
        "9119": 196,
        "9120": 164,
        "9121": 233,
        "9122": 124,
        "9123": 170,
        "9124": 204,
        "9125": 44,
        "9126": 253,
        "9127": 196,
        "9128": 187,
        "9129": 43,
        "9130": 46,
        "9131": 115,
        "9132": 119,
        "9133": 40,
        "9134": 156,
        "9135": 173,
        "9136": 83,
        "9137": 26,
        "9138": 26,
        "9139": 176,
        "9140": 176,
        "9141": 12,
        "9142": 227,
        "9143": 244,
        "9144": 120,
        "9145": 219,
        "9146": 241,
        "9147": 94,
        "9148": 253,
        "9149": 110,
        "9150": 145,
        "9151": 152,
        "9152": 95,
        "9153": 30,
        "9154": 120,
        "9155": 115,
        "9156": 158,
        "9157": 41,
        "9158": 17,
        "9159": 181,
        "9160": 14,
        "9161": 202,
        "9162": 149,
        "9163": 94,
        "9164": 175,
        "9165": 168,
        "9166": 97,
        "9167": 10,
        "9168": 176,
        "9169": 107,
        "9170": 56,
        "9171": 92,
        "9172": 89,
        "9173": 102,
        "9174": 180,
        "9175": 202,
        "9176": 161,
        "9177": 182,
        "9178": 10,
        "9179": 9,
        "9180": 109,
        "9181": 63,
        "9182": 38,
        "9183": 230,
        "9184": 252,
        "9185": 223,
        "9186": 132,
        "9187": 49,
        "9188": 45,
        "9189": 118,
        "9190": 19,
        "9191": 193,
        "9192": 79,
        "9193": 43,
        "9194": 229,
        "9195": 145,
        "9196": 62,
        "9197": 84,
        "9198": 217,
        "9199": 146,
        "9200": 178,
        "9201": 58,
        "9202": 172,
        "9203": 39,
        "9204": 34,
        "9205": 221,
        "9206": 164,
        "9207": 105,
        "9208": 181,
        "9209": 86,
        "9210": 242,
        "9211": 246,
        "9212": 12,
        "9213": 227,
        "9214": 139,
        "9215": 117,
        "9216": 97,
        "9217": 112,
        "9218": 111,
        "9219": 104,
        "9220": 38,
        "9221": 198,
        "9222": 150,
        "9223": 168,
        "9224": 32,
        "9225": 63,
        "9226": 81,
        "9227": 21,
        "9228": 225,
        "9229": 105,
        "9230": 220,
        "9231": 163,
        "9232": 205,
        "9233": 45,
        "9234": 235,
        "9235": 144,
        "9236": 210,
        "9237": 111,
        "9238": 82,
        "9239": 16,
        "9240": 140,
        "9241": 142,
        "9242": 212,
        "9243": 30,
        "9244": 74,
        "9245": 156,
        "9246": 62,
        "9247": 37,
        "9248": 200,
        "9249": 32,
        "9250": 155,
        "9251": 114,
        "9252": 26,
        "9253": 104,
        "9254": 26,
        "9255": 162,
        "9256": 86,
        "9257": 173,
        "9258": 137,
        "9259": 177,
        "9260": 225,
        "9261": 251,
        "9262": 145,
        "9263": 77,
        "9264": 196,
        "9265": 22,
        "9266": 134,
        "9267": 179,
        "9268": 22,
        "9269": 26,
        "9270": 175,
        "9271": 210,
        "9272": 79,
        "9273": 203,
        "9274": 241,
        "9275": 160,
        "9276": 92,
        "9277": 252,
        "9278": 238,
        "9279": 138,
        "9280": 101,
        "9281": 84,
        "9282": 2,
        "9283": 253,
        "9284": 159,
        "9285": 10,
        "9286": 23,
        "9287": 137,
        "9288": 110,
        "9289": 225,
        "9290": 222,
        "9291": 4,
        "9292": 133,
        "9293": 32,
        "9294": 86,
        "9295": 64,
        "9296": 70,
        "9297": 58,
        "9298": 219,
        "9299": 108,
        "9300": 202,
        "9301": 49,
        "9302": 40,
        "9303": 180,
        "9304": 6,
        "9305": 130,
        "9306": 94,
        "9307": 174,
        "9308": 154,
        "9309": 6,
        "9310": 127,
        "9311": 230,
        "9312": 233,
        "9313": 151,
        "9314": 80,
        "9315": 37,
        "9316": 234,
        "9317": 125,
        "9318": 192,
        "9319": 83,
        "9320": 155,
        "9321": 126,
        "9322": 251,
        "9323": 124,
        "9324": 231,
        "9325": 23,
        "9326": 152,
        "9327": 81,
        "9328": 69,
        "9329": 202,
        "9330": 113,
        "9331": 46,
        "9332": 11,
        "9333": 92,
        "9334": 210,
        "9335": 157,
        "9336": 189,
        "9337": 177,
        "9338": 62,
        "9339": 70,
        "9340": 30,
        "9341": 64,
        "9342": 47,
        "9343": 43,
        "9344": 92,
        "9345": 61,
        "9346": 249,
        "9347": 182,
        "9348": 0,
        "9349": 111,
        "9350": 111,
        "9351": 114,
        "9352": 127,
        "9353": 214,
        "9354": 74,
        "9355": 176,
        "9356": 69,
        "9357": 165,
        "9358": 43,
        "9359": 14,
        "9360": 195,
        "9361": 209,
        "9362": 46,
        "9363": 0,
        "9364": 67,
        "9365": 227,
        "9366": 206,
        "9367": 197,
        "9368": 94,
        "9369": 244,
        "9370": 215,
        "9371": 33,
        "9372": 253,
        "9373": 66,
        "9374": 133,
        "9375": 27,
        "9376": 118,
        "9377": 32,
        "9378": 8,
        "9379": 84,
        "9380": 76,
        "9381": 157,
        "9382": 39,
        "9383": 212,
        "9384": 105,
        "9385": 56,
        "9386": 213,
        "9387": 244,
        "9388": 18,
        "9389": 41,
        "9390": 2,
        "9391": 249,
        "9392": 149,
        "9393": 252,
        "9394": 238,
        "9395": 98,
        "9396": 49,
        "9397": 244,
        "9398": 247,
        "9399": 26,
        "9400": 225,
        "9401": 92,
        "9402": 238,
        "9403": 18,
        "9404": 46,
        "9405": 24,
        "9406": 118,
        "9407": 250,
        "9408": 103,
        "9409": 106,
        "9410": 149,
        "9411": 150,
        "9412": 81,
        "9413": 111,
        "9414": 1,
        "9415": 203,
        "9416": 20,
        "9417": 91,
        "9418": 75,
        "9419": 219,
        "9420": 241,
        "9421": 122,
        "9422": 116,
        "9423": 165,
        "9424": 16,
        "9425": 122,
        "9426": 127,
        "9427": 173,
        "9428": 160,
        "9429": 254,
        "9430": 73,
        "9431": 132,
        "9432": 147,
        "9433": 35,
        "9434": 126,
        "9435": 92,
        "9436": 189,
        "9437": 130,
        "9438": 56,
        "9439": 170,
        "9440": 148,
        "9441": 228,
        "9442": 90,
        "9443": 159,
        "9444": 32,
        "9445": 17,
        "9446": 234,
        "9447": 42,
        "9448": 2,
        "9449": 127,
        "9450": 229,
        "9451": 192,
        "9452": 232,
        "9453": 191,
        "9454": 226,
        "9455": 164,
        "9456": 228,
        "9457": 213,
        "9458": 139,
        "9459": 211,
        "9460": 10,
        "9461": 37,
        "9462": 194,
        "9463": 0,
        "9464": 247,
        "9465": 41,
        "9466": 137,
        "9467": 168,
        "9468": 185,
        "9469": 183,
        "9470": 82,
        "9471": 46,
        "9472": 71,
        "9473": 135,
        "9474": 245,
        "9475": 172,
        "9476": 43,
        "9477": 236,
        "9478": 196,
        "9479": 129,
        "9480": 237,
        "9481": 68,
        "9482": 97,
        "9483": 254,
        "9484": 25,
        "9485": 70,
        "9486": 196,
        "9487": 73,
        "9488": 248,
        "9489": 48,
        "9490": 13,
        "9491": 91,
        "9492": 128,
        "9493": 248,
        "9494": 207,
        "9495": 137,
        "9496": 27,
        "9497": 61,
        "9498": 22,
        "9499": 175,
        "9500": 115,
        "9501": 150,
        "9502": 220,
        "9503": 115,
        "9504": 47,
        "9505": 70,
        "9506": 42,
        "9507": 196,
        "9508": 214,
        "9509": 223,
        "9510": 222,
        "9511": 72,
        "9512": 101,
        "9513": 162,
        "9514": 136,
        "9515": 152,
        "9516": 231,
        "9517": 38,
        "9518": 112,
        "9519": 78,
        "9520": 221,
        "9521": 3,
        "9522": 87,
        "9523": 152,
        "9524": 18,
        "9525": 250,
        "9526": 255,
        "9527": 176,
        "9528": 137,
        "9529": 64,
        "9530": 135,
        "9531": 237,
        "9532": 200,
        "9533": 132,
        "9534": 199,
        "9535": 230,
        "9536": 82,
        "9537": 106,
        "9538": 73,
        "9539": 78,
        "9540": 18,
        "9541": 1,
        "9542": 177,
        "9543": 184,
        "9544": 57,
        "9545": 178,
        "9546": 220,
        "9547": 50,
        "9548": 252,
        "9549": 149,
        "9550": 21,
        "9551": 197,
        "9552": 131,
        "9553": 252,
        "9554": 87,
        "9555": 67,
        "9556": 50,
        "9557": 31,
        "9558": 184,
        "9559": 251,
        "9560": 125,
        "9561": 157,
        "9562": 242,
        "9563": 59,
        "9564": 100,
        "9565": 153,
        "9566": 168,
        "9567": 117,
        "9568": 144,
        "9569": 14,
        "9570": 40,
        "9571": 98,
        "9572": 19,
        "9573": 77,
        "9574": 41,
        "9575": 104,
        "9576": 160,
        "9577": 232,
        "9578": 190,
        "9579": 46,
        "9580": 201,
        "9581": 22,
        "9582": 160,
        "9583": 31,
        "9584": 92,
        "9585": 109,
        "9586": 106,
        "9587": 105,
        "9588": 13,
        "9589": 24,
        "9590": 31,
        "9591": 193,
        "9592": 52,
        "9593": 34,
        "9594": 132,
        "9595": 70,
        "9596": 95,
        "9597": 23,
        "9598": 97,
        "9599": 66,
        "9600": 81,
        "9601": 69,
        "9602": 48,
        "9603": 221,
        "9604": 89,
        "9605": 33,
        "9606": 202,
        "9607": 30,
        "9608": 14,
        "9609": 128,
        "9610": 18,
        "9611": 223,
        "9612": 156,
        "9613": 114,
        "9614": 170,
        "9615": 5,
        "9616": 128,
        "9617": 9,
        "9618": 240,
        "9619": 231,
        "9620": 223,
        "9621": 42,
        "9622": 139,
        "9623": 85,
        "9624": 162,
        "9625": 148,
        "9626": 73,
        "9627": 199,
        "9628": 9,
        "9629": 154,
        "9630": 30,
        "9631": 0,
        "9632": 173,
        "9633": 237,
        "9634": 202,
        "9635": 170,
        "9636": 152,
        "9637": 241,
        "9638": 201,
        "9639": 113,
        "9640": 98,
        "9641": 239,
        "9642": 82,
        "9643": 5,
        "9644": 150,
        "9645": 79,
        "9646": 254,
        "9647": 156,
        "9648": 225,
        "9649": 131,
        "9650": 255,
        "9651": 6,
        "9652": 32,
        "9653": 202,
        "9654": 158,
        "9655": 10,
        "9656": 7,
        "9657": 6,
        "9658": 72,
        "9659": 68,
        "9660": 192,
        "9661": 106,
        "9662": 136,
        "9663": 94,
        "9664": 83,
        "9665": 174,
        "9666": 176,
        "9667": 213,
        "9668": 165,
        "9669": 156,
        "9670": 81,
        "9671": 94,
        "9672": 114,
        "9673": 50,
        "9674": 120,
        "9675": 166,
        "9676": 244,
        "9677": 178,
        "9678": 53,
        "9679": 188,
        "9680": 110,
        "9681": 42,
        "9682": 181,
        "9683": 255,
        "9684": 56,
        "9685": 18,
        "9686": 143,
        "9687": 221,
        "9688": 167,
        "9689": 91,
        "9690": 106,
        "9691": 160,
        "9692": 218,
        "9693": 31,
        "9694": 127,
        "9695": 77,
        "9696": 197,
        "9697": 101,
        "9698": 213,
        "9699": 98,
        "9700": 241,
        "9701": 125,
        "9702": 161,
        "9703": 198,
        "9704": 104,
        "9705": 66,
        "9706": 162,
        "9707": 35,
        "9708": 140,
        "9709": 32,
        "9710": 29,
        "9711": 96,
        "9712": 90,
        "9713": 52,
        "9714": 127,
        "9715": 142,
        "9716": 105,
        "9717": 98,
        "9718": 219,
        "9719": 198,
        "9720": 102,
        "9721": 154,
        "9722": 92,
        "9723": 137,
        "9724": 51,
        "9725": 5,
        "9726": 49,
        "9727": 105,
        "9728": 86,
        "9729": 213,
        "9730": 15,
        "9731": 205,
        "9732": 100,
        "9733": 177,
        "9734": 110,
        "9735": 18,
        "9736": 202,
        "9737": 138,
        "9738": 14,
        "9739": 11,
        "9740": 208,
        "9741": 135,
        "9742": 251,
        "9743": 118,
        "9744": 239,
        "9745": 208,
        "9746": 190,
        "9747": 37,
        "9748": 220,
        "9749": 143,
        "9750": 51,
        "9751": 180,
        "9752": 48,
        "9753": 150,
        "9754": 42,
        "9755": 189,
        "9756": 182,
        "9757": 238,
        "9758": 216,
        "9759": 71,
        "9760": 118,
        "9761": 42,
        "9762": 147,
        "9763": 224,
        "9764": 20,
        "9765": 222,
        "9766": 48,
        "9767": 101,
        "9768": 167,
        "9769": 222,
        "9770": 108,
        "9771": 5,
        "9772": 9,
        "9773": 13,
        "9774": 107,
        "9775": 163,
        "9776": 115,
        "9777": 43,
        "9778": 44,
        "9779": 102,
        "9780": 45,
        "9781": 231,
        "9782": 148,
        "9783": 55,
        "9784": 81,
        "9785": 197,
        "9786": 244,
        "9787": 13,
        "9788": 195,
        "9789": 117,
        "9790": 130,
        "9791": 221,
        "9792": 241,
        "9793": 241,
        "9794": 159,
        "9795": 145,
        "9796": 108,
        "9797": 120,
        "9798": 14,
        "9799": 3,
        "9800": 72,
        "9801": 247,
        "9802": 138,
        "9803": 32,
        "9804": 8,
        "9805": 144,
        "9806": 87,
        "9807": 188,
        "9808": 237,
        "9809": 104,
        "9810": 210,
        "9811": 179,
        "9812": 107,
        "9813": 243,
        "9814": 248,
        "9815": 87,
        "9816": 29,
        "9817": 190,
        "9818": 74,
        "9819": 89,
        "9820": 70,
        "9821": 247,
        "9822": 33,
        "9823": 89,
        "9824": 115,
        "9825": 37,
        "9826": 156,
        "9827": 25,
        "9828": 152,
        "9829": 13,
        "9830": 203,
        "9831": 151,
        "9832": 49,
        "9833": 235,
        "9834": 23,
        "9835": 107,
        "9836": 32,
        "9837": 138,
        "9838": 193,
        "9839": 254,
        "9840": 171,
        "9841": 39,
        "9842": 230,
        "9843": 122,
        "9844": 28,
        "9845": 168,
        "9846": 63,
        "9847": 201,
        "9848": 122,
        "9849": 68,
        "9850": 255,
        "9851": 174,
        "9852": 79,
        "9853": 24,
        "9854": 3,
        "9855": 232,
        "9856": 178,
        "9857": 36,
        "9858": 35,
        "9859": 228,
        "9860": 52,
        "9861": 233,
        "9862": 103,
        "9863": 140,
        "9864": 100,
        "9865": 87,
        "9866": 187,
        "9867": 150,
        "9868": 253,
        "9869": 105,
        "9870": 136,
        "9871": 206,
        "9872": 19,
        "9873": 58,
        "9874": 95,
        "9875": 70,
        "9876": 83,
        "9877": 110,
        "9878": 108,
        "9879": 206,
        "9880": 130,
        "9881": 81,
        "9882": 5,
        "9883": 248,
        "9884": 207,
        "9885": 71,
        "9886": 183,
        "9887": 221,
        "9888": 32,
        "9889": 18,
        "9890": 12,
        "9891": 202,
        "9892": 69,
        "9893": 166,
        "9894": 217,
        "9895": 116,
        "9896": 18,
        "9897": 151,
        "9898": 144,
        "9899": 6,
        "9900": 180,
        "9901": 149,
        "9902": 112,
        "9903": 146,
        "9904": 174,
        "9905": 100,
        "9906": 34,
        "9907": 208,
        "9908": 183,
        "9909": 19,
        "9910": 123,
        "9911": 11,
        "9912": 235,
        "9913": 206,
        "9914": 166,
        "9915": 179,
        "9916": 122,
        "9917": 213,
        "9918": 69,
        "9919": 240,
        "9920": 71,
        "9921": 45,
        "9922": 248,
        "9923": 253,
        "9924": 26,
        "9925": 231,
        "9926": 20,
        "9927": 177,
        "9928": 161,
        "9929": 69,
        "9930": 106,
        "9931": 252,
        "9932": 146,
        "9933": 167,
        "9934": 26,
        "9935": 95,
        "9936": 87,
        "9937": 211,
        "9938": 125,
        "9939": 157,
        "9940": 91,
        "9941": 232,
        "9942": 160,
        "9943": 228,
        "9944": 32,
        "9945": 245,
        "9946": 3,
        "9947": 96,
        "9948": 51,
        "9949": 70,
        "9950": 167,
        "9951": 36,
        "9952": 12,
        "9953": 115,
        "9954": 234,
        "9955": 215,
        "9956": 79,
        "9957": 12,
        "9958": 118,
        "9959": 69,
        "9960": 172,
        "9961": 4,
        "9962": 79,
        "9963": 231,
        "9964": 173,
        "9965": 247,
        "9966": 249,
        "9967": 184,
        "9968": 114,
        "9969": 46,
        "9970": 232,
        "9971": 148,
        "9972": 140,
        "9973": 70,
        "9974": 1,
        "9975": 151,
        "9976": 11,
        "9977": 159,
        "9978": 76,
        "9979": 180,
        "9980": 223,
        "9981": 178,
        "9982": 166,
        "9983": 123,
        "9984": 176,
        "9985": 135,
        "9986": 137,
        "9987": 80,
        "9988": 92,
        "9989": 239,
        "9990": 112,
        "9991": 148,
        "9992": 65,
        "9993": 203,
        "9994": 92,
        "9995": 206,
        "9996": 7,
        "9997": 149,
        "9998": 219,
        "9999": 69,
        "10000": 58,
        "10001": 206,
        "10002": 161,
        "10003": 237,
        "10004": 161,
        "10005": 68,
        "10006": 203,
        "10007": 201,
        "10008": 252,
        "10009": 214,
        "10010": 18,
        "10011": 69,
        "10012": 129,
        "10013": 27,
        "10014": 18,
        "10015": 181,
        "10016": 100,
        "10017": 213,
        "10018": 82,
        "10019": 11,
        "10020": 213,
        "10021": 213,
        "10022": 207,
        "10023": 157,
        "10024": 11,
        "10025": 42,
        "10026": 138,
        "10027": 212,
        "10028": 88,
        "10029": 27,
        "10030": 232,
        "10031": 51,
        "10032": 144,
        "10033": 111,
        "10034": 138,
        "10035": 226,
        "10036": 166,
        "10037": 212,
        "10038": 105,
        "10039": 18,
        "10040": 67,
        "10041": 95,
        "10042": 5,
        "10043": 174,
        "10044": 135,
        "10045": 97,
        "10046": 103,
        "10047": 86,
        "10048": 166,
        "10049": 37,
        "10050": 96,
        "10051": 219,
        "10052": 185,
        "10053": 82,
        "10054": 237,
        "10055": 48,
        "10056": 162,
        "10057": 230,
        "10058": 80,
        "10059": 42,
        "10060": 53,
        "10061": 91,
        "10062": 39,
        "10063": 79,
        "10064": 35,
        "10065": 54,
        "10066": 186,
        "10067": 86,
        "10068": 125,
        "10069": 163,
        "10070": 82,
        "10071": 156,
        "10072": 210,
        "10073": 210,
        "10074": 168,
        "10075": 105,
        "10076": 141,
        "10077": 29,
        "10078": 58,
        "10079": 140,
        "10080": 203,
        "10081": 209,
        "10082": 165,
        "10083": 192,
        "10084": 38,
        "10085": 236,
        "10086": 62,
        "10087": 92,
        "10088": 80,
        "10089": 231,
        "10090": 109,
        "10091": 24,
        "10092": 228,
        "10093": 145,
        "10094": 46,
        "10095": 163,
        "10096": 179,
        "10097": 230,
        "10098": 220,
        "10099": 96,
        "10100": 249,
        "10101": 80,
        "10102": 93,
        "10103": 152,
        "10104": 242,
        "10105": 34,
        "10106": 69,
        "10107": 94,
        "10108": 13,
        "10109": 206,
        "10110": 223,
        "10111": 31,
        "10112": 212,
        "10113": 183,
        "10114": 104,
        "10115": 128,
        "10116": 250,
        "10117": 94,
        "10118": 188,
        "10119": 157,
        "10120": 164,
        "10121": 91,
        "10122": 129,
        "10123": 181,
        "10124": 27,
        "10125": 246,
        "10126": 43,
        "10127": 252,
        "10128": 181,
        "10129": 0,
        "10130": 126,
        "10131": 110,
        "10132": 66,
        "10133": 173,
        "10134": 108,
        "10135": 216,
        "10136": 195,
        "10137": 128,
        "10138": 87,
        "10139": 172,
        "10140": 232,
        "10141": 121,
        "10142": 149,
        "10143": 15,
        "10144": 136,
        "10145": 66,
        "10146": 135,
        "10147": 174,
        "10148": 185,
        "10149": 151,
        "10150": 114,
        "10151": 77,
        "10152": 23,
        "10153": 8,
        "10154": 205,
        "10155": 159,
        "10156": 39,
        "10157": 249,
        "10158": 81,
        "10159": 139,
        "10160": 235,
        "10161": 229,
        "10162": 157,
        "10163": 59,
        "10164": 156,
        "10165": 78,
        "10166": 88,
        "10167": 73,
        "10168": 100,
        "10169": 237,
        "10170": 146,
        "10171": 211,
        "10172": 196,
        "10173": 173,
        "10174": 255,
        "10175": 135,
        "10176": 158,
        "10177": 109,
        "10178": 214,
        "10179": 196,
        "10180": 152,
        "10181": 28,
        "10182": 64,
        "10183": 62,
        "10184": 132,
        "10185": 111,
        "10186": 24,
        "10187": 207,
        "10188": 56,
        "10189": 193,
        "10190": 172,
        "10191": 6,
        "10192": 146,
        "10193": 90,
        "10194": 254,
        "10195": 90,
        "10196": 100,
        "10197": 111,
        "10198": 215,
        "10199": 107,
        "10200": 31,
        "10201": 237,
        "10202": 234,
        "10203": 5,
        "10204": 81,
        "10205": 164,
        "10206": 247,
        "10207": 98,
        "10208": 110,
        "10209": 66,
        "10210": 121,
        "10211": 245,
        "10212": 203,
        "10213": 71,
        "10214": 4,
        "10215": 189,
        "10216": 150,
        "10217": 58,
        "10218": 90,
        "10219": 11,
        "10220": 240,
        "10221": 99,
        "10222": 242,
        "10223": 153,
        "10224": 168,
        "10225": 145,
        "10226": 205,
        "10227": 43,
        "10228": 105,
        "10229": 86,
        "10230": 111,
        "10231": 10,
        "10232": 151,
        "10233": 242,
        "10234": 103,
        "10235": 76,
        "10236": 206,
        "10237": 118,
        "10238": 110,
        "10239": 70,
        "10240": 2,
        "10241": 112,
        "10242": 89,
        "10243": 19,
        "10244": 89,
        "10245": 11,
        "10246": 117,
        "10247": 40,
        "10248": 177,
        "10249": 200,
        "10250": 186,
        "10251": 248,
        "10252": 226,
        "10253": 137,
        "10254": 102,
        "10255": 25,
        "10256": 12,
        "10257": 97,
        "10258": 33,
        "10259": 110,
        "10260": 147,
        "10261": 23,
        "10262": 61,
        "10263": 196,
        "10264": 124,
        "10265": 188,
        "10266": 50,
        "10267": 254,
        "10268": 105,
        "10269": 121,
        "10270": 228,
        "10271": 139,
        "10272": 190,
        "10273": 31,
        "10274": 234,
        "10275": 245,
        "10276": 168,
        "10277": 28,
        "10278": 54,
        "10279": 183,
        "10280": 219,
        "10281": 148,
        "10282": 41,
        "10283": 56,
        "10284": 148,
        "10285": 148,
        "10286": 251,
        "10287": 64,
        "10288": 73,
        "10289": 28,
        "10290": 253,
        "10291": 219,
        "10292": 62,
        "10293": 230,
        "10294": 143,
        "10295": 65,
        "10296": 184,
        "10297": 35,
        "10298": 175,
        "10299": 99,
        "10300": 108,
        "10301": 112,
        "10302": 18,
        "10303": 235,
        "10304": 101,
        "10305": 158,
        "10306": 189,
        "10307": 151,
        "10308": 161,
        "10309": 174,
        "10310": 35,
        "10311": 224,
        "10312": 67,
        "10313": 34,
        "10314": 5,
        "10315": 69,
        "10316": 6,
        "10317": 105,
        "10318": 231,
        "10319": 137,
        "10320": 128,
        "10321": 190,
        "10322": 79,
        "10323": 55,
        "10324": 126,
        "10325": 215,
        "10326": 204,
        "10327": 129,
        "10328": 72,
        "10329": 5,
        "10330": 208,
        "10331": 64,
        "10332": 151,
        "10333": 7,
        "10334": 110,
        "10335": 94,
        "10336": 78,
        "10337": 90,
        "10338": 175,
        "10339": 82,
        "10340": 66,
        "10341": 51,
        "10342": 244,
        "10343": 168,
        "10344": 217,
        "10345": 255,
        "10346": 239,
        "10347": 22,
        "10348": 210,
        "10349": 104,
        "10350": 137,
        "10351": 238,
        "10352": 103,
        "10353": 16,
        "10354": 103,
        "10355": 123,
        "10356": 178,
        "10357": 62,
        "10358": 213,
        "10359": 152,
        "10360": 244,
        "10361": 188,
        "10362": 255,
        "10363": 67,
        "10364": 53,
        "10365": 6,
        "10366": 102,
        "10367": 47,
        "10368": 41,
        "10369": 214,
        "10370": 8,
        "10371": 233,
        "10372": 248,
        "10373": 213,
        "10374": 152,
        "10375": 43,
        "10376": 14,
        "10377": 186,
        "10378": 177,
        "10379": 87,
        "10380": 35,
        "10381": 13,
        "10382": 94,
        "10383": 42,
        "10384": 75,
        "10385": 35,
        "10386": 121,
        "10387": 90,
        "10388": 167,
        "10389": 103,
        "10390": 68,
        "10391": 6,
        "10392": 114,
        "10393": 212,
        "10394": 49,
        "10395": 113,
        "10396": 242,
        "10397": 112,
        "10398": 118,
        "10399": 59,
        "10400": 8,
        "10401": 79,
        "10402": 212,
        "10403": 162,
        "10404": 251,
        "10405": 206,
        "10406": 207,
        "10407": 229,
        "10408": 207,
        "10409": 166,
        "10410": 177,
        "10411": 213,
        "10412": 199,
        "10413": 150,
        "10414": 176,
        "10415": 225,
        "10416": 119,
        "10417": 192,
        "10418": 6,
        "10419": 18,
        "10420": 113,
        "10421": 152,
        "10422": 109,
        "10423": 155,
        "10424": 203,
        "10425": 210,
        "10426": 194,
        "10427": 104,
        "10428": 133,
        "10429": 128,
        "10430": 38,
        "10431": 124,
        "10432": 15,
        "10433": 243,
        "10434": 79,
        "10435": 27,
        "10436": 24,
        "10437": 251,
        "10438": 62,
        "10439": 190,
        "10440": 93,
        "10441": 207,
        "10442": 59,
        "10443": 14,
        "10444": 109,
        "10445": 133,
        "10446": 168,
        "10447": 222,
        "10448": 222,
        "10449": 45,
        "10450": 204,
        "10451": 107,
        "10452": 78,
        "10453": 40,
        "10454": 157,
        "10455": 89,
        "10456": 44,
        "10457": 182,
        "10458": 126,
        "10459": 38,
        "10460": 17,
        "10461": 74,
        "10462": 146,
        "10463": 107,
        "10464": 217,
        "10465": 198,
        "10466": 120,
        "10467": 225,
        "10468": 225,
        "10469": 101,
        "10470": 47,
        "10471": 62,
        "10472": 192,
        "10473": 69,
        "10474": 49,
        "10475": 175,
        "10476": 109,
        "10477": 43,
        "10478": 218,
        "10479": 251,
        "10480": 217,
        "10481": 81,
        "10482": 21,
        "10483": 149,
        "10484": 37,
        "10485": 130,
        "10486": 201,
        "10487": 29,
        "10488": 116,
        "10489": 230,
        "10490": 24,
        "10491": 171,
        "10492": 143,
        "10493": 227,
        "10494": 169,
        "10495": 233,
        "10496": 139,
        "10497": 152,
        "10498": 164,
        "10499": 94,
        "10500": 11,
        "10501": 152,
        "10502": 119,
        "10503": 107,
        "10504": 64,
        "10505": 197,
        "10506": 121,
        "10507": 107,
        "10508": 219,
        "10509": 237,
        "10510": 9,
        "10511": 93,
        "10512": 45,
        "10513": 92,
        "10514": 28,
        "10515": 238,
        "10516": 11,
        "10517": 186,
        "10518": 150,
        "10519": 155,
        "10520": 69,
        "10521": 84,
        "10522": 25,
        "10523": 254,
        "10524": 22,
        "10525": 203,
        "10526": 28,
        "10527": 103,
        "10528": 152,
        "10529": 157,
        "10530": 114,
        "10531": 53,
        "10532": 226,
        "10533": 70,
        "10534": 96,
        "10535": 185,
        "10536": 79,
        "10537": 61,
        "10538": 37,
        "10539": 127,
        "10540": 196,
        "10541": 95,
        "10542": 134,
        "10543": 188,
        "10544": 13,
        "10545": 90,
        "10546": 4,
        "10547": 135,
        "10548": 154,
        "10549": 133,
        "10550": 53,
        "10551": 98,
        "10552": 242,
        "10553": 97,
        "10554": 38,
        "10555": 132,
        "10556": 21,
        "10557": 44,
        "10558": 239,
        "10559": 91,
        "10560": 89,
        "10561": 147,
        "10562": 223,
        "10563": 237,
        "10564": 192,
        "10565": 195,
        "10566": 164,
        "10567": 218,
        "10568": 164,
        "10569": 75,
        "10570": 252,
        "10571": 21,
        "10572": 8,
        "10573": 21,
        "10574": 95,
        "10575": 202,
        "10576": 36,
        "10577": 53,
        "10578": 220,
        "10579": 168,
        "10580": 57,
        "10581": 149,
        "10582": 128,
        "10583": 48,
        "10584": 216,
        "10585": 47,
        "10586": 144,
        "10587": 205,
        "10588": 104,
        "10589": 129,
        "10590": 37,
        "10591": 206,
        "10592": 227,
        "10593": 120,
        "10594": 23,
        "10595": 14,
        "10596": 195,
        "10597": 83,
        "10598": 134,
        "10599": 26,
        "10600": 216,
        "10601": 213,
        "10602": 12,
        "10603": 140,
        "10604": 221,
        "10605": 38,
        "10606": 204,
        "10607": 231,
        "10608": 158,
        "10609": 242,
        "10610": 187,
        "10611": 88,
        "10612": 141,
        "10613": 139,
        "10614": 180,
        "10615": 237,
        "10616": 101,
        "10617": 175,
        "10618": 112,
        "10619": 101,
        "10620": 113,
        "10621": 121,
        "10622": 199,
        "10623": 200,
        "10624": 5,
        "10625": 146,
        "10626": 205,
        "10627": 195,
        "10628": 161,
        "10629": 164,
        "10630": 203,
        "10631": 62,
        "10632": 191,
        "10633": 236,
        "10634": 107,
        "10635": 230,
        "10636": 252,
        "10637": 239,
        "10638": 233,
        "10639": 40,
        "10640": 159,
        "10641": 145,
        "10642": 63,
        "10643": 183,
        "10644": 21,
        "10645": 201,
        "10646": 72,
        "10647": 30,
        "10648": 189,
        "10649": 84,
        "10650": 85,
        "10651": 26,
        "10652": 88,
        "10653": 201,
        "10654": 209,
        "10655": 166,
        "10656": 214,
        "10657": 209,
        "10658": 112,
        "10659": 244,
        "10660": 11,
        "10661": 28,
        "10662": 191,
        "10663": 122,
        "10664": 10,
        "10665": 23,
        "10666": 201,
        "10667": 115,
        "10668": 198,
        "10669": 30,
        "10670": 28,
        "10671": 131,
        "10672": 237,
        "10673": 33,
        "10674": 47,
        "10675": 18,
        "10676": 7,
        "10677": 188,
        "10678": 39,
        "10679": 248,
        "10680": 198,
        "10681": 154,
        "10682": 152,
        "10683": 153,
        "10684": 48,
        "10685": 216,
        "10686": 157,
        "10687": 62,
        "10688": 119,
        "10689": 17,
        "10690": 178,
        "10691": 139,
        "10692": 140,
        "10693": 79,
        "10694": 27,
        "10695": 244,
        "10696": 251,
        "10697": 72,
        "10698": 243,
        "10699": 65,
        "10700": 5,
        "10701": 62,
        "10702": 140,
        "10703": 105,
        "10704": 69,
        "10705": 33,
        "10706": 27,
        "10707": 254,
        "10708": 84,
        "10709": 167,
        "10710": 97,
        "10711": 81,
        "10712": 178,
        "10713": 20,
        "10714": 106,
        "10715": 72,
        "10716": 250,
        "10717": 199,
        "10718": 201,
        "10719": 248,
        "10720": 90,
        "10721": 152,
        "10722": 180,
        "10723": 203,
        "10724": 88,
        "10725": 140,
        "10726": 134,
        "10727": 146,
        "10728": 5,
        "10729": 141,
        "10730": 234,
        "10731": 43,
        "10732": 55,
        "10733": 137,
        "10734": 68,
        "10735": 142,
        "10736": 233,
        "10737": 191,
        "10738": 240,
        "10739": 105,
        "10740": 7,
        "10741": 255,
        "10742": 9,
        "10743": 187,
        "10744": 141,
        "10745": 189,
        "10746": 43,
        "10747": 6,
        "10748": 36,
        "10749": 177,
        "10750": 49,
        "10751": 205,
        "10752": 32,
        "10753": 20,
        "10754": 184,
        "10755": 92,
        "10756": 149,
        "10757": 28,
        "10758": 23,
        "10759": 131,
        "10760": 211,
        "10761": 13,
        "10762": 8,
        "10763": 124,
        "10764": 238,
        "10765": 226,
        "10766": 74,
        "10767": 87,
        "10768": 37,
        "10769": 203,
        "10770": 250,
        "10771": 11,
        "10772": 133,
        "10773": 9,
        "10774": 36,
        "10775": 43,
        "10776": 156,
        "10777": 193,
        "10778": 228,
        "10779": 12,
        "10780": 255,
        "10781": 228,
        "10782": 218,
        "10783": 52,
        "10784": 227,
        "10785": 120,
        "10786": 199,
        "10787": 179,
        "10788": 221,
        "10789": 59,
        "10790": 72,
        "10791": 106,
        "10792": 132,
        "10793": 110,
        "10794": 48,
        "10795": 107,
        "10796": 189,
        "10797": 165,
        "10798": 140,
        "10799": 4,
        "10800": 225,
        "10801": 246,
        "10802": 211,
        "10803": 150,
        "10804": 149,
        "10805": 204,
        "10806": 167,
        "10807": 113,
        "10808": 57,
        "10809": 5,
        "10810": 219,
        "10811": 48,
        "10812": 61,
        "10813": 202,
        "10814": 61,
        "10815": 41,
        "10816": 123,
        "10817": 198,
        "10818": 119,
        "10819": 183,
        "10820": 124,
        "10821": 111,
        "10822": 236,
        "10823": 36,
        "10824": 26,
        "10825": 50,
        "10826": 247,
        "10827": 41,
        "10828": 95,
        "10829": 166,
        "10830": 155,
        "10831": 0,
        "10832": 69,
        "10833": 175,
        "10834": 188,
        "10835": 43,
        "10836": 104,
        "10837": 22,
        "10838": 90,
        "10839": 11,
        "10840": 69,
        "10841": 112,
        "10842": 65,
        "10843": 1,
        "10844": 220,
        "10845": 86,
        "10846": 225,
        "10847": 223,
        "10848": 255,
        "10849": 27,
        "10850": 127,
        "10851": 132,
        "10852": 60,
        "10853": 95,
        "10854": 146,
        "10855": 40,
        "10856": 61,
        "10857": 139,
        "10858": 153,
        "10859": 23,
        "10860": 200,
        "10861": 160,
        "10862": 207,
        "10863": 236,
        "10864": 89,
        "10865": 18,
        "10866": 181,
        "10867": 79,
        "10868": 159,
        "10869": 29,
        "10870": 144,
        "10871": 13,
        "10872": 43,
        "10873": 207,
        "10874": 199,
        "10875": 238,
        "10876": 140,
        "10877": 2,
        "10878": 159,
        "10879": 176,
        "10880": 5,
        "10881": 135,
        "10882": 68,
        "10883": 126,
        "10884": 61,
        "10885": 94,
        "10886": 79,
        "10887": 1,
        "10888": 161,
        "10889": 32,
        "10890": 180,
        "10891": 190,
        "10892": 227,
        "10893": 18,
        "10894": 213,
        "10895": 123,
        "10896": 208,
        "10897": 44,
        "10898": 61,
        "10899": 52,
        "10900": 59,
        "10901": 81,
        "10902": 143,
        "10903": 8,
        "10904": 49,
        "10905": 73,
        "10906": 198,
        "10907": 91,
        "10908": 96,
        "10909": 117,
        "10910": 233,
        "10911": 124,
        "10912": 69,
        "10913": 31,
        "10914": 98,
        "10915": 144,
        "10916": 10,
        "10917": 204,
        "10918": 239,
        "10919": 70,
        "10920": 53,
        "10921": 23,
        "10922": 216,
        "10923": 62,
        "10924": 66,
        "10925": 0,
        "10926": 20,
        "10927": 47,
        "10928": 108,
        "10929": 167,
        "10930": 135,
        "10931": 155,
        "10932": 115,
        "10933": 244,
        "10934": 43,
        "10935": 109,
        "10936": 104,
        "10937": 226,
        "10938": 18,
        "10939": 205,
        "10940": 51,
        "10941": 62,
        "10942": 197,
        "10943": 131,
        "10944": 194,
        "10945": 114,
        "10946": 77,
        "10947": 118,
        "10948": 254,
        "10949": 151,
        "10950": 188,
        "10951": 187,
        "10952": 223,
        "10953": 31,
        "10954": 118,
        "10955": 0,
        "10956": 51,
        "10957": 74,
        "10958": 10,
        "10959": 153,
        "10960": 245,
        "10961": 87,
        "10962": 172,
        "10963": 45,
        "10964": 184,
        "10965": 212,
        "10966": 23,
        "10967": 211,
        "10968": 173,
        "10969": 150,
        "10970": 6,
        "10971": 70,
        "10972": 236,
        "10973": 77,
        "10974": 60,
        "10975": 23,
        "10976": 49,
        "10977": 145,
        "10978": 87,
        "10979": 163,
        "10980": 191,
        "10981": 120,
        "10982": 22,
        "10983": 128,
        "10984": 10,
        "10985": 29,
        "10986": 70,
        "10987": 141,
        "10988": 219,
        "10989": 223,
        "10990": 175,
        "10991": 252,
        "10992": 12,
        "10993": 89,
        "10994": 239,
        "10995": 162,
        "10996": 222,
        "10997": 15,
        "10998": 45,
        "10999": 113,
        "11000": 41,
        "11001": 194,
        "11002": 227,
        "11003": 135,
        "11004": 0,
        "11005": 44,
        "11006": 224,
        "11007": 116,
        "11008": 137,
        "11009": 77,
        "11010": 11,
        "11011": 61,
        "11012": 178,
        "11013": 247,
        "11014": 16,
        "11015": 77,
        "11016": 125,
        "11017": 171,
        "11018": 155,
        "11019": 242,
        "11020": 229,
        "11021": 106,
        "11022": 25,
        "11023": 34,
        "11024": 53,
        "11025": 205,
        "11026": 203,
        "11027": 28,
        "11028": 197,
        "11029": 221,
        "11030": 113,
        "11031": 212,
        "11032": 160,
        "11033": 59,
        "11034": 154,
        "11035": 68,
        "11036": 232,
        "11037": 131,
        "11038": 100,
        "11039": 13,
        "11040": 12,
        "11041": 250,
        "11042": 184,
        "11043": 36,
        "11044": 86,
        "11045": 67,
        "11046": 4,
        "11047": 125,
        "11048": 92,
        "11049": 230,
        "11050": 191,
        "11051": 170,
        "11052": 126,
        "11053": 227,
        "11054": 218,
        "11055": 103,
        "11056": 184,
        "11057": 129,
        "11058": 30,
        "11059": 136,
        "11060": 166,
        "11061": 34,
        "11062": 180,
        "11063": 83,
        "11064": 211,
        "11065": 164,
        "11066": 101,
        "11067": 251,
        "11068": 196,
        "11069": 143,
        "11070": 0,
        "11071": 70,
        "11072": 163,
        "11073": 240,
        "11074": 116,
        "11075": 254,
        "11076": 116,
        "11077": 37,
        "11078": 23,
        "11079": 95,
        "11080": 216,
        "11081": 164,
        "11082": 183,
        "11083": 179,
        "11084": 136,
        "11085": 135,
        "11086": 38,
        "11087": 104,
        "11088": 130,
        "11089": 85,
        "11090": 237,
        "11091": 110,
        "11092": 26,
        "11093": 31,
        "11094": 101,
        "11095": 125,
        "11096": 172,
        "11097": 211,
        "11098": 188,
        "11099": 134,
        "11100": 172,
        "11101": 246,
        "11102": 87,
        "11103": 223,
        "11104": 11,
        "11105": 87,
        "11106": 198,
        "11107": 243,
        "11108": 53,
        "11109": 195,
        "11110": 248,
        "11111": 246,
        "11112": 44,
        "11113": 209,
        "11114": 130,
        "11115": 111,
        "11116": 186,
        "11117": 225,
        "11118": 199,
        "11119": 43,
        "11120": 238,
        "11121": 202,
        "11122": 242,
        "11123": 229,
        "11124": 178,
        "11125": 89,
        "11126": 146,
        "11127": 195,
        "11128": 0,
        "11129": 252,
        "11130": 238,
        "11131": 108,
        "11132": 194,
        "11133": 21,
        "11134": 1,
        "11135": 101,
        "11136": 193,
        "11137": 69,
        "11138": 234,
        "11139": 144,
        "11140": 51,
        "11141": 11,
        "11142": 134,
        "11143": 63,
        "11144": 125,
        "11145": 80,
        "11146": 191,
        "11147": 97,
        "11148": 72,
        "11149": 234,
        "11150": 165,
        "11151": 234,
        "11152": 113,
        "11153": 132,
        "11154": 155,
        "11155": 94,
        "11156": 231,
        "11157": 71,
        "11158": 65,
        "11159": 20,
        "11160": 109,
        "11161": 81,
        "11162": 212,
        "11163": 31,
        "11164": 25,
        "11165": 181,
        "11166": 10,
        "11167": 154,
        "11168": 173,
        "11169": 15,
        "11170": 29,
        "11171": 26,
        "11172": 103,
        "11173": 71,
        "11174": 116,
        "11175": 194,
        "11176": 207,
        "11177": 14,
        "11178": 143,
        "11179": 66,
        "11180": 187,
        "11181": 77,
        "11182": 163,
        "11183": 1,
        "11184": 171,
        "11185": 130,
        "11186": 215,
        "11187": 82,
        "11188": 124,
        "11189": 40,
        "11190": 196,
        "11191": 184,
        "11192": 162,
        "11193": 57,
        "11194": 38,
        "11195": 243,
        "11196": 39,
        "11197": 194,
        "11198": 184,
        "11199": 203,
        "11200": 234,
        "11201": 115,
        "11202": 39,
        "11203": 92,
        "11204": 230,
        "11205": 215,
        "11206": 111,
        "11207": 98,
        "11208": 49,
        "11209": 250,
        "11210": 180,
        "11211": 171,
        "11212": 140,
        "11213": 12,
        "11214": 90,
        "11215": 253,
        "11216": 220,
        "11217": 38,
        "11218": 10,
        "11219": 173,
        "11220": 208,
        "11221": 212,
        "11222": 92,
        "11223": 61,
        "11224": 34,
        "11225": 232,
        "11226": 234,
        "11227": 201,
        "11228": 187,
        "11229": 96,
        "11230": 182,
        "11231": 163,
        "11232": 114,
        "11233": 144,
        "11234": 247,
        "11235": 18,
        "11236": 71,
        "11237": 211,
        "11238": 49,
        "11239": 58,
        "11240": 140,
        "11241": 112,
        "11242": 1,
        "11243": 55,
        "11244": 156,
        "11245": 168,
        "11246": 69,
        "11247": 66,
        "11248": 159,
        "11249": 248,
        "11250": 226,
        "11251": 49,
        "11252": 88,
        "11253": 104,
        "11254": 177,
        "11255": 108,
        "11256": 147,
        "11257": 99,
        "11258": 55,
        "11259": 17,
        "11260": 62,
        "11261": 52,
        "11262": 16,
        "11263": 212,
        "11264": 45,
        "11265": 30,
        "11266": 5,
        "11267": 53,
        "11268": 185,
        "11269": 60,
        "11270": 241,
        "11271": 124,
        "11272": 185,
        "11273": 50,
        "11274": 110,
        "11275": 221,
        "11276": 14,
        "11277": 100,
        "11278": 240,
        "11279": 182,
        "11280": 19,
        "11281": 142,
        "11282": 127,
        "11283": 215,
        "11284": 88,
        "11285": 195,
        "11286": 174,
        "11287": 155,
        "11288": 62,
        "11289": 146,
        "11290": 177,
        "11291": 206,
        "11292": 148,
        "11293": 40,
        "11294": 148,
        "11295": 78,
        "11296": 219,
        "11297": 130,
        "11298": 14,
        "11299": 107,
        "11300": 36,
        "11301": 154,
        "11302": 242,
        "11303": 163,
        "11304": 30,
        "11305": 160,
        "11306": 116,
        "11307": 205,
        "11308": 117,
        "11309": 123,
        "11310": 19,
        "11311": 91,
        "11312": 242,
        "11313": 182,
        "11314": 132,
        "11315": 173,
        "11316": 118,
        "11317": 21,
        "11318": 241,
        "11319": 31,
        "11320": 124,
        "11321": 81,
        "11322": 226,
        "11323": 173,
        "11324": 244,
        "11325": 33,
        "11326": 45,
        "11327": 138,
        "11328": 23,
        "11329": 9,
        "11330": 229,
        "11331": 205,
        "11332": 183,
        "11333": 200,
        "11334": 184,
        "11335": 237,
        "11336": 161,
        "11337": 117,
        "11338": 113,
        "11339": 228,
        "11340": 52,
        "11341": 17,
        "11342": 148,
        "11343": 230,
        "11344": 9,
        "11345": 78,
        "11346": 249,
        "11347": 174,
        "11348": 190,
        "11349": 100,
        "11350": 218,
        "11351": 178,
        "11352": 89,
        "11353": 147,
        "11354": 3,
        "11355": 190,
        "11356": 35,
        "11357": 212,
        "11358": 179,
        "11359": 163,
        "11360": 61,
        "11361": 180,
        "11362": 196,
        "11363": 153,
        "11364": 94,
        "11365": 156,
        "11366": 86,
        "11367": 246,
        "11368": 123,
        "11369": 101,
        "11370": 184,
        "11371": 200,
        "11372": 15,
        "11373": 182,
        "11374": 9,
        "11375": 116,
        "11376": 117,
        "11377": 167,
        "11378": 114,
        "11379": 166,
        "11380": 236,
        "11381": 54,
        "11382": 214,
        "11383": 77,
        "11384": 24,
        "11385": 14,
        "11386": 157,
        "11387": 220,
        "11388": 98,
        "11389": 197,
        "11390": 255,
        "11391": 70,
        "11392": 61,
        "11393": 179,
        "11394": 36,
        "11395": 142,
        "11396": 105,
        "11397": 16,
        "11398": 234,
        "11399": 232,
        "11400": 213,
        "11401": 23,
        "11402": 237,
        "11403": 206,
        "11404": 87,
        "11405": 51,
        "11406": 37,
        "11407": 137,
        "11408": 81,
        "11409": 65,
        "11410": 177,
        "11411": 185,
        "11412": 14,
        "11413": 151,
        "11414": 64,
        "11415": 69,
        "11416": 176,
        "11417": 133,
        "11418": 247,
        "11419": 108,
        "11420": 22,
        "11421": 83,
        "11422": 86,
        "11423": 80,
        "11424": 60,
        "11425": 11,
        "11426": 64,
        "11427": 185,
        "11428": 222,
        "11429": 207,
        "11430": 57,
        "11431": 169,
        "11432": 144,
        "11433": 97,
        "11434": 16,
        "11435": 239,
        "11436": 124,
        "11437": 48,
        "11438": 22,
        "11439": 91,
        "11440": 48,
        "11441": 212,
        "11442": 21,
        "11443": 200,
        "11444": 203,
        "11445": 67,
        "11446": 140,
        "11447": 47,
        "11448": 149,
        "11449": 4,
        "11450": 221,
        "11451": 1,
        "11452": 249,
        "11453": 150,
        "11454": 104,
        "11455": 69,
        "11456": 160,
        "11457": 135,
        "11458": 205,
        "11459": 191,
        "11460": 14,
        "11461": 148,
        "11462": 13,
        "11463": 17,
        "11464": 174,
        "11465": 215,
        "11466": 60,
        "11467": 96,
        "11468": 187,
        "11469": 125,
        "11470": 40,
        "11471": 178,
        "11472": 207,
        "11473": 119,
        "11474": 174,
        "11475": 30,
        "11476": 180,
        "11477": 122,
        "11478": 188,
        "11479": 63,
        "11480": 234,
        "11481": 219,
        "11482": 233,
        "11483": 7,
        "11484": 70,
        "11485": 196,
        "11486": 145,
        "11487": 43,
        "11488": 57,
        "11489": 149,
        "11490": 149,
        "11491": 139,
        "11492": 244,
        "11493": 23,
        "11494": 135,
        "11495": 37,
        "11496": 154,
        "11497": 129,
        "11498": 11,
        "11499": 3,
        "11500": 72,
        "11501": 184,
        "11502": 243,
        "11503": 115,
        "11504": 211,
        "11505": 148,
        "11506": 105,
        "11507": 226,
        "11508": 104,
        "11509": 60,
        "11510": 220,
        "11511": 108,
        "11512": 215,
        "11513": 201,
        "11514": 181,
        "11515": 202,
        "11516": 221,
        "11517": 55,
        "11518": 90,
        "11519": 134,
        "11520": 241,
        "11521": 103,
        "11522": 134,
        "11523": 2,
        "11524": 191,
        "11525": 17,
        "11526": 52,
        "11527": 136,
        "11528": 155,
        "11529": 201,
        "11530": 194,
        "11531": 90,
        "11532": 151,
        "11533": 208,
        "11534": 43,
        "11535": 163,
        "11536": 36,
        "11537": 198,
        "11538": 6,
        "11539": 91,
        "11540": 32,
        "11541": 226,
        "11542": 66,
        "11543": 137,
        "11544": 19,
        "11545": 172,
        "11546": 220,
        "11547": 194,
        "11548": 110,
        "11549": 128,
        "11550": 194,
        "11551": 76,
        "11552": 152,
        "11553": 81,
        "11554": 152,
        "11555": 54,
        "11556": 239,
        "11557": 195,
        "11558": 231,
        "11559": 113,
        "11560": 49,
        "11561": 18,
        "11562": 226,
        "11563": 101,
        "11564": 76,
        "11565": 145,
        "11566": 172,
        "11567": 178,
        "11568": 245,
        "11569": 235,
        "11570": 197,
        "11571": 240,
        "11572": 4,
        "11573": 34,
        "11574": 39,
        "11575": 77,
        "11576": 211,
        "11577": 225,
        "11578": 39,
        "11579": 78,
        "11580": 238,
        "11581": 202,
        "11582": 162,
        "11583": 164,
        "11584": 162,
        "11585": 15,
        "11586": 120,
        "11587": 25,
        "11588": 245,
        "11589": 39,
        "11590": 253,
        "11591": 220,
        "11592": 90,
        "11593": 167,
        "11594": 251,
        "11595": 46,
        "11596": 148,
        "11597": 116,
        "11598": 173,
        "11599": 217,
        "11600": 197,
        "11601": 210,
        "11602": 140,
        "11603": 41,
        "11604": 163,
        "11605": 181,
        "11606": 198,
        "11607": 219,
        "11608": 253,
        "11609": 54,
        "11610": 210,
        "11611": 106,
        "11612": 56,
        "11613": 56,
        "11614": 189,
        "11615": 125,
        "11616": 103,
        "11617": 250,
        "11618": 115,
        "11619": 196,
        "11620": 26,
        "11621": 207,
        "11622": 171,
        "11623": 94,
        "11624": 27,
        "11625": 208,
        "11626": 9,
        "11627": 45,
        "11628": 69,
        "11629": 81,
        "11630": 86,
        "11631": 195,
        "11632": 81,
        "11633": 203,
        "11634": 86,
        "11635": 241,
        "11636": 225,
        "11637": 72,
        "11638": 169,
        "11639": 7,
        "11640": 50,
        "11641": 211,
        "11642": 16,
        "11643": 67,
        "11644": 7,
        "11645": 74,
        "11646": 199,
        "11647": 226,
        "11648": 170,
        "11649": 202,
        "11650": 198,
        "11651": 125,
        "11652": 42,
        "11653": 131,
        "11654": 57,
        "11655": 146,
        "11656": 90,
        "11657": 106,
        "11658": 64,
        "11659": 132,
        "11660": 3,
        "11661": 119,
        "11662": 75,
        "11663": 174,
        "11664": 169,
        "11665": 173,
        "11666": 123,
        "11667": 81,
        "11668": 52,
        "11669": 160,
        "11670": 76,
        "11671": 228,
        "11672": 123,
        "11673": 222,
        "11674": 13,
        "11675": 215,
        "11676": 21,
        "11677": 66,
        "11678": 197,
        "11679": 27,
        "11680": 63,
        "11681": 249,
        "11682": 227,
        "11683": 255,
        "11684": 253,
        "11685": 227,
        "11686": 87,
        "11687": 107,
        "11688": 83,
        "11689": 149,
        "11690": 26,
        "11691": 187,
        "11692": 72,
        "11693": 205,
        "11694": 13,
        "11695": 229,
        "11696": 83,
        "11697": 65,
        "11698": 62,
        "11699": 4,
        "11700": 165,
        "11701": 100,
        "11702": 166,
        "11703": 68,
        "11704": 205,
        "11705": 146,
        "11706": 213,
        "11707": 49,
        "11708": 221,
        "11709": 136,
        "11710": 126,
        "11711": 189,
        "11712": 188,
        "11713": 159,
        "11714": 255,
        "11715": 41,
        "11716": 52,
        "11717": 135,
        "11718": 23,
        "11719": 181,
        "11720": 53,
        "11721": 228,
        "11722": 222,
        "11723": 43,
        "11724": 147,
        "11725": 2,
        "11726": 96,
        "11727": 132,
        "11728": 176,
        "11729": 225,
        "11730": 74,
        "11731": 174,
        "11732": 238,
        "11733": 194,
        "11734": 89,
        "11735": 59,
        "11736": 190,
        "11737": 136,
        "11738": 226,
        "11739": 97,
        "11740": 102,
        "11741": 40,
        "11742": 243,
        "11743": 181,
        "11744": 45,
        "11745": 67,
        "11746": 202,
        "11747": 247,
        "11748": 83,
        "11749": 126,
        "11750": 200,
        "11751": 111,
        "11752": 177,
        "11753": 185,
        "11754": 29,
        "11755": 108,
        "11756": 69,
        "11757": 85,
        "11758": 252,
        "11759": 192,
        "11760": 242,
        "11761": 213,
        "11762": 189,
        "11763": 252,
        "11764": 88,
        "11765": 155,
        "11766": 100,
        "11767": 94,
        "11768": 252,
        "11769": 252,
        "11770": 190,
        "11771": 42,
        "11772": 155,
        "11773": 223,
        "11774": 150,
        "11775": 114,
        "11776": 28,
        "11777": 88,
        "11778": 187,
        "11779": 107,
        "11780": 163,
        "11781": 176,
        "11782": 122,
        "11783": 235,
        "11784": 23,
        "11785": 51,
        "11786": 200,
        "11787": 81,
        "11788": 9,
        "11789": 116,
        "11790": 120,
        "11791": 217,
        "11792": 198,
        "11793": 125,
        "11794": 77,
        "11795": 92,
        "11796": 224,
        "11797": 18,
        "11798": 172,
        "11799": 171,
        "11800": 1,
        "11801": 179,
        "11802": 190,
        "11803": 82,
        "11804": 15,
        "11805": 231,
        "11806": 230,
        "11807": 216,
        "11808": 102,
        "11809": 87,
        "11810": 12,
        "11811": 240,
        "11812": 2,
        "11813": 165,
        "11814": 83,
        "11815": 220,
        "11816": 117,
        "11817": 61,
        "11818": 177,
        "11819": 131,
        "11820": 249,
        "11821": 253,
        "11822": 202,
        "11823": 97,
        "11824": 148,
        "11825": 53,
        "11826": 48,
        "11827": 10,
        "11828": 214,
        "11829": 247,
        "11830": 187,
        "11831": 203,
        "11832": 56,
        "11833": 70,
        "11834": 170,
        "11835": 90,
        "11836": 176,
        "11837": 153,
        "11838": 35,
        "11839": 181,
        "11840": 53,
        "11841": 249,
        "11842": 40,
        "11843": 50,
        "11844": 5,
        "11845": 217,
        "11846": 227,
        "11847": 97,
        "11848": 85,
        "11849": 83,
        "11850": 77,
        "11851": 153,
        "11852": 59,
        "11853": 121,
        "11854": 217,
        "11855": 122,
        "11856": 101,
        "11857": 155,
        "11858": 175,
        "11859": 62,
        "11860": 131,
        "11861": 41,
        "11862": 29,
        "11863": 190,
        "11864": 247,
        "11865": 74,
        "11866": 95,
        "11867": 101,
        "11868": 84,
        "11869": 177,
        "11870": 73,
        "11871": 192,
        "11872": 184,
        "11873": 27,
        "11874": 121,
        "11875": 162,
        "11876": 102,
        "11877": 93,
        "11878": 175,
        "11879": 127,
        "11880": 24,
        "11881": 204,
        "11882": 74,
        "11883": 80,
        "11884": 77,
        "11885": 21,
        "11886": 42,
        "11887": 76,
        "11888": 24,
        "11889": 171,
        "11890": 52,
        "11891": 242,
        "11892": 172,
        "11893": 183,
        "11894": 182,
        "11895": 31,
        "11896": 191,
        "11897": 5,
        "11898": 207,
        "11899": 216,
        "11900": 121,
        "11901": 53,
        "11902": 245,
        "11903": 51,
        "11904": 72,
        "11905": 229,
        "11906": 207,
        "11907": 210,
        "11908": 109,
        "11909": 134,
        "11910": 124,
        "11911": 143,
        "11912": 221,
        "11913": 144,
        "11914": 101,
        "11915": 79,
        "11916": 26,
        "11917": 183,
        "11918": 79,
        "11919": 24,
        "11920": 131,
        "11921": 111,
        "11922": 228,
        "11923": 148,
        "11924": 223,
        "11925": 76,
        "11926": 64,
        "11927": 252,
        "11928": 65,
        "11929": 61,
        "11930": 197,
        "11931": 76,
        "11932": 170,
        "11933": 217,
        "11934": 75,
        "11935": 202,
        "11936": 77,
        "11937": 227,
        "11938": 144,
        "11939": 45,
        "11940": 57,
        "11941": 189,
        "11942": 96,
        "11943": 64,
        "11944": 157,
        "11945": 88,
        "11946": 203,
        "11947": 122,
        "11948": 96,
        "11949": 97,
        "11950": 8,
        "11951": 208,
        "11952": 255,
        "11953": 122,
        "11954": 181,
        "11955": 127,
        "11956": 57,
        "11957": 47,
        "11958": 145,
        "11959": 217,
        "11960": 227,
        "11961": 171,
        "11962": 135,
        "11963": 67,
        "11964": 233,
        "11965": 230,
        "11966": 196,
        "11967": 64,
        "11968": 71,
        "11969": 16,
        "11970": 106,
        "11971": 180,
        "11972": 201,
        "11973": 137,
        "11974": 25,
        "11975": 97,
        "11976": 194,
        "11977": 80,
        "11978": 216,
        "11979": 229,
        "11980": 19,
        "11981": 245,
        "11982": 85,
        "11983": 49,
        "11984": 244,
        "11985": 171,
        "11986": 114,
        "11987": 133,
        "11988": 75,
        "11989": 64,
        "11990": 58,
        "11991": 78,
        "11992": 222,
        "11993": 254,
        "11994": 252,
        "11995": 148,
        "11996": 236,
        "11997": 155,
        "11998": 47,
        "11999": 119,
        "12000": 63,
        "12001": 93,
        "12002": 78,
        "12003": 208,
        "12004": 233,
        "12005": 206,
        "12006": 90,
        "12007": 122,
        "12008": 69,
        "12009": 182,
        "12010": 20,
        "12011": 182,
        "12012": 93,
        "12013": 125,
        "12014": 135,
        "12015": 23,
        "12016": 21,
        "12017": 246,
        "12018": 90,
        "12019": 181,
        "12020": 102,
        "12021": 34,
        "12022": 38,
        "12023": 244,
        "12024": 240,
        "12025": 173,
        "12026": 202,
        "12027": 44,
        "12028": 89,
        "12029": 30,
        "12030": 234,
        "12031": 16,
        "12032": 135,
        "12033": 60,
        "12034": 47,
        "12035": 40,
        "12036": 184,
        "12037": 236,
        "12038": 92,
        "12039": 122,
        "12040": 87,
        "12041": 62,
        "12042": 204,
        "12043": 35,
        "12044": 99,
        "12045": 126,
        "12046": 119,
        "12047": 184,
        "12048": 165,
        "12049": 49,
        "12050": 87,
        "12051": 156,
        "12052": 172,
        "12053": 35,
        "12054": 4,
        "12055": 242,
        "12056": 163,
        "12057": 161,
        "12058": 37,
        "12059": 234,
        "12060": 227,
        "12061": 240,
        "12062": 135,
        "12063": 23,
        "12064": 44,
        "12065": 255,
        "12066": 200,
        "12067": 121,
        "12068": 114,
        "12069": 65,
        "12070": 224,
        "12071": 12,
        "12072": 134,
        "12073": 52,
        "12074": 95,
        "12075": 214,
        "12076": 205,
        "12077": 106,
        "12078": 193,
        "12079": 68,
        "12080": 62,
        "12081": 221,
        "12082": 168,
        "12083": 205,
        "12084": 99,
        "12085": 8,
        "12086": 247,
        "12087": 74,
        "12088": 43,
        "12089": 90,
        "12090": 209,
        "12091": 120,
        "12092": 111,
        "12093": 85,
        "12094": 8,
        "12095": 7,
        "12096": 123,
        "12097": 186,
        "12098": 18,
        "12099": 4,
        "12100": 33,
        "12101": 231,
        "12102": 229,
        "12103": 84,
        "12104": 209,
        "12105": 101,
        "12106": 93,
        "12107": 37,
        "12108": 57,
        "12109": 176,
        "12110": 151,
        "12111": 137,
        "12112": 203,
        "12113": 15,
        "12114": 162,
        "12115": 201,
        "12116": 63,
        "12117": 137,
        "12118": 213,
        "12119": 239,
        "12120": 29,
        "12121": 44,
        "12122": 205,
        "12123": 38,
        "12124": 89,
        "12125": 117,
        "12126": 127,
        "12127": 24,
        "12128": 140,
        "12129": 195,
        "12130": 101,
        "12131": 52,
        "12132": 69,
        "12133": 223,
        "12134": 82,
        "12135": 207,
        "12136": 87,
        "12137": 194,
        "12138": 254,
        "12139": 195,
        "12140": 26,
        "12141": 101,
        "12142": 166,
        "12143": 63,
        "12144": 10,
        "12145": 210,
        "12146": 158,
        "12147": 120,
        "12148": 36,
        "12149": 43,
        "12150": 226,
        "12151": 9,
        "12152": 79,
        "12153": 23,
        "12154": 233,
        "12155": 16,
        "12156": 239,
        "12157": 6,
        "12158": 98,
        "12159": 131,
        "12160": 140,
        "12161": 119,
        "12162": 253,
        "12163": 125,
        "12164": 205,
        "12165": 68,
        "12166": 27,
        "12167": 173,
        "12168": 1,
        "12169": 233,
        "12170": 226,
        "12171": 116,
        "12172": 188,
        "12173": 243,
        "12174": 227,
        "12175": 240,
        "12176": 75,
        "12177": 38,
        "12178": 98,
        "12179": 6,
        "12180": 241,
        "12181": 111,
        "12182": 5,
        "12183": 22,
        "12184": 25,
        "12185": 216,
        "12186": 209,
        "12187": 122,
        "12188": 249,
        "12189": 242,
        "12190": 151,
        "12191": 84,
        "12192": 4,
        "12193": 103,
        "12194": 50,
        "12195": 21,
        "12196": 199,
        "12197": 111,
        "12198": 175,
        "12199": 64,
        "12200": 205,
        "12201": 197,
        "12202": 228,
        "12203": 40,
        "12204": 171,
        "12205": 131,
        "12206": 81,
        "12207": 12,
        "12208": 232,
        "12209": 104,
        "12210": 34,
        "12211": 19,
        "12212": 153,
        "12213": 200,
        "12214": 103,
        "12215": 20,
        "12216": 58,
        "12217": 126,
        "12218": 39,
        "12219": 243,
        "12220": 113,
        "12221": 200,
        "12222": 214,
        "12223": 132,
        "12224": 135,
        "12225": 213,
        "12226": 130,
        "12227": 86,
        "12228": 209,
        "12229": 68,
        "12230": 104,
        "12231": 125,
        "12232": 96,
        "12233": 176,
        "12234": 144,
        "12235": 205,
        "12236": 79,
        "12237": 43,
        "12238": 88,
        "12239": 251,
        "12240": 41,
        "12241": 84,
        "12242": 187,
        "12243": 190,
        "12244": 223,
        "12245": 63,
        "12246": 186,
        "12247": 48,
        "12248": 211,
        "12249": 147,
        "12250": 50,
        "12251": 111,
        "12252": 71,
        "12253": 8,
        "12254": 122,
        "12255": 179,
        "12256": 55,
        "12257": 16,
        "12258": 206,
        "12259": 142,
        "12260": 255,
        "12261": 121,
        "12262": 58,
        "12263": 187,
        "12264": 209,
        "12265": 134,
        "12266": 8,
        "12267": 4,
        "12268": 79,
        "12269": 255,
        "12270": 169,
        "12271": 34,
        "12272": 204,
        "12273": 87,
        "12274": 179,
        "12275": 253,
        "12276": 122,
        "12277": 252,
        "12278": 143,
        "12279": 9,
        "12280": 84,
        "12281": 238,
        "12282": 246,
        "12283": 208,
        "12284": 179,
        "12285": 198,
        "12286": 159,
        "12287": 110,
        "12288": 199,
        "12289": 251,
        "12290": 250,
        "12291": 189,
        "12292": 23,
        "12293": 251,
        "12294": 109,
        "12295": 59,
        "12296": 146,
        "12297": 105,
        "12298": 43,
        "12299": 68,
        "12300": 4,
        "12301": 189,
        "12302": 37,
        "12303": 36,
        "12304": 51,
        "12305": 124,
        "12306": 56,
        "12307": 176,
        "12308": 7,
        "12309": 54,
        "12310": 145,
        "12311": 121,
        "12312": 128,
        "12313": 22,
        "12314": 242,
        "12315": 6,
        "12316": 72,
        "12317": 59,
        "12318": 238,
        "12319": 234,
        "12320": 68,
        "12321": 183,
        "12322": 221,
        "12323": 48,
        "12324": 221,
        "12325": 120,
        "12326": 199,
        "12327": 143,
        "12328": 248,
        "12329": 13,
        "12330": 164,
        "12331": 215,
        "12332": 249,
        "12333": 91,
        "12334": 113,
        "12335": 214,
        "12336": 206,
        "12337": 105,
        "12338": 123,
        "12339": 239,
        "12340": 251,
        "12341": 248,
        "12342": 95,
        "12343": 222,
        "12344": 216,
        "12345": 121,
        "12346": 142,
        "12347": 181,
        "12348": 252,
        "12349": 246,
        "12350": 244,
        "12351": 169,
        "12352": 174,
        "12353": 61,
        "12354": 140,
        "12355": 84,
        "12356": 88,
        "12357": 106,
        "12358": 3,
        "12359": 220,
        "12360": 191,
        "12361": 89,
        "12362": 101,
        "12363": 241,
        "12364": 208,
        "12365": 201,
        "12366": 16,
        "12367": 127,
        "12368": 188,
        "12369": 16,
        "12370": 38,
        "12371": 1,
        "12372": 52,
        "12373": 56,
        "12374": 19,
        "12375": 172,
        "12376": 54,
        "12377": 244,
        "12378": 159,
        "12379": 154,
        "12380": 187,
        "12381": 239,
        "12382": 117,
        "12383": 66,
        "12384": 157,
        "12385": 70,
        "12386": 214,
        "12387": 172,
        "12388": 207,
        "12389": 44,
        "12390": 23,
        "12391": 179,
        "12392": 90,
        "12393": 23,
        "12394": 225,
        "12395": 15,
        "12396": 187,
        "12397": 130,
        "12398": 99,
        "12399": 56,
        "12400": 224,
        "12401": 55,
        "12402": 190,
        "12403": 111,
        "12404": 182,
        "12405": 238,
        "12406": 100,
        "12407": 186,
        "12408": 61,
        "12409": 237,
        "12410": 129,
        "12411": 81,
        "12412": 145,
        "12413": 222,
        "12414": 33,
        "12415": 39,
        "12416": 99,
        "12417": 134,
        "12418": 27,
        "12419": 132,
        "12420": 21,
        "12421": 118,
        "12422": 12,
        "12423": 75,
        "12424": 111,
        "12425": 36,
        "12426": 9,
        "12427": 180,
        "12428": 15,
        "12429": 216,
        "12430": 224,
        "12431": 240,
        "12432": 70,
        "12433": 88,
        "12434": 82,
        "12435": 129,
        "12436": 85,
        "12437": 142,
        "12438": 39,
        "12439": 214,
        "12440": 51,
        "12441": 89,
        "12442": 67,
        "12443": 206,
        "12444": 211,
        "12445": 215,
        "12446": 34,
        "12447": 160,
        "12448": 149,
        "12449": 141,
        "12450": 119,
        "12451": 217,
        "12452": 179,
        "12453": 193,
        "12454": 139,
        "12455": 147,
        "12456": 104,
        "12457": 250,
        "12458": 69,
        "12459": 38,
        "12460": 231,
        "12461": 205,
        "12462": 102,
        "12463": 111,
        "12464": 1,
        "12465": 191,
        "12466": 18,
        "12467": 227,
        "12468": 105,
        "12469": 210,
        "12470": 81,
        "12471": 189,
        "12472": 197,
        "12473": 68,
        "12474": 82,
        "12475": 213,
        "12476": 200,
        "12477": 189,
        "12478": 95,
        "12479": 51,
        "12480": 79,
        "12481": 102,
        "12482": 197,
        "12483": 167,
        "12484": 38,
        "12485": 101,
        "12486": 201,
        "12487": 194,
        "12488": 223,
        "12489": 94,
        "12490": 3,
        "12491": 105,
        "12492": 214,
        "12493": 98,
        "12494": 170,
        "12495": 201,
        "12496": 69,
        "12497": 92,
        "12498": 236,
        "12499": 121,
        "12500": 72,
        "12501": 25,
        "12502": 84,
        "12503": 33,
        "12504": 150,
        "12505": 115,
        "12506": 205,
        "12507": 169,
        "12508": 144,
        "12509": 107,
        "12510": 135,
        "12511": 196,
        "12512": 111,
        "12513": 182,
        "12514": 118,
        "12515": 211,
        "12516": 114,
        "12517": 16,
        "12518": 198,
        "12519": 96,
        "12520": 233,
        "12521": 100,
        "12522": 54,
        "12523": 20,
        "12524": 46,
        "12525": 61,
        "12526": 6,
        "12527": 62,
        "12528": 8,
        "12529": 104,
        "12530": 55,
        "12531": 51,
        "12532": 89,
        "12533": 44,
        "12534": 164,
        "12535": 65,
        "12536": 112,
        "12537": 54,
        "12538": 194,
        "12539": 220,
        "12540": 32,
        "12541": 183,
        "12542": 156,
        "12543": 141,
        "12544": 197,
        "12545": 55,
        "12546": 188,
        "12547": 119,
        "12548": 227,
        "12549": 181,
        "12550": 145,
        "12551": 77,
        "12552": 165,
        "12553": 40,
        "12554": 142,
        "12555": 19,
        "12556": 238,
        "12557": 99,
        "12558": 24,
        "12559": 38,
        "12560": 181,
        "12561": 215,
        "12562": 193,
        "12563": 250,
        "12564": 135,
        "12565": 48,
        "12566": 230,
        "12567": 135,
        "12568": 137,
        "12569": 61,
        "12570": 125,
        "12571": 38,
        "12572": 168,
        "12573": 223,
        "12574": 229,
        "12575": 168,
        "12576": 18,
        "12577": 145,
        "12578": 152,
        "12579": 176,
        "12580": 16,
        "12581": 135,
        "12582": 148,
        "12583": 215,
        "12584": 230,
        "12585": 130,
        "12586": 191,
        "12587": 167,
        "12588": 90,
        "12589": 112,
        "12590": 79,
        "12591": 46,
        "12592": 33,
        "12593": 132,
        "12594": 234,
        "12595": 62,
        "12596": 84,
        "12597": 204,
        "12598": 20,
        "12599": 196,
        "12600": 73,
        "12601": 149,
        "12602": 154,
        "12603": 48,
        "12604": 206,
        "12605": 62,
        "12606": 192,
        "12607": 83,
        "12608": 223,
        "12609": 176,
        "12610": 96,
        "12611": 22,
        "12612": 96,
        "12613": 183,
        "12614": 198,
        "12615": 113,
        "12616": 37,
        "12617": 167,
        "12618": 131,
        "12619": 35,
        "12620": 59,
        "12621": 211,
        "12622": 249,
        "12623": 137,
        "12624": 202,
        "12625": 75,
        "12626": 225,
        "12627": 20,
        "12628": 10,
        "12629": 139,
        "12630": 25,
        "12631": 216,
        "12632": 215,
        "12633": 196,
        "12634": 234,
        "12635": 64,
        "12636": 28,
        "12637": 143,
        "12638": 43,
        "12639": 194,
        "12640": 57,
        "12641": 74,
        "12642": 34,
        "12643": 35,
        "12644": 125,
        "12645": 116,
        "12646": 41,
        "12647": 2,
        "12648": 131,
        "12649": 143,
        "12650": 247,
        "12651": 243,
        "12652": 135,
        "12653": 48,
        "12654": 88,
        "12655": 53,
        "12656": 225,
        "12657": 201,
        "12658": 151,
        "12659": 120,
        "12660": 46,
        "12661": 7,
        "12662": 70,
        "12663": 193,
        "12664": 251,
        "12665": 131,
        "12666": 252,
        "12667": 186,
        "12668": 146,
        "12669": 42,
        "12670": 212,
        "12671": 249,
        "12672": 169,
        "12673": 81,
        "12674": 15,
        "12675": 90,
        "12676": 209,
        "12677": 62,
        "12678": 32,
        "12679": 0,
        "12680": 182,
        "12681": 0,
        "12682": 102,
        "12683": 178,
        "12684": 254,
        "12685": 170,
        "12686": 193,
        "12687": 3,
        "12688": 41,
        "12689": 12,
        "12690": 39,
        "12691": 14,
        "12692": 167,
        "12693": 16,
        "12694": 59,
        "12695": 48,
        "12696": 160,
        "12697": 80,
        "12698": 3,
        "12699": 53,
        "12700": 202,
        "12701": 125,
        "12702": 226,
        "12703": 39,
        "12704": 197,
        "12705": 96,
        "12706": 15,
        "12707": 112,
        "12708": 21,
        "12709": 185,
        "12710": 34,
        "12711": 145,
        "12712": 44,
        "12713": 255,
        "12714": 5,
        "12715": 112,
        "12716": 232,
        "12717": 84,
        "12718": 41,
        "12719": 228,
        "12720": 64,
        "12721": 137,
        "12722": 140,
        "12723": 148,
        "12724": 179,
        "12725": 169,
        "12726": 115,
        "12727": 234,
        "12728": 73,
        "12729": 165,
        "12730": 41,
        "12731": 235,
        "12732": 196,
        "12733": 251,
        "12734": 242,
        "12735": 160,
        "12736": 109,
        "12737": 47,
        "12738": 99,
        "12739": 211,
        "12740": 183,
        "12741": 46,
        "12742": 206,
        "12743": 219,
        "12744": 62,
        "12745": 214,
        "12746": 202,
        "12747": 156,
        "12748": 148,
        "12749": 237,
        "12750": 254,
        "12751": 146,
        "12752": 193,
        "12753": 218,
        "12754": 56,
        "12755": 195,
        "12756": 3,
        "12757": 130,
        "12758": 16,
        "12759": 123,
        "12760": 33,
        "12761": 2,
        "12762": 65,
        "12763": 105,
        "12764": 133,
        "12765": 201,
        "12766": 252,
        "12767": 180,
        "12768": 19,
        "12769": 39,
        "12770": 110,
        "12771": 186,
        "12772": 135,
        "12773": 19,
        "12774": 174,
        "12775": 96,
        "12776": 211,
        "12777": 232,
        "12778": 236,
        "12779": 86,
        "12780": 15,
        "12781": 208,
        "12782": 57,
        "12783": 240,
        "12784": 55,
        "12785": 193,
        "12786": 6,
        "12787": 174,
        "12788": 170,
        "12789": 139,
        "12790": 94,
        "12791": 208,
        "12792": 143,
        "12793": 180,
        "12794": 220,
        "12795": 202,
        "12796": 1,
        "12797": 72,
        "12798": 230,
        "12799": 234,
        "12800": 177,
        "12801": 234,
        "12802": 30,
        "12803": 99,
        "12804": 201,
        "12805": 21,
        "12806": 209,
        "12807": 123,
        "12808": 166,
        "12809": 218,
        "12810": 145,
        "12811": 30,
        "12812": 118,
        "12813": 141,
        "12814": 75,
        "12815": 225,
        "12816": 248,
        "12817": 143,
        "12818": 234,
        "12819": 118,
        "12820": 67,
        "12821": 2,
        "12822": 159,
        "12823": 223,
        "12824": 98,
        "12825": 195,
        "12826": 66,
        "12827": 230,
        "12828": 104,
        "12829": 175,
        "12830": 217,
        "12831": 125,
        "12832": 41,
        "12833": 143,
        "12834": 255,
        "12835": 152,
        "12836": 207,
        "12837": 244,
        "12838": 21,
        "12839": 10,
        "12840": 153,
        "12841": 239,
        "12842": 148,
        "12843": 148,
        "12844": 177,
        "12845": 45,
        "12846": 46,
        "12847": 243,
        "12848": 104,
        "12849": 115,
        "12850": 144,
        "12851": 9,
        "12852": 202,
        "12853": 213,
        "12854": 194,
        "12855": 44,
        "12856": 168,
        "12857": 73,
        "12858": 202,
        "12859": 135,
        "12860": 240,
        "12861": 97,
        "12862": 182,
        "12863": 102,
        "12864": 35,
        "12865": 76,
        "12866": 107,
        "12867": 177,
        "12868": 59,
        "12869": 14,
        "12870": 139,
        "12871": 133,
        "12872": 238,
        "12873": 203,
        "12874": 229,
        "12875": 41,
        "12876": 6,
        "12877": 238,
        "12878": 85,
        "12879": 173,
        "12880": 98,
        "12881": 173,
        "12882": 183,
        "12883": 196,
        "12884": 125,
        "12885": 243,
        "12886": 52,
        "12887": 49,
        "12888": 137,
        "12889": 133,
        "12890": 24,
        "12891": 238,
        "12892": 126,
        "12893": 21,
        "12894": 105,
        "12895": 6,
        "12896": 98,
        "12897": 183,
        "12898": 23,
        "12899": 82,
        "12900": 154,
        "12901": 4,
        "12902": 47,
        "12903": 243,
        "12904": 133,
        "12905": 214,
        "12906": 78,
        "12907": 174,
        "12908": 34,
        "12909": 160,
        "12910": 231,
        "12911": 238,
        "12912": 61,
        "12913": 22,
        "12914": 232,
        "12915": 49,
        "12916": 88,
        "12917": 53,
        "12918": 246,
        "12919": 204,
        "12920": 130,
        "12921": 127,
        "12922": 143,
        "12923": 48,
        "12924": 170,
        "12925": 205,
        "12926": 125,
        "12927": 18,
        "12928": 46,
        "12929": 7,
        "12930": 63,
        "12931": 5,
        "12932": 179,
        "12933": 173,
        "12934": 102,
        "12935": 64,
        "12936": 201,
        "12937": 250,
        "12938": 106,
        "12939": 181,
        "12940": 32,
        "12941": 59,
        "12942": 82,
        "12943": 213,
        "12944": 9,
        "12945": 124,
        "12946": 34,
        "12947": 19,
        "12948": 126,
        "12949": 30,
        "12950": 189,
        "12951": 213,
        "12952": 217,
        "12953": 50,
        "12954": 24,
        "12955": 144,
        "12956": 222,
        "12957": 222,
        "12958": 196,
        "12959": 211,
        "12960": 23,
        "12961": 249,
        "12962": 246,
        "12963": 109,
        "12964": 1,
        "12965": 103,
        "12966": 131,
        "12967": 212,
        "12968": 30,
        "12969": 205,
        "12970": 32,
        "12971": 246,
        "12972": 80,
        "12973": 147,
        "12974": 225,
        "12975": 248,
        "12976": 222,
        "12977": 61,
        "12978": 5,
        "12979": 48,
        "12980": 231,
        "12981": 65,
        "12982": 86,
        "12983": 186,
        "12984": 121,
        "12985": 190,
        "12986": 228,
        "12987": 160,
        "12988": 5,
        "12989": 47,
        "12990": 157,
        "12991": 178,
        "12992": 186,
        "12993": 123,
        "12994": 33,
        "12995": 39,
        "12996": 93,
        "12997": 25,
        "12998": 178,
        "12999": 173,
        "13000": 40,
        "13001": 197,
        "13002": 207,
        "13003": 11,
        "13004": 192,
        "13005": 101,
        "13006": 242,
        "13007": 212,
        "13008": 89,
        "13009": 51,
        "13010": 159,
        "13011": 94,
        "13012": 225,
        "13013": 120,
        "13014": 116,
        "13015": 222,
        "13016": 99,
        "13017": 114,
        "13018": 167,
        "13019": 36,
        "13020": 4,
        "13021": 191,
        "13022": 204,
        "13023": 138,
        "13024": 252,
        "13025": 96,
        "13026": 229,
        "13027": 186,
        "13028": 32,
        "13029": 76,
        "13030": 204,
        "13031": 56,
        "13032": 211,
        "13033": 212,
        "13034": 116,
        "13035": 93,
        "13036": 154,
        "13037": 156,
        "13038": 168,
        "13039": 81,
        "13040": 180,
        "13041": 235,
        "13042": 188,
        "13043": 151,
        "13044": 101,
        "13045": 76,
        "13046": 168,
        "13047": 91,
        "13048": 204,
        "13049": 237,
        "13050": 44,
        "13051": 235,
        "13052": 40,
        "13053": 231,
        "13054": 178,
        "13055": 149,
        "13056": 145,
        "13057": 135,
        "13058": 113,
        "13059": 232,
        "13060": 187,
        "13061": 205,
        "13062": 132,
        "13063": 114,
        "13064": 178,
        "13065": 171,
        "13066": 202,
        "13067": 182,
        "13068": 216,
        "13069": 223,
        "13070": 169,
        "13071": 26,
        "13072": 68,
        "13073": 18,
        "13074": 158,
        "13075": 94,
        "13076": 219,
        "13077": 112,
        "13078": 186,
        "13079": 99,
        "13080": 24,
        "13081": 136,
        "13082": 86,
        "13083": 71,
        "13084": 77,
        "13085": 136,
        "13086": 242,
        "13087": 203,
        "13088": 1,
        "13089": 62,
        "13090": 19,
        "13091": 45,
        "13092": 152,
        "13093": 145,
        "13094": 90,
        "13095": 23,
        "13096": 200,
        "13097": 38,
        "13098": 124,
        "13099": 136,
        "13100": 111,
        "13101": 49,
        "13102": 204,
        "13103": 82,
        "13104": 18,
        "13105": 237,
        "13106": 4,
        "13107": 221,
        "13108": 46,
        "13109": 7,
        "13110": 175,
        "13111": 173,
        "13112": 170,
        "13113": 133,
        "13114": 220,
        "13115": 64,
        "13116": 96,
        "13117": 112,
        "13118": 33,
        "13119": 83,
        "13120": 39,
        "13121": 163,
        "13122": 179,
        "13123": 93,
        "13124": 218,
        "13125": 198,
        "13126": 99,
        "13127": 166,
        "13128": 58,
        "13129": 55,
        "13130": 114,
        "13131": 57,
        "13132": 8,
        "13133": 18,
        "13134": 4,
        "13135": 1,
        "13136": 55,
        "13137": 152,
        "13138": 167,
        "13139": 101,
        "13140": 157,
        "13141": 40,
        "13142": 230,
        "13143": 86,
        "13144": 230,
        "13145": 165,
        "13146": 65,
        "13147": 18,
        "13148": 6,
        "13149": 4,
        "13150": 11,
        "13151": 132,
        "13152": 63,
        "13153": 201,
        "13154": 137,
        "13155": 15,
        "13156": 8,
        "13157": 93,
        "13158": 229,
        "13159": 253,
        "13160": 108,
        "13161": 96,
        "13162": 47,
        "13163": 189,
        "13164": 78,
        "13165": 228,
        "13166": 42,
        "13167": 13,
        "13168": 128,
        "13169": 214,
        "13170": 229,
        "13171": 167,
        "13172": 23,
        "13173": 240,
        "13174": 89,
        "13175": 183,
        "13176": 45,
        "13177": 199,
        "13178": 39,
        "13179": 90,
        "13180": 44,
        "13181": 102,
        "13182": 254,
        "13183": 161,
        "13184": 233,
        "13185": 105,
        "13186": 147,
        "13187": 126,
        "13188": 167,
        "13189": 221,
        "13190": 106,
        "13191": 201,
        "13192": 146,
        "13193": 42,
        "13194": 209,
        "13195": 242,
        "13196": 206,
        "13197": 146,
        "13198": 98,
        "13199": 95,
        "13200": 166,
        "13201": 223,
        "13202": 10,
        "13203": 179,
        "13204": 251,
        "13205": 2,
        "13206": 171,
        "13207": 16,
        "13208": 91,
        "13209": 145,
        "13210": 168,
        "13211": 115,
        "13212": 155,
        "13213": 223,
        "13214": 56,
        "13215": 240,
        "13216": 101,
        "13217": 209,
        "13218": 247,
        "13219": 112,
        "13220": 158,
        "13221": 31,
        "13222": 160,
        "13223": 51,
        "13224": 134,
        "13225": 142,
        "13226": 250,
        "13227": 152,
        "13228": 95,
        "13229": 101,
        "13230": 27,
        "13231": 29,
        "13232": 141,
        "13233": 11,
        "13234": 128,
        "13235": 11,
        "13236": 169,
        "13237": 221,
        "13238": 37,
        "13239": 238,
        "13240": 82,
        "13241": 57,
        "13242": 33,
        "13243": 88,
        "13244": 220,
        "13245": 113,
        "13246": 180,
        "13247": 217,
        "13248": 33,
        "13249": 179,
        "13250": 202,
        "13251": 217,
        "13252": 54,
        "13253": 76,
        "13254": 200,
        "13255": 98,
        "13256": 107,
        "13257": 189,
        "13258": 1,
        "13259": 62,
        "13260": 33,
        "13261": 247,
        "13262": 49,
        "13263": 41,
        "13264": 244,
        "13265": 106,
        "13266": 138,
        "13267": 47,
        "13268": 208,
        "13269": 178,
        "13270": 113,
        "13271": 249,
        "13272": 177,
        "13273": 140,
        "13274": 195,
        "13275": 103,
        "13276": 254,
        "13277": 198,
        "13278": 172,
        "13279": 168,
        "13280": 4,
        "13281": 23,
        "13282": 83,
        "13283": 183,
        "13284": 85,
        "13285": 13,
        "13286": 114,
        "13287": 46,
        "13288": 171,
        "13289": 0,
        "13290": 96,
        "13291": 0,
        "13292": 195,
        "13293": 24,
        "13294": 234,
        "13295": 29,
        "13296": 97,
        "13297": 240,
        "13298": 187,
        "13299": 21,
        "13300": 73,
        "13301": 210,
        "13302": 176,
        "13303": 217,
        "13304": 194,
        "13305": 177,
        "13306": 66,
        "13307": 115,
        "13308": 87,
        "13309": 82,
        "13310": 187,
        "13311": 85,
        "13312": 73,
        "13313": 158,
        "13314": 192,
        "13315": 208,
        "13316": 202,
        "13317": 209,
        "13318": 51,
        "13319": 208,
        "13320": 216,
        "13321": 125,
        "13322": 85,
        "13323": 223,
        "13324": 75,
        "13325": 23,
        "13326": 223,
        "13327": 87,
        "13328": 133,
        "13329": 152,
        "13330": 205,
        "13331": 26,
        "13332": 172,
        "13333": 29,
        "13334": 20,
        "13335": 54,
        "13336": 75,
        "13337": 109,
        "13338": 46,
        "13339": 37,
        "13340": 144,
        "13341": 187,
        "13342": 178,
        "13343": 51,
        "13344": 96,
        "13345": 87,
        "13346": 204,
        "13347": 115,
        "13348": 117,
        "13349": 6,
        "13350": 201,
        "13351": 76,
        "13352": 1,
        "13353": 79,
        "13354": 160,
        "13355": 129,
        "13356": 89,
        "13357": 64,
        "13358": 225,
        "13359": 200,
        "13360": 175,
        "13361": 32,
        "13362": 186,
        "13363": 83,
        "13364": 35,
        "13365": 213,
        "13366": 121,
        "13367": 159,
        "13368": 161,
        "13369": 102,
        "13370": 52,
        "13371": 127,
        "13372": 32,
        "13373": 74,
        "13374": 125,
        "13375": 40,
        "13376": 15,
        "13377": 179,
        "13378": 231,
        "13379": 220,
        "13380": 164,
        "13381": 134,
        "13382": 135,
        "13383": 127,
        "13384": 169,
        "13385": 223,
        "13386": 235,
        "13387": 96,
        "13388": 110,
        "13389": 229,
        "13390": 186,
        "13391": 29,
        "13392": 227,
        "13393": 174,
        "13394": 113,
        "13395": 56,
        "13396": 236,
        "13397": 187,
        "13398": 158,
        "13399": 87,
        "13400": 82,
        "13401": 122,
        "13402": 217,
        "13403": 215,
        "13404": 168,
        "13405": 151,
        "13406": 26,
        "13407": 16,
        "13408": 242,
        "13409": 8,
        "13410": 69,
        "13411": 10,
        "13412": 12,
        "13413": 122,
        "13414": 195,
        "13415": 179,
        "13416": 23,
        "13417": 178,
        "13418": 1,
        "13419": 207,
        "13420": 215,
        "13421": 184,
        "13422": 255,
        "13423": 220,
        "13424": 16,
        "13425": 253,
        "13426": 188,
        "13427": 115,
        "13428": 36,
        "13429": 132,
        "13430": 253,
        "13431": 96,
        "13432": 214,
        "13433": 191,
        "13434": 51,
        "13435": 82,
        "13436": 159,
        "13437": 70,
        "13438": 51,
        "13439": 5,
        "13440": 49,
        "13441": 161,
        "13442": 235,
        "13443": 114,
        "13444": 91,
        "13445": 202,
        "13446": 191,
        "13447": 69,
        "13448": 133,
        "13449": 199,
        "13450": 18,
        "13451": 197,
        "13452": 182,
        "13453": 239,
        "13454": 186,
        "13455": 43,
        "13456": 146,
        "13457": 195,
        "13458": 126,
        "13459": 84,
        "13460": 151,
        "13461": 185,
        "13462": 202,
        "13463": 220,
        "13464": 151,
        "13465": 50,
        "13466": 161,
        "13467": 253,
        "13468": 143,
        "13469": 138,
        "13470": 244,
        "13471": 128,
        "13472": 36,
        "13473": 36,
        "13474": 152,
        "13475": 211,
        "13476": 134,
        "13477": 255,
        "13478": 67,
        "13479": 124,
        "13480": 67,
        "13481": 194,
        "13482": 95,
        "13483": 2,
        "13484": 232,
        "13485": 222,
        "13486": 95,
        "13487": 178,
        "13488": 26,
        "13489": 14,
        "13490": 253,
        "13491": 144,
        "13492": 84,
        "13493": 54,
        "13494": 212,
        "13495": 165,
        "13496": 136,
        "13497": 110,
        "13498": 144,
        "13499": 11,
        "13500": 103,
        "13501": 61,
        "13502": 198,
        "13503": 168,
        "13504": 161,
        "13505": 205,
        "13506": 129,
        "13507": 172,
        "13508": 46,
        "13509": 200,
        "13510": 110,
        "13511": 37,
        "13512": 56,
        "13513": 92,
        "13514": 250,
        "13515": 8,
        "13516": 85,
        "13517": 135,
        "13518": 174,
        "13519": 11,
        "13520": 146,
        "13521": 128,
        "13522": 200,
        "13523": 3,
        "13524": 56,
        "13525": 50,
        "13526": 101,
        "13527": 155,
        "13528": 228,
        "13529": 98,
        "13530": 102,
        "13531": 192,
        "13532": 74,
        "13533": 230,
        "13534": 22,
        "13535": 131,
        "13536": 209,
        "13537": 35,
        "13538": 154,
        "13539": 115,
        "13540": 203,
        "13541": 122,
        "13542": 125,
        "13543": 4,
        "13544": 72,
        "13545": 201,
        "13546": 12,
        "13547": 221,
        "13548": 95,
        "13549": 44,
        "13550": 240,
        "13551": 123,
        "13552": 128,
        "13553": 119,
        "13554": 231,
        "13555": 88,
        "13556": 235,
        "13557": 191,
        "13558": 174,
        "13559": 26,
        "13560": 53,
        "13561": 24,
        "13562": 57,
        "13563": 174,
        "13564": 128,
        "13565": 51,
        "13566": 34,
        "13567": 118,
        "13568": 227,
        "13569": 61,
        "13570": 186,
        "13571": 41,
        "13572": 105,
        "13573": 228,
        "13574": 213,
        "13575": 91,
        "13576": 38,
        "13577": 135,
        "13578": 166,
        "13579": 116,
        "13580": 156,
        "13581": 200,
        "13582": 149,
        "13583": 171,
        "13584": 125,
        "13585": 110,
        "13586": 5,
        "13587": 135,
        "13588": 41,
        "13589": 79,
        "13590": 125,
        "13591": 73,
        "13592": 43,
        "13593": 222,
        "13594": 70,
        "13595": 250,
        "13596": 33,
        "13597": 9,
        "13598": 232,
        "13599": 105,
        "13600": 34,
        "13601": 156,
        "13602": 16,
        "13603": 46,
        "13604": 245,
        "13605": 192,
        "13606": 12,
        "13607": 13,
        "13608": 5,
        "13609": 253,
        "13610": 24,
        "13611": 159,
        "13612": 143,
        "13613": 41,
        "13614": 8,
        "13615": 211,
        "13616": 148,
        "13617": 201,
        "13618": 44,
        "13619": 21,
        "13620": 30,
        "13621": 59,
        "13622": 180,
        "13623": 116,
        "13624": 161,
        "13625": 38,
        "13626": 71,
        "13627": 69,
        "13628": 43,
        "13629": 25,
        "13630": 139,
        "13631": 112,
        "13632": 108,
        "13633": 224,
        "13634": 64,
        "13635": 237,
        "13636": 137,
        "13637": 244,
        "13638": 121,
        "13639": 215,
        "13640": 87,
        "13641": 116,
        "13642": 21,
        "13643": 109,
        "13644": 158,
        "13645": 41,
        "13646": 214,
        "13647": 88,
        "13648": 118,
        "13649": 89,
        "13650": 86,
        "13651": 9,
        "13652": 168,
        "13653": 133,
        "13654": 100,
        "13655": 34,
        "13656": 246,
        "13657": 245,
        "13658": 33,
        "13659": 66,
        "13660": 236,
        "13661": 107,
        "13662": 137,
        "13663": 37,
        "13664": 44,
        "13665": 61,
        "13666": 4,
        "13667": 235,
        "13668": 224,
        "13669": 230,
        "13670": 111,
        "13671": 254,
        "13672": 180,
        "13673": 128,
        "13674": 166,
        "13675": 180,
        "13676": 13,
        "13677": 177,
        "13678": 248,
        "13679": 125,
        "13680": 167,
        "13681": 237,
        "13682": 142,
        "13683": 179,
        "13684": 221,
        "13685": 16,
        "13686": 22,
        "13687": 4,
        "13688": 12,
        "13689": 2,
        "13690": 64,
        "13691": 188,
        "13692": 176,
        "13693": 6,
        "13694": 80,
        "13695": 32,
        "13696": 246,
        "13697": 249,
        "13698": 94,
        "13699": 206,
        "13700": 48,
        "13701": 222,
        "13702": 143,
        "13703": 179,
        "13704": 226,
        "13705": 135,
        "13706": 91,
        "13707": 37,
        "13708": 158,
        "13709": 159,
        "13710": 112,
        "13711": 47,
        "13712": 102,
        "13713": 53,
        "13714": 237,
        "13715": 191,
        "13716": 92,
        "13717": 141,
        "13718": 238,
        "13719": 207,
        "13720": 82,
        "13721": 80,
        "13722": 178,
        "13723": 148,
        "13724": 134,
        "13725": 50,
        "13726": 60,
        "13727": 222,
        "13728": 245,
        "13729": 78,
        "13730": 107,
        "13731": 211,
        "13732": 30,
        "13733": 142,
        "13734": 74,
        "13735": 50,
        "13736": 17,
        "13737": 213,
        "13738": 154,
        "13739": 239,
        "13740": 42,
        "13741": 1,
        "13742": 222,
        "13743": 234,
        "13744": 18,
        "13745": 87,
        "13746": 254,
        "13747": 6,
        "13748": 37,
        "13749": 9,
        "13750": 29,
        "13751": 95,
        "13752": 107,
        "13753": 144,
        "13754": 64,
        "13755": 28,
        "13756": 172,
        "13757": 233,
        "13758": 252,
        "13759": 81,
        "13760": 199,
        "13761": 219,
        "13762": 236,
        "13763": 157,
        "13764": 40,
        "13765": 29,
        "13766": 116,
        "13767": 50,
        "13768": 202,
        "13769": 132,
        "13770": 129,
        "13771": 193,
        "13772": 183,
        "13773": 115,
        "13774": 169,
        "13775": 63,
        "13776": 6,
        "13777": 21,
        "13778": 116,
        "13779": 65,
        "13780": 57,
        "13781": 195,
        "13782": 202,
        "13783": 144,
        "13784": 100,
        "13785": 168,
        "13786": 51,
        "13787": 56,
        "13788": 239,
        "13789": 254,
        "13790": 172,
        "13791": 157,
        "13792": 115,
        "13793": 41,
        "13794": 246,
        "13795": 21,
        "13796": 97,
        "13797": 28,
        "13798": 198,
        "13799": 115,
        "13800": 104,
        "13801": 176,
        "13802": 101,
        "13803": 251,
        "13804": 145,
        "13805": 16,
        "13806": 53,
        "13807": 171,
        "13808": 240,
        "13809": 173,
        "13810": 218,
        "13811": 171,
        "13812": 35,
        "13813": 107,
        "13814": 221,
        "13815": 219,
        "13816": 53,
        "13817": 245,
        "13818": 133,
        "13819": 65,
        "13820": 195,
        "13821": 62,
        "13822": 139,
        "13823": 61,
        "13824": 29,
        "13825": 90,
        "13826": 120,
        "13827": 50,
        "13828": 183,
        "13829": 120,
        "13830": 245,
        "13831": 116,
        "13832": 111,
        "13833": 128,
        "13834": 109,
        "13835": 68,
        "13836": 173,
        "13837": 66,
        "13838": 118,
        "13839": 10,
        "13840": 72,
        "13841": 202,
        "13842": 148,
        "13843": 237,
        "13844": 11,
        "13845": 83,
        "13846": 214,
        "13847": 100,
        "13848": 246,
        "13849": 40,
        "13850": 198,
        "13851": 124,
        "13852": 166,
        "13853": 87,
        "13854": 31,
        "13855": 248,
        "13856": 152,
        "13857": 58,
        "13858": 56,
        "13859": 58,
        "13860": 67,
        "13861": 86,
        "13862": 130,
        "13863": 115,
        "13864": 35,
        "13865": 125,
        "13866": 171,
        "13867": 215,
        "13868": 138,
        "13869": 93,
        "13870": 4,
        "13871": 116,
        "13872": 99,
        "13873": 49,
        "13874": 102,
        "13875": 146,
        "13876": 109,
        "13877": 225,
        "13878": 39,
        "13879": 43,
        "13880": 94,
        "13881": 4,
        "13882": 137,
        "13883": 130,
        "13884": 151,
        "13885": 246,
        "13886": 204,
        "13887": 60,
        "13888": 202,
        "13889": 45,
        "13890": 250,
        "13891": 91,
        "13892": 60,
        "13893": 91,
        "13894": 255,
        "13895": 111,
        "13896": 111,
        "13897": 78,
        "13898": 100,
        "13899": 212,
        "13900": 108,
        "13901": 253,
        "13902": 192,
        "13903": 255,
        "13904": 245,
        "13905": 92,
        "13906": 195,
        "13907": 1,
        "13908": 66,
        "13909": 62,
        "13910": 70,
        "13911": 4,
        "13912": 89,
        "13913": 222,
        "13914": 195,
        "13915": 107,
        "13916": 198,
        "13917": 119,
        "13918": 255,
        "13919": 171,
        "13920": 155,
        "13921": 88,
        "13922": 225,
        "13923": 170,
        "13924": 12,
        "13925": 8,
        "13926": 144,
        "13927": 146,
        "13928": 228,
        "13929": 151,
        "13930": 143,
        "13931": 51,
        "13932": 104,
        "13933": 50,
        "13934": 7,
        "13935": 48,
        "13936": 44,
        "13937": 228,
        "13938": 100,
        "13939": 105,
        "13940": 85,
        "13941": 156,
        "13942": 140,
        "13943": 145,
        "13944": 53,
        "13945": 79,
        "13946": 162,
        "13947": 232,
        "13948": 218,
        "13949": 187,
        "13950": 93,
        "13951": 124,
        "13952": 249,
        "13953": 17,
        "13954": 151,
        "13955": 129,
        "13956": 180,
        "13957": 98,
        "13958": 173,
        "13959": 1,
        "13960": 79,
        "13961": 51,
        "13962": 5,
        "13963": 131,
        "13964": 248,
        "13965": 143,
        "13966": 153,
        "13967": 206,
        "13968": 111,
        "13969": 94,
        "13970": 253,
        "13971": 148,
        "13972": 31,
        "13973": 55,
        "13974": 184,
        "13975": 238,
        "13976": 95,
        "13977": 130,
        "13978": 245,
        "13979": 75,
        "13980": 203,
        "13981": 74,
        "13982": 51,
        "13983": 66,
        "13984": 215,
        "13985": 114,
        "13986": 102,
        "13987": 79,
        "13988": 152,
        "13989": 169,
        "13990": 130,
        "13991": 9,
        "13992": 117,
        "13993": 80,
        "13994": 168,
        "13995": 242,
        "13996": 84,
        "13997": 37,
        "13998": 211,
        "13999": 254,
        "14000": 130,
        "14001": 72,
        "14002": 184,
        "14003": 51,
        "14004": 159,
        "14005": 160,
        "14006": 101,
        "14007": 197,
        "14008": 113,
        "14009": 215,
        "14010": 174,
        "14011": 235,
        "14012": 7,
        "14013": 192,
        "14014": 160,
        "14015": 225,
        "14016": 40,
        "14017": 149,
        "14018": 241,
        "14019": 78,
        "14020": 152,
        "14021": 244,
        "14022": 4,
        "14023": 251,
        "14024": 188,
        "14025": 81,
        "14026": 84,
        "14027": 108,
        "14028": 180,
        "14029": 211,
        "14030": 107,
        "14031": 98,
        "14032": 171,
        "14033": 207,
        "14034": 65,
        "14035": 43,
        "14036": 241,
        "14037": 108,
        "14038": 225,
        "14039": 98,
        "14040": 184,
        "14041": 27,
        "14042": 62,
        "14043": 122,
        "14044": 147,
        "14045": 239,
        "14046": 30,
        "14047": 251,
        "14048": 178,
        "14049": 129,
        "14050": 155,
        "14051": 32,
        "14052": 240,
        "14053": 68,
        "14054": 102,
        "14055": 60,
        "14056": 68,
        "14057": 150,
        "14058": 197,
        "14059": 129,
        "14060": 132,
        "14061": 126,
        "14062": 213,
        "14063": 27,
        "14064": 190,
        "14065": 22,
        "14066": 80,
        "14067": 71,
        "14068": 214,
        "14069": 207,
        "14070": 20,
        "14071": 16,
        "14072": 63,
        "14073": 240,
        "14074": 1,
        "14075": 88,
        "14076": 133,
        "14077": 92,
        "14078": 163,
        "14079": 76,
        "14080": 213,
        "14081": 123,
        "14082": 136,
        "14083": 0,
        "14084": 230,
        "14085": 57,
        "14086": 7,
        "14087": 200,
        "14088": 16,
        "14089": 94,
        "14090": 5,
        "14091": 4,
        "14092": 124,
        "14093": 168,
        "14094": 13,
        "14095": 236,
        "14096": 174,
        "14097": 93,
        "14098": 220,
        "14099": 78,
        "14100": 119,
        "14101": 108,
        "14102": 140,
        "14103": 133,
        "14104": 13,
        "14105": 158,
        "14106": 20,
        "14107": 90,
        "14108": 187,
        "14109": 168,
        "14110": 137,
        "14111": 235,
        "14112": 118,
        "14113": 150,
        "14114": 140,
        "14115": 154,
        "14116": 46,
        "14117": 104,
        "14118": 173,
        "14119": 198,
        "14120": 215,
        "14121": 217,
        "14122": 238,
        "14123": 151,
        "14124": 82,
        "14125": 240,
        "14126": 44,
        "14127": 152,
        "14128": 177,
        "14129": 126,
        "14130": 77,
        "14131": 51,
        "14132": 158,
        "14133": 250,
        "14134": 242,
        "14135": 128,
        "14136": 194,
        "14137": 142,
        "14138": 171,
        "14139": 153,
        "14140": 216,
        "14141": 143,
        "14142": 148,
        "14143": 242,
        "14144": 47,
        "14145": 160,
        "14146": 100,
        "14147": 156,
        "14148": 107,
        "14149": 57,
        "14150": 4,
        "14151": 172,
        "14152": 50,
        "14153": 108,
        "14154": 98,
        "14155": 143,
        "14156": 20,
        "14157": 208,
        "14158": 144,
        "14159": 6,
        "14160": 83,
        "14161": 20,
        "14162": 48,
        "14163": 135,
        "14164": 219,
        "14165": 135,
        "14166": 12,
        "14167": 95,
        "14168": 178,
        "14169": 44,
        "14170": 240,
        "14171": 134,
        "14172": 162,
        "14173": 56,
        "14174": 163,
        "14175": 112,
        "14176": 32,
        "14177": 120,
        "14178": 217,
        "14179": 16,
        "14180": 182,
        "14181": 157,
        "14182": 37,
        "14183": 61,
        "14184": 246,
        "14185": 28,
        "14186": 179,
        "14187": 97,
        "14188": 124,
        "14189": 205,
        "14190": 86,
        "14191": 10,
        "14192": 153,
        "14193": 71,
        "14194": 62,
        "14195": 46,
        "14196": 233,
        "14197": 76,
        "14198": 212,
        "14199": 72,
        "14200": 33,
        "14201": 246,
        "14202": 46,
        "14203": 57,
        "14204": 146,
        "14205": 180,
        "14206": 213,
        "14207": 30,
        "14208": 255,
        "14209": 81,
        "14210": 195,
        "14211": 107,
        "14212": 86,
        "14213": 249,
        "14214": 202,
        "14215": 59,
        "14216": 51,
        "14217": 247,
        "14218": 239,
        "14219": 161,
        "14220": 46,
        "14221": 13,
        "14222": 24,
        "14223": 209,
        "14224": 230,
        "14225": 93,
        "14226": 23,
        "14227": 169,
        "14228": 46,
        "14229": 44,
        "14230": 101,
        "14231": 16,
        "14232": 177,
        "14233": 72,
        "14234": 208,
        "14235": 17,
        "14236": 247,
        "14237": 131,
        "14238": 224,
        "14239": 205,
        "14240": 85,
        "14241": 33,
        "14242": 159,
        "14243": 30,
        "14244": 196,
        "14245": 84,
        "14246": 249,
        "14247": 147,
        "14248": 70,
        "14249": 99,
        "14250": 211,
        "14251": 95,
        "14252": 47,
        "14253": 90,
        "14254": 252,
        "14255": 154,
        "14256": 113,
        "14257": 249,
        "14258": 194,
        "14259": 58,
        "14260": 223,
        "14261": 6,
        "14262": 44,
        "14263": 251,
        "14264": 97,
        "14265": 173,
        "14266": 147,
        "14267": 52,
        "14268": 93,
        "14269": 201,
        "14270": 222,
        "14271": 150,
        "14272": 240,
        "14273": 177,
        "14274": 24,
        "14275": 40,
        "14276": 249,
        "14277": 64,
        "14278": 227,
        "14279": 113,
        "14280": 5,
        "14281": 75,
        "14282": 246,
        "14283": 242,
        "14284": 30,
        "14285": 83,
        "14286": 107,
        "14287": 244,
        "14288": 108,
        "14289": 108,
        "14290": 28,
        "14291": 148,
        "14292": 167,
        "14293": 221,
        "14294": 253,
        "14295": 78,
        "14296": 97,
        "14297": 17,
        "14298": 119,
        "14299": 138,
        "14300": 174,
        "14301": 254,
        "14302": 177,
        "14303": 59,
        "14304": 89,
        "14305": 232,
        "14306": 156,
        "14307": 206,
        "14308": 43,
        "14309": 147,
        "14310": 212,
        "14311": 132,
        "14312": 116,
        "14313": 161,
        "14314": 255,
        "14315": 78,
        "14316": 127,
        "14317": 117,
        "14318": 197,
        "14319": 92,
        "14320": 108,
        "14321": 94,
        "14322": 96,
        "14323": 174,
        "14324": 137,
        "14325": 75,
        "14326": 30,
        "14327": 66,
        "14328": 96,
        "14329": 63,
        "14330": 161,
        "14331": 1,
        "14332": 112,
        "14333": 104,
        "14334": 68,
        "14335": 193,
        "14336": 121,
        "14337": 145,
        "14338": 129,
        "14339": 211,
        "14340": 221,
        "14341": 138,
        "14342": 21,
        "14343": 113,
        "14344": 203,
        "14345": 47,
        "14346": 34,
        "14347": 121,
        "14348": 213,
        "14349": 104,
        "14350": 52,
        "14351": 26,
        "14352": 2,
        "14353": 38,
        "14354": 234,
        "14355": 128,
        "14356": 15,
        "14357": 40,
        "14358": 123,
        "14359": 92,
        "14360": 173,
        "14361": 22,
        "14362": 15,
        "14363": 246,
        "14364": 66,
        "14365": 9,
        "14366": 3,
        "14367": 43,
        "14368": 74,
        "14369": 48,
        "14370": 126,
        "14371": 69,
        "14372": 5,
        "14373": 88,
        "14374": 155,
        "14375": 238,
        "14376": 232,
        "14377": 17,
        "14378": 13,
        "14379": 189,
        "14380": 157,
        "14381": 221,
        "14382": 230,
        "14383": 115,
        "14384": 16,
        "14385": 210,
        "14386": 100,
        "14387": 56,
        "14388": 180,
        "14389": 33,
        "14390": 212,
        "14391": 42,
        "14392": 124,
        "14393": 208,
        "14394": 0,
        "14395": 46,
        "14396": 229,
        "14397": 98,
        "14398": 111,
        "14399": 116,
        "14400": 89,
        "14401": 212,
        "14402": 215,
        "14403": 0,
        "14404": 170,
        "14405": 27,
        "14406": 252,
        "14407": 236,
        "14408": 20,
        "14409": 254,
        "14410": 54,
        "14411": 217,
        "14412": 38,
        "14413": 195,
        "14414": 148,
        "14415": 93,
        "14416": 234,
        "14417": 139,
        "14418": 6,
        "14419": 34,
        "14420": 1,
        "14421": 91,
        "14422": 251,
        "14423": 178,
        "14424": 237,
        "14425": 30,
        "14426": 130,
        "14427": 89,
        "14428": 36,
        "14429": 208,
        "14430": 66,
        "14431": 141,
        "14432": 6,
        "14433": 97,
        "14434": 129,
        "14435": 182,
        "14436": 168,
        "14437": 151,
        "14438": 137,
        "14439": 29,
        "14440": 253,
        "14441": 180,
        "14442": 203,
        "14443": 188,
        "14444": 224,
        "14445": 70,
        "14446": 217,
        "14447": 62,
        "14448": 54,
        "14449": 88,
        "14450": 165,
        "14451": 99,
        "14452": 118,
        "14453": 207,
        "14454": 182,
        "14455": 59,
        "14456": 180,
        "14457": 178,
        "14458": 27,
        "14459": 62,
        "14460": 111,
        "14461": 148,
        "14462": 240,
        "14463": 241,
        "14464": 234,
        "14465": 194,
        "14466": 26,
        "14467": 182,
        "14468": 60,
        "14469": 231,
        "14470": 223,
        "14471": 63,
        "14472": 156,
        "14473": 58,
        "14474": 83,
        "14475": 88,
        "14476": 157,
        "14477": 122,
        "14478": 50,
        "14479": 42,
        "14480": 216,
        "14481": 163,
        "14482": 78,
        "14483": 181,
        "14484": 161,
        "14485": 238,
        "14486": 248,
        "14487": 98,
        "14488": 176,
        "14489": 113,
        "14490": 157,
        "14491": 37,
        "14492": 105,
        "14493": 38,
        "14494": 231,
        "14495": 81,
        "14496": 196,
        "14497": 158,
        "14498": 201,
        "14499": 166,
        "14500": 172,
        "14501": 234,
        "14502": 59,
        "14503": 102,
        "14504": 173,
        "14505": 164,
        "14506": 22,
        "14507": 185,
        "14508": 46,
        "14509": 32,
        "14510": 55,
        "14511": 223,
        "14512": 65,
        "14513": 189,
        "14514": 226,
        "14515": 51,
        "14516": 3,
        "14517": 243,
        "14518": 40,
        "14519": 219,
        "14520": 159,
        "14521": 59,
        "14522": 102,
        "14523": 45,
        "14524": 110,
        "14525": 33,
        "14526": 176,
        "14527": 98,
        "14528": 150,
        "14529": 21,
        "14530": 200,
        "14531": 197,
        "14532": 159,
        "14533": 52,
        "14534": 134,
        "14535": 88,
        "14536": 213,
        "14537": 127,
        "14538": 35,
        "14539": 181,
        "14540": 79,
        "14541": 157,
        "14542": 102,
        "14543": 101,
        "14544": 181,
        "14545": 9,
        "14546": 224,
        "14547": 239,
        "14548": 117,
        "14549": 195,
        "14550": 203,
        "14551": 120,
        "14552": 30,
        "14553": 59,
        "14554": 70,
        "14555": 220,
        "14556": 179,
        "14557": 175,
        "14558": 250,
        "14559": 23,
        "14560": 181,
        "14561": 170,
        "14562": 37,
        "14563": 147,
        "14564": 152,
        "14565": 11,
        "14566": 31,
        "14567": 36,
        "14568": 34,
        "14569": 144,
        "14570": 187,
        "14571": 144,
        "14572": 62,
        "14573": 168,
        "14574": 4,
        "14575": 35,
        "14576": 163,
        "14577": 33,
        "14578": 61,
        "14579": 36,
        "14580": 104,
        "14581": 124,
        "14582": 148,
        "14583": 179,
        "14584": 45,
        "14585": 4,
        "14586": 138,
        "14587": 111,
        "14588": 170,
        "14589": 53,
        "14590": 24,
        "14591": 254,
        "14592": 120,
        "14593": 176,
        "14594": 71,
        "14595": 173,
        "14596": 222,
        "14597": 164,
        "14598": 182,
        "14599": 223,
        "14600": 98,
        "14601": 25,
        "14602": 125,
        "14603": 27,
        "14604": 189,
        "14605": 9,
        "14606": 44,
        "14607": 126,
        "14608": 29,
        "14609": 196,
        "14610": 183,
        "14611": 5,
        "14612": 167,
        "14613": 108,
        "14614": 45,
        "14615": 14,
        "14616": 153,
        "14617": 47,
        "14618": 85,
        "14619": 245,
        "14620": 159,
        "14621": 38,
        "14622": 42,
        "14623": 86,
        "14624": 121,
        "14625": 216,
        "14626": 103,
        "14627": 47,
        "14628": 220,
        "14629": 235,
        "14630": 87,
        "14631": 59,
        "14632": 42,
        "14633": 23,
        "14634": 160,
        "14635": 38,
        "14636": 136,
        "14637": 179,
        "14638": 21,
        "14639": 253,
        "14640": 155,
        "14641": 31,
        "14642": 47,
        "14643": 26,
        "14644": 174,
        "14645": 94,
        "14646": 129,
        "14647": 184,
        "14648": 181,
        "14649": 105,
        "14650": 0,
        "14651": 231,
        "14652": 178,
        "14653": 132,
        "14654": 2,
        "14655": 176,
        "14656": 187,
        "14657": 39,
        "14658": 131,
        "14659": 71,
        "14660": 0,
        "14661": 221,
        "14662": 246,
        "14663": 62,
        "14664": 91,
        "14665": 1,
        "14666": 12,
        "14667": 111,
        "14668": 145,
        "14669": 47,
        "14670": 169,
        "14671": 253,
        "14672": 18,
        "14673": 5,
        "14674": 37,
        "14675": 135,
        "14676": 81,
        "14677": 65,
        "14678": 79,
        "14679": 123,
        "14680": 236,
        "14681": 244,
        "14682": 107,
        "14683": 190,
        "14684": 248,
        "14685": 114,
        "14686": 166,
        "14687": 41,
        "14688": 220,
        "14689": 119,
        "14690": 147,
        "14691": 250,
        "14692": 98,
        "14693": 190,
        "14694": 209,
        "14695": 101,
        "14696": 33,
        "14697": 176,
        "14698": 102,
        "14699": 70,
        "14700": 219,
        "14701": 58,
        "14702": 90,
        "14703": 249,
        "14704": 187,
        "14705": 77,
        "14706": 143,
        "14707": 253,
        "14708": 77,
        "14709": 82,
        "14710": 85,
        "14711": 190,
        "14712": 163,
        "14713": 51,
        "14714": 244,
        "14715": 87,
        "14716": 236,
        "14717": 104,
        "14718": 199,
        "14719": 1,
        "14720": 231,
        "14721": 249,
        "14722": 78,
        "14723": 198,
        "14724": 55,
        "14725": 77,
        "14726": 177,
        "14727": 175,
        "14728": 222,
        "14729": 157,
        "14730": 201,
        "14731": 93,
        "14732": 53,
        "14733": 122,
        "14734": 51,
        "14735": 211,
        "14736": 125,
        "14737": 166,
        "14738": 134,
        "14739": 166,
        "14740": 60,
        "14741": 117,
        "14742": 100,
        "14743": 172,
        "14744": 110,
        "14745": 77,
        "14746": 28,
        "14747": 188,
        "14748": 34,
        "14749": 102,
        "14750": 43,
        "14751": 25,
        "14752": 169,
        "14753": 51,
        "14754": 140,
        "14755": 40,
        "14756": 163,
        "14757": 135,
        "14758": 44,
        "14759": 83,
        "14760": 88,
        "14761": 236,
        "14762": 182,
        "14763": 184,
        "14764": 21,
        "14765": 69,
        "14766": 172,
        "14767": 199,
        "14768": 15,
        "14769": 244,
        "14770": 206,
        "14771": 135,
        "14772": 116,
        "14773": 164,
        "14774": 74,
        "14775": 21,
        "14776": 217,
        "14777": 228,
        "14778": 131,
        "14779": 123,
        "14780": 98,
        "14781": 192,
        "14782": 120,
        "14783": 145,
        "14784": 233,
        "14785": 136,
        "14786": 62,
        "14787": 183,
        "14788": 231,
        "14789": 95,
        "14790": 91,
        "14791": 6,
        "14792": 155,
        "14793": 49,
        "14794": 213,
        "14795": 176,
        "14796": 158,
        "14797": 71,
        "14798": 254,
        "14799": 70,
        "14800": 150,
        "14801": 16,
        "14802": 250,
        "14803": 215,
        "14804": 21,
        "14805": 154,
        "14806": 239,
        "14807": 239,
        "14808": 57,
        "14809": 150,
        "14810": 212,
        "14811": 66,
        "14812": 208,
        "14813": 13,
        "14814": 246,
        "14815": 73,
        "14816": 248,
        "14817": 169,
        "14818": 179,
        "14819": 92,
        "14820": 246,
        "14821": 172,
        "14822": 85,
        "14823": 182,
        "14824": 169,
        "14825": 28,
        "14826": 172,
        "14827": 12,
        "14828": 25,
        "14829": 97,
        "14830": 79,
        "14831": 169,
        "14832": 22,
        "14833": 40,
        "14834": 209,
        "14835": 79,
        "14836": 217,
        "14837": 69,
        "14838": 240,
        "14839": 41,
        "14840": 110,
        "14841": 222,
        "14842": 254,
        "14843": 123,
        "14844": 84,
        "14845": 14,
        "14846": 27,
        "14847": 98,
        "14848": 34,
        "14849": 205,
        "14850": 104,
        "14851": 249,
        "14852": 82,
        "14853": 122,
        "14854": 197,
        "14855": 232,
        "14856": 163,
        "14857": 137,
        "14858": 75,
        "14859": 229,
        "14860": 82,
        "14861": 82,
        "14862": 53,
        "14863": 61,
        "14864": 206,
        "14865": 46,
        "14866": 48,
        "14867": 34,
        "14868": 113,
        "14869": 169,
        "14870": 163,
        "14871": 114,
        "14872": 29,
        "14873": 250,
        "14874": 46,
        "14875": 234,
        "14876": 141,
        "14877": 180,
        "14878": 210,
        "14879": 45,
        "14880": 113,
        "14881": 240,
        "14882": 72,
        "14883": 255,
        "14884": 224,
        "14885": 115,
        "14886": 4,
        "14887": 195,
        "14888": 104,
        "14889": 161,
        "14890": 131,
        "14891": 120,
        "14892": 222,
        "14893": 41,
        "14894": 117,
        "14895": 139,
        "14896": 137,
        "14897": 210,
        "14898": 238,
        "14899": 179,
        "14900": 62,
        "14901": 44,
        "14902": 36,
        "14903": 41,
        "14904": 66,
        "14905": 226,
        "14906": 240,
        "14907": 248,
        "14908": 129,
        "14909": 174,
        "14910": 107,
        "14911": 53,
        "14912": 161,
        "14913": 159,
        "14914": 51,
        "14915": 169,
        "14916": 233,
        "14917": 82,
        "14918": 134,
        "14919": 111,
        "14920": 1,
        "14921": 34,
        "14922": 116,
        "14923": 105,
        "14924": 16,
        "14925": 219,
        "14926": 14,
        "14927": 27,
        "14928": 231,
        "14929": 204,
        "14930": 198,
        "14931": 76,
        "14932": 211,
        "14933": 254,
        "14934": 87,
        "14935": 61,
        "14936": 67,
        "14937": 212,
        "14938": 208,
        "14939": 149,
        "14940": 43,
        "14941": 240,
        "14942": 157,
        "14943": 239,
        "14944": 82,
        "14945": 205,
        "14946": 215,
        "14947": 155,
        "14948": 136,
        "14949": 85,
        "14950": 218,
        "14951": 36,
        "14952": 68,
        "14953": 113,
        "14954": 98,
        "14955": 231,
        "14956": 7,
        "14957": 165,
        "14958": 235,
        "14959": 64,
        "14960": 30,
        "14961": 38,
        "14962": 240,
        "14963": 55,
        "14964": 60,
        "14965": 10,
        "14966": 6,
        "14967": 150,
        "14968": 179,
        "14969": 75,
        "14970": 56,
        "14971": 38,
        "14972": 0,
        "14973": 31,
        "14974": 96,
        "14975": 55,
        "14976": 78,
        "14977": 18,
        "14978": 94,
        "14979": 90,
        "14980": 178,
        "14981": 117,
        "14982": 69,
        "14983": 37,
        "14984": 31,
        "14985": 187,
        "14986": 21,
        "14987": 27,
        "14988": 10,
        "14989": 196,
        "14990": 203,
        "14991": 116,
        "14992": 118,
        "14993": 247,
        "14994": 127,
        "14995": 103,
        "14996": 92,
        "14997": 155,
        "14998": 42,
        "14999": 252,
        "15000": 246,
        "15001": 92,
        "15002": 45,
        "15003": 110,
        "15004": 85,
        "15005": 215,
        "15006": 209,
        "15007": 40,
        "15008": 234,
        "15009": 67,
        "15010": 88,
        "15011": 251,
        "15012": 90,
        "15013": 48,
        "15014": 49,
        "15015": 46,
        "15016": 254,
        "15017": 174,
        "15018": 6,
        "15019": 79,
        "15020": 146,
        "15021": 142,
        "15022": 90,
        "15023": 14,
        "15024": 62,
        "15025": 153,
        "15026": 231,
        "15027": 87,
        "15028": 235,
        "15029": 101,
        "15030": 172,
        "15031": 94,
        "15032": 145,
        "15033": 223,
        "15034": 109,
        "15035": 91,
        "15036": 211,
        "15037": 193,
        "15038": 114,
        "15039": 142,
        "15040": 50,
        "15041": 53,
        "15042": 21,
        "15043": 133,
        "15044": 151,
        "15045": 175,
        "15046": 58,
        "15047": 241,
        "15048": 40,
        "15049": 23,
        "15050": 199,
        "15051": 240,
        "15052": 63,
        "15053": 61,
        "15054": 184,
        "15055": 98,
        "15056": 92,
        "15057": 55,
        "15058": 229,
        "15059": 93,
        "15060": 65,
        "15061": 107,
        "15062": 11,
        "15063": 28,
        "15064": 251,
        "15065": 82,
        "15066": 29,
        "15067": 216,
        "15068": 40,
        "15069": 102,
        "15070": 58,
        "15071": 208,
        "15072": 181,
        "15073": 243,
        "15074": 103,
        "15075": 243,
        "15076": 99,
        "15077": 53,
        "15078": 189,
        "15079": 250,
        "15080": 244,
        "15081": 222,
        "15082": 69,
        "15083": 10,
        "15084": 152,
        "15085": 201,
        "15086": 35,
        "15087": 209,
        "15088": 163,
        "15089": 131,
        "15090": 110,
        "15091": 240,
        "15092": 90,
        "15093": 98,
        "15094": 56,
        "15095": 170,
        "15096": 35,
        "15097": 245,
        "15098": 56,
        "15099": 172,
        "15100": 236,
        "15101": 202,
        "15102": 148,
        "15103": 71,
        "15104": 162,
        "15105": 11,
        "15106": 127,
        "15107": 247,
        "15108": 210,
        "15109": 41,
        "15110": 205,
        "15111": 27,
        "15112": 237,
        "15113": 78,
        "15114": 112,
        "15115": 254,
        "15116": 212,
        "15117": 44,
        "15118": 87,
        "15119": 202,
        "15120": 129,
        "15121": 151,
        "15122": 59,
        "15123": 126,
        "15124": 178,
        "15125": 234,
        "15126": 49,
        "15127": 192,
        "15128": 247,
        "15129": 124,
        "15130": 136,
        "15131": 116,
        "15132": 39,
        "15133": 211,
        "15134": 15,
        "15135": 110,
        "15136": 196,
        "15137": 224,
        "15138": 23,
        "15139": 7,
        "15140": 149,
        "15141": 214,
        "15142": 86,
        "15143": 155,
        "15144": 195,
        "15145": 141,
        "15146": 95,
        "15147": 81,
        "15148": 113,
        "15149": 228,
        "15150": 200,
        "15151": 8,
        "15152": 226,
        "15153": 26,
        "15154": 222,
        "15155": 97,
        "15156": 5,
        "15157": 231,
        "15158": 191,
        "15159": 86,
        "15160": 68,
        "15161": 153,
        "15162": 110,
        "15163": 238,
        "15164": 0,
        "15165": 65,
        "15166": 0,
        "15167": 68,
        "15168": 132,
        "15169": 23,
        "15170": 204,
        "15171": 235,
        "15172": 85,
        "15173": 187,
        "15174": 250,
        "15175": 48,
        "15176": 35,
        "15177": 127,
        "15178": 255,
        "15179": 212,
        "15180": 47,
        "15181": 121,
        "15182": 247,
        "15183": 216,
        "15184": 113,
        "15185": 43,
        "15186": 249,
        "15187": 200,
        "15188": 119,
        "15189": 74,
        "15190": 167,
        "15191": 175,
        "15192": 78,
        "15193": 134,
        "15194": 60,
        "15195": 223,
        "15196": 10,
        "15197": 46,
        "15198": 143,
        "15199": 14,
        "15200": 250,
        "15201": 247,
        "15202": 27,
        "15203": 249,
        "15204": 20,
        "15205": 168,
        "15206": 83,
        "15207": 199,
        "15208": 238,
        "15209": 136,
        "15210": 231,
        "15211": 65,
        "15212": 171,
        "15213": 130,
        "15214": 0,
        "15215": 208,
        "15216": 170,
        "15217": 65,
        "15218": 105,
        "15219": 114,
        "15220": 177,
        "15221": 222,
        "15222": 29,
        "15223": 132,
        "15224": 40,
        "15225": 175,
        "15226": 1,
        "15227": 233,
        "15228": 79,
        "15229": 12,
        "15230": 165,
        "15231": 4,
        "15232": 219,
        "15233": 64,
        "15234": 94,
        "15235": 113,
        "15236": 93,
        "15237": 169,
        "15238": 135,
        "15239": 190,
        "15240": 66,
        "15241": 32,
        "15242": 200,
        "15243": 83,
        "15244": 64,
        "15245": 5,
        "15246": 211,
        "15247": 46,
        "15248": 242,
        "15249": 33,
        "15250": 218,
        "15251": 178,
        "15252": 55,
        "15253": 154,
        "15254": 53,
        "15255": 72,
        "15256": 226,
        "15257": 76,
        "15258": 180,
        "15259": 159,
        "15260": 30,
        "15261": 247,
        "15262": 153,
        "15263": 93,
        "15264": 220,
        "15265": 45,
        "15266": 249,
        "15267": 172,
        "15268": 208,
        "15269": 210,
        "15270": 124,
        "15271": 31,
        "15272": 121,
        "15273": 207,
        "15274": 111,
        "15275": 212,
        "15276": 3,
        "15277": 100,
        "15278": 111,
        "15279": 100,
        "15280": 11,
        "15281": 61,
        "15282": 243,
        "15283": 5,
        "15284": 171,
        "15285": 188,
        "15286": 207,
        "15287": 135,
        "15288": 74,
        "15289": 193,
        "15290": 17,
        "15291": 44,
        "15292": 38,
        "15293": 82,
        "15294": 147,
        "15295": 49,
        "15296": 165,
        "15297": 68,
        "15298": 88,
        "15299": 252,
        "15300": 68,
        "15301": 25,
        "15302": 198,
        "15303": 20,
        "15304": 104,
        "15305": 233,
        "15306": 18,
        "15307": 85,
        "15308": 162,
        "15309": 153,
        "15310": 80,
        "15311": 102,
        "15312": 246,
        "15313": 253,
        "15314": 90,
        "15315": 233,
        "15316": 253,
        "15317": 147,
        "15318": 216,
        "15319": 232,
        "15320": 252,
        "15321": 243,
        "15322": 189,
        "15323": 134,
        "15324": 48,
        "15325": 248,
        "15326": 108,
        "15327": 204,
        "15328": 206,
        "15329": 227,
        "15330": 204,
        "15331": 146,
        "15332": 17,
        "15333": 160,
        "15334": 3,
        "15335": 199,
        "15336": 213,
        "15337": 37,
        "15338": 236,
        "15339": 149,
        "15340": 148,
        "15341": 64,
        "15342": 59,
        "15343": 66,
        "15344": 14,
        "15345": 66,
        "15346": 95,
        "15347": 131,
        "15348": 12,
        "15349": 141,
        "15350": 152,
        "15351": 245,
        "15352": 29,
        "15353": 7,
        "15354": 154,
        "15355": 228,
        "15356": 36,
        "15357": 156,
        "15358": 68,
        "15359": 79,
        "15360": 255,
        "15361": 193,
        "15362": 93,
        "15363": 231,
        "15364": 242,
        "15365": 232,
        "15366": 11,
        "15367": 219,
        "15368": 169,
        "15369": 203,
        "15370": 1,
        "15371": 124,
        "15372": 203,
        "15373": 109,
        "15374": 252,
        "15375": 163,
        "15376": 147,
        "15377": 45,
        "15378": 199,
        "15379": 201,
        "15380": 157,
        "15381": 63,
        "15382": 96,
        "15383": 111,
        "15384": 106,
        "15385": 179,
        "15386": 161,
        "15387": 63,
        "15388": 203,
        "15389": 182,
        "15390": 166,
        "15391": 203,
        "15392": 184,
        "15393": 149,
        "15394": 252,
        "15395": 225,
        "15396": 65,
        "15397": 230,
        "15398": 84,
        "15399": 166,
        "15400": 229,
        "15401": 188,
        "15402": 214,
        "15403": 211,
        "15404": 169,
        "15405": 231,
        "15406": 226,
        "15407": 3,
        "15408": 164,
        "15409": 209,
        "15410": 122,
        "15411": 213,
        "15412": 236,
        "15413": 155,
        "15414": 185,
        "15415": 116,
        "15416": 48,
        "15417": 4,
        "15418": 160,
        "15419": 16,
        "15420": 117,
        "15421": 154,
        "15422": 193,
        "15423": 83,
        "15424": 34,
        "15425": 65,
        "15426": 78,
        "15427": 116,
        "15428": 196,
        "15429": 84,
        "15430": 204,
        "15431": 179,
        "15432": 171,
        "15433": 113,
        "15434": 253,
        "15435": 135,
        "15436": 142,
        "15437": 103,
        "15438": 191,
        "15439": 9,
        "15440": 205,
        "15441": 212,
        "15442": 79,
        "15443": 216,
        "15444": 97,
        "15445": 125,
        "15446": 222,
        "15447": 226,
        "15448": 173,
        "15449": 72,
        "15450": 165,
        "15451": 147,
        "15452": 80,
        "15453": 131,
        "15454": 39,
        "15455": 62,
        "15456": 251,
        "15457": 110,
        "15458": 62,
        "15459": 148,
        "15460": 226,
        "15461": 158,
        "15462": 54,
        "15463": 231,
        "15464": 241,
        "15465": 193,
        "15466": 192,
        "15467": 190,
        "15468": 204,
        "15469": 238,
        "15470": 197,
        "15471": 78,
        "15472": 124,
        "15473": 2,
        "15474": 41,
        "15475": 147,
        "15476": 165,
        "15477": 131,
        "15478": 175,
        "15479": 63,
        "15480": 159,
        "15481": 162,
        "15482": 247,
        "15483": 144,
        "15484": 110,
        "15485": 15,
        "15486": 46,
        "15487": 115,
        "15488": 170,
        "15489": 205,
        "15490": 38,
        "15491": 141,
        "15492": 173,
        "15493": 98,
        "15494": 195,
        "15495": 194,
        "15496": 44,
        "15497": 228,
        "15498": 28,
        "15499": 61,
        "15500": 4,
        "15501": 58,
        "15502": 105,
        "15503": 189,
        "15504": 232,
        "15505": 17,
        "15506": 226,
        "15507": 2,
        "15508": 82,
        "15509": 179,
        "15510": 130,
        "15511": 253,
        "15512": 101,
        "15513": 99,
        "15514": 56,
        "15515": 148,
        "15516": 133,
        "15517": 98,
        "15518": 180,
        "15519": 72,
        "15520": 61,
        "15521": 51,
        "15522": 56,
        "15523": 12,
        "15524": 242,
        "15525": 65,
        "15526": 4,
        "15527": 133,
        "15528": 144,
        "15529": 75,
        "15530": 76,
        "15531": 21,
        "15532": 141,
        "15533": 215,
        "15534": 244,
        "15535": 215,
        "15536": 217,
        "15537": 93,
        "15538": 129,
        "15539": 134,
        "15540": 240,
        "15541": 238,
        "15542": 18,
        "15543": 219,
        "15544": 165,
        "15545": 86,
        "15546": 126,
        "15547": 195,
        "15548": 113,
        "15549": 1,
        "15550": 63,
        "15551": 164,
        "15552": 86,
        "15553": 119,
        "15554": 157,
        "15555": 91,
        "15556": 37,
        "15557": 249,
        "15558": 97,
        "15559": 237,
        "15560": 131,
        "15561": 219,
        "15562": 29,
        "15563": 50,
        "15564": 132,
        "15565": 205,
        "15566": 137,
        "15567": 244,
        "15568": 181,
        "15569": 196,
        "15570": 118,
        "15571": 133,
        "15572": 87,
        "15573": 161,
        "15574": 240,
        "15575": 14,
        "15576": 50,
        "15577": 184,
        "15578": 2,
        "15579": 157,
        "15580": 58,
        "15581": 63,
        "15582": 40,
        "15583": 88,
        "15584": 119,
        "15585": 220,
        "15586": 210,
        "15587": 102,
        "15588": 229,
        "15589": 66,
        "15590": 222,
        "15591": 100,
        "15592": 220,
        "15593": 164,
        "15594": 52,
        "15595": 27,
        "15596": 186,
        "15597": 18,
        "15598": 9,
        "15599": 212,
        "15600": 100,
        "15601": 181,
        "15602": 80,
        "15603": 82,
        "15604": 211,
        "15605": 29,
        "15606": 158,
        "15607": 242,
        "15608": 9,
        "15609": 26,
        "15610": 28,
        "15611": 93,
        "15612": 136,
        "15613": 220,
        "15614": 75,
        "15615": 53,
        "15616": 22,
        "15617": 15,
        "15618": 186,
        "15619": 115,
        "15620": 32,
        "15621": 68,
        "15622": 21,
        "15623": 12,
        "15624": 51,
        "15625": 10,
        "15626": 10,
        "15627": 65,
        "15628": 65,
        "15629": 68,
        "15630": 58,
        "15631": 241,
        "15632": 139,
        "15633": 101,
        "15634": 235,
        "15635": 228,
        "15636": 89,
        "15637": 92,
        "15638": 175,
        "15639": 225,
        "15640": 9,
        "15641": 2,
        "15642": 109,
        "15643": 122,
        "15644": 253,
        "15645": 117,
        "15646": 27,
        "15647": 127,
        "15648": 74,
        "15649": 111,
        "15650": 92,
        "15651": 105,
        "15652": 189,
        "15653": 32,
        "15654": 190,
        "15655": 143,
        "15656": 56,
        "15657": 172,
        "15658": 158,
        "15659": 41,
        "15660": 54,
        "15661": 173,
        "15662": 26,
        "15663": 145,
        "15664": 148,
        "15665": 229,
        "15666": 39,
        "15667": 196,
        "15668": 251,
        "15669": 252,
        "15670": 20,
        "15671": 202,
        "15672": 131,
        "15673": 20,
        "15674": 95,
        "15675": 80,
        "15676": 151,
        "15677": 96,
        "15678": 223,
        "15679": 40,
        "15680": 151,
        "15681": 135,
        "15682": 178,
        "15683": 218,
        "15684": 46,
        "15685": 172,
        "15686": 174,
        "15687": 179,
        "15688": 66,
        "15689": 33,
        "15690": 128,
        "15691": 233,
        "15692": 178,
        "15693": 173,
        "15694": 174,
        "15695": 45,
        "15696": 171,
        "15697": 35,
        "15698": 105,
        "15699": 14,
        "15700": 183,
        "15701": 211,
        "15702": 25,
        "15703": 30,
        "15704": 36,
        "15705": 101,
        "15706": 113,
        "15707": 218,
        "15708": 97,
        "15709": 164,
        "15710": 3,
        "15711": 236,
        "15712": 143,
        "15713": 144,
        "15714": 141,
        "15715": 92,
        "15716": 191,
        "15717": 8,
        "15718": 6,
        "15719": 99,
        "15720": 77,
        "15721": 16,
        "15722": 26,
        "15723": 118,
        "15724": 150,
        "15725": 173,
        "15726": 201,
        "15727": 94,
        "15728": 35,
        "15729": 95,
        "15730": 23,
        "15731": 102,
        "15732": 204,
        "15733": 66,
        "15734": 119,
        "15735": 247,
        "15736": 47,
        "15737": 76,
        "15738": 139,
        "15739": 217,
        "15740": 157,
        "15741": 196,
        "15742": 157,
        "15743": 30,
        "15744": 198,
        "15745": 4,
        "15746": 208,
        "15747": 87,
        "15748": 212,
        "15749": 102,
        "15750": 182,
        "15751": 12,
        "15752": 163,
        "15753": 142,
        "15754": 27,
        "15755": 201,
        "15756": 129,
        "15757": 168,
        "15758": 115,
        "15759": 40,
        "15760": 161,
        "15761": 182,
        "15762": 27,
        "15763": 196,
        "15764": 120,
        "15765": 234,
        "15766": 1,
        "15767": 231,
        "15768": 71,
        "15769": 135,
        "15770": 160,
        "15771": 69,
        "15772": 185,
        "15773": 224,
        "15774": 34,
        "15775": 115,
        "15776": 95,
        "15777": 0,
        "15778": 9,
        "15779": 211,
        "15780": 142,
        "15781": 36,
        "15782": 252,
        "15783": 114,
        "15784": 26,
        "15785": 85,
        "15786": 33,
        "15787": 190,
        "15788": 150,
        "15789": 0,
        "15790": 247,
        "15791": 76,
        "15792": 66,
        "15793": 113,
        "15794": 8,
        "15795": 171,
        "15796": 119,
        "15797": 204,
        "15798": 252,
        "15799": 161,
        "15800": 101,
        "15801": 180,
        "15802": 210,
        "15803": 147,
        "15804": 197,
        "15805": 206,
        "15806": 66,
        "15807": 25,
        "15808": 148,
        "15809": 180,
        "15810": 224,
        "15811": 147,
        "15812": 30,
        "15813": 18,
        "15814": 141,
        "15815": 199,
        "15816": 136,
        "15817": 60,
        "15818": 184,
        "15819": 216,
        "15820": 230,
        "15821": 92,
        "15822": 161,
        "15823": 60,
        "15824": 13,
        "15825": 173,
        "15826": 209,
        "15827": 170,
        "15828": 193,
        "15829": 132,
        "15830": 151,
        "15831": 35,
        "15832": 183,
        "15833": 98,
        "15834": 145,
        "15835": 232,
        "15836": 147,
        "15837": 47,
        "15838": 6,
        "15839": 253,
        "15840": 165,
        "15841": 41,
        "15842": 158,
        "15843": 154,
        "15844": 39,
        "15845": 101,
        "15846": 255,
        "15847": 61,
        "15848": 22,
        "15849": 229,
        "15850": 165,
        "15851": 211,
        "15852": 172,
        "15853": 8,
        "15854": 232,
        "15855": 79,
        "15856": 54,
        "15857": 184,
        "15858": 194,
        "15859": 173,
        "15860": 157,
        "15861": 169,
        "15862": 177,
        "15863": 169,
        "15864": 3,
        "15865": 168,
        "15866": 206,
        "15867": 221,
        "15868": 106,
        "15869": 94,
        "15870": 122,
        "15871": 199,
        "15872": 136,
        "15873": 94,
        "15874": 112,
        "15875": 219,
        "15876": 93,
        "15877": 119,
        "15878": 9,
        "15879": 66,
        "15880": 213,
        "15881": 175,
        "15882": 10,
        "15883": 60,
        "15884": 109,
        "15885": 5,
        "15886": 94,
        "15887": 199,
        "15888": 150,
        "15889": 102,
        "15890": 251,
        "15891": 191,
        "15892": 93,
        "15893": 62,
        "15894": 190,
        "15895": 162,
        "15896": 223,
        "15897": 218,
        "15898": 113,
        "15899": 95,
        "15900": 134,
        "15901": 201,
        "15902": 181,
        "15903": 104,
        "15904": 17,
        "15905": 223,
        "15906": 101,
        "15907": 72,
        "15908": 146,
        "15909": 21,
        "15910": 7,
        "15911": 85,
        "15912": 44,
        "15913": 230,
        "15914": 176,
        "15915": 250,
        "15916": 41,
        "15917": 163,
        "15918": 205,
        "15919": 42,
        "15920": 4,
        "15921": 218,
        "15922": 120,
        "15923": 11,
        "15924": 142,
        "15925": 62,
        "15926": 108,
        "15927": 87,
        "15928": 250,
        "15929": 131,
        "15930": 83,
        "15931": 222,
        "15932": 88,
        "15933": 214,
        "15934": 27,
        "15935": 165,
        "15936": 119,
        "15937": 122,
        "15938": 226,
        "15939": 56,
        "15940": 60,
        "15941": 2,
        "15942": 101,
        "15943": 235,
        "15944": 5,
        "15945": 156,
        "15946": 252,
        "15947": 176,
        "15948": 74,
        "15949": 193,
        "15950": 97,
        "15951": 20,
        "15952": 18,
        "15953": 219,
        "15954": 113,
        "15955": 191,
        "15956": 117,
        "15957": 19,
        "15958": 214,
        "15959": 151,
        "15960": 77,
        "15961": 249,
        "15962": 57,
        "15963": 42,
        "15964": 80,
        "15965": 243,
        "15966": 126,
        "15967": 69,
        "15968": 197,
        "15969": 151,
        "15970": 56,
        "15971": 47,
        "15972": 242,
        "15973": 131,
        "15974": 65,
        "15975": 53,
        "15976": 247,
        "15977": 101,
        "15978": 64,
        "15979": 103,
        "15980": 163,
        "15981": 5,
        "15982": 181,
        "15983": 216,
        "15984": 133,
        "15985": 77,
        "15986": 232,
        "15987": 178,
        "15988": 227,
        "15989": 122,
        "15990": 166,
        "15991": 145,
        "15992": 125,
        "15993": 213,
        "15994": 89,
        "15995": 245,
        "15996": 130,
        "15997": 228,
        "15998": 32,
        "15999": 241,
        "16000": 198,
        "16001": 37,
        "16002": 52,
        "16003": 52,
        "16004": 74,
        "16005": 244,
        "16006": 64,
        "16007": 114,
        "16008": 125,
        "16009": 117,
        "16010": 93,
        "16011": 119,
        "16012": 1,
        "16013": 114,
        "16014": 103,
        "16015": 109,
        "16016": 188,
        "16017": 13,
        "16018": 64,
        "16019": 188,
        "16020": 220,
        "16021": 62,
        "16022": 177,
        "16023": 172,
        "16024": 207,
        "16025": 185,
        "16026": 5,
        "16027": 192,
        "16028": 48,
        "16029": 70,
        "16030": 61,
        "16031": 65,
        "16032": 209,
        "16033": 167,
        "16034": 67,
        "16035": 71,
        "16036": 73,
        "16037": 0,
        "16038": 62,
        "16039": 236,
        "16040": 183,
        "16041": 255,
        "16042": 133,
        "16043": 116,
        "16044": 231,
        "16045": 65,
        "16046": 138,
        "16047": 241,
        "16048": 63,
        "16049": 123,
        "16050": 209,
        "16051": 109,
        "16052": 79,
        "16053": 95,
        "16054": 29,
        "16055": 53,
        "16056": 223,
        "16057": 155,
        "16058": 22,
        "16059": 64,
        "16060": 148,
        "16061": 145,
        "16062": 5,
        "16063": 201,
        "16064": 200,
        "16065": 134,
        "16066": 235,
        "16067": 221,
        "16068": 65,
        "16069": 134,
        "16070": 179,
        "16071": 156,
        "16072": 37,
        "16073": 37,
        "16074": 51,
        "16075": 243,
        "16076": 196,
        "16077": 172,
        "16078": 148,
        "16079": 155,
        "16080": 14,
        "16081": 168,
        "16082": 21,
        "16083": 34,
        "16084": 243,
        "16085": 230,
        "16086": 198,
        "16087": 192,
        "16088": 193,
        "16089": 63,
        "16090": 28,
        "16091": 120,
        "16092": 162,
        "16093": 29,
        "16094": 54,
        "16095": 229,
        "16096": 165,
        "16097": 224,
        "16098": 244,
        "16099": 219,
        "16100": 202,
        "16101": 22,
        "16102": 110,
        "16103": 246,
        "16104": 105,
        "16105": 193,
        "16106": 97,
        "16107": 57,
        "16108": 85,
        "16109": 10,
        "16110": 241,
        "16111": 216,
        "16112": 202,
        "16113": 90,
        "16114": 243,
        "16115": 135,
        "16116": 54,
        "16117": 224,
        "16118": 109,
        "16119": 60,
        "16120": 113,
        "16121": 166,
        "16122": 247,
        "16123": 224,
        "16124": 217,
        "16125": 97,
        "16126": 216,
        "16127": 97,
        "16128": 98,
        "16129": 25,
        "16130": 167,
        "16131": 82,
        "16132": 120,
        "16133": 251,
        "16134": 236,
        "16135": 111,
        "16136": 223,
        "16137": 45,
        "16138": 89,
        "16139": 232,
        "16140": 182,
        "16141": 148,
        "16142": 162,
        "16143": 101,
        "16144": 101,
        "16145": 171,
        "16146": 227,
        "16147": 22,
        "16148": 13,
        "16149": 4,
        "16150": 203,
        "16151": 170,
        "16152": 213,
        "16153": 196,
        "16154": 179,
        "16155": 249,
        "16156": 23,
        "16157": 183,
        "16158": 124,
        "16159": 194,
        "16160": 87,
        "16161": 236,
        "16162": 118,
        "16163": 31,
        "16164": 239,
        "16165": 27,
        "16166": 33,
        "16167": 38,
        "16168": 36,
        "16169": 62,
        "16170": 244,
        "16171": 185,
        "16172": 201,
        "16173": 154,
        "16174": 83,
        "16175": 199,
        "16176": 226,
        "16177": 100,
        "16178": 133,
        "16179": 172,
        "16180": 142,
        "16181": 54,
        "16182": 100,
        "16183": 138,
        "16184": 150,
        "16185": 254,
        "16186": 128,
        "16187": 220,
        "16188": 51,
        "16189": 4,
        "16190": 161,
        "16191": 255,
        "16192": 56,
        "16193": 172,
        "16194": 245,
        "16195": 108,
        "16196": 208,
        "16197": 165,
        "16198": 56,
        "16199": 16,
        "16200": 181,
        "16201": 43,
        "16202": 31,
        "16203": 125,
        "16204": 45,
        "16205": 47,
        "16206": 197,
        "16207": 118,
        "16208": 246,
        "16209": 233,
        "16210": 212,
        "16211": 49,
        "16212": 168,
        "16213": 85,
        "16214": 62,
        "16215": 210,
        "16216": 10,
        "16217": 49,
        "16218": 160,
        "16219": 152,
        "16220": 142,
        "16221": 41,
        "16222": 105,
        "16223": 166,
        "16224": 22,
        "16225": 82,
        "16226": 114,
        "16227": 60,
        "16228": 149,
        "16229": 19,
        "16230": 63,
        "16231": 76,
        "16232": 59,
        "16233": 95,
        "16234": 61,
        "16235": 211,
        "16236": 178,
        "16237": 82,
        "16238": 214,
        "16239": 200,
        "16240": 255,
        "16241": 58,
        "16242": 150,
        "16243": 6,
        "16244": 68,
        "16245": 181,
        "16246": 244,
        "16247": 205,
        "16248": 14,
        "16249": 211,
        "16250": 32,
        "16251": 156,
        "16252": 254,
        "16253": 114,
        "16254": 4,
        "16255": 17,
        "16256": 75,
        "16257": 185,
        "16258": 107,
        "16259": 122,
        "16260": 89,
        "16261": 66,
        "16262": 144,
        "16263": 218,
        "16264": 44,
        "16265": 79,
        "16266": 146,
        "16267": 27,
        "16268": 252,
        "16269": 229,
        "16270": 218,
        "16271": 54,
        "16272": 217,
        "16273": 60,
        "16274": 108,
        "16275": 45,
        "16276": 92,
        "16277": 76,
        "16278": 133,
        "16279": 249,
        "16280": 124,
        "16281": 198,
        "16282": 94,
        "16283": 153,
        "16284": 85,
        "16285": 126,
        "16286": 197,
        "16287": 119,
        "16288": 226,
        "16289": 91,
        "16290": 29,
        "16291": 28,
        "16292": 69,
        "16293": 245,
        "16294": 7,
        "16295": 22,
        "16296": 152,
        "16297": 174,
        "16298": 46,
        "16299": 196,
        "16300": 219,
        "16301": 35,
        "16302": 49,
        "16303": 150,
        "16304": 172,
        "16305": 16,
        "16306": 159,
        "16307": 126,
        "16308": 173,
        "16309": 235,
        "16310": 205,
        "16311": 183,
        "16312": 244,
        "16313": 152,
        "16314": 209,
        "16315": 154,
        "16316": 85,
        "16317": 49,
        "16318": 91,
        "16319": 71,
        "16320": 224,
        "16321": 60,
        "16322": 164,
        "16323": 6,
        "16324": 198,
        "16325": 31,
        "16326": 134,
        "16327": 87,
        "16328": 45,
        "16329": 35,
        "16330": 246,
        "16331": 203,
        "16332": 185,
        "16333": 95,
        "16334": 190,
        "16335": 141,
        "16336": 54,
        "16337": 5,
        "16338": 14,
        "16339": 10,
        "16340": 13,
        "16341": 126,
        "16342": 246,
        "16343": 106,
        "16344": 87,
        "16345": 208,
        "16346": 225,
        "16347": 248,
        "16348": 158,
        "16349": 107,
        "16350": 167,
        "16351": 248,
        "16352": 179,
        "16353": 217,
        "16354": 59,
        "16355": 242,
        "16356": 237,
        "16357": 99,
        "16358": 193,
        "16359": 175,
        "16360": 117,
        "16361": 208,
        "16362": 216,
        "16363": 47,
        "16364": 101,
        "16365": 219,
        "16366": 178,
        "16367": 97,
        "16368": 91,
        "16369": 116,
        "16370": 253,
        "16371": 95,
        "16372": 170,
        "16373": 128,
        "16374": 229,
        "16375": 167,
        "16376": 216,
        "16377": 196,
        "16378": 41,
        "16379": 235,
        "16380": 125,
        "16381": 69,
        "16382": 79,
        "16383": 245,
        "16384": 180,
        "16385": 153,
        "16386": 132,
        "16387": 241,
        "16388": 117,
        "16389": 47,
        "16390": 232,
        "16391": 206,
        "16392": 107,
        "16393": 99,
        "16394": 107,
        "16395": 101,
        "16396": 100,
        "16397": 183,
        "16398": 104,
        "16399": 143,
        "16400": 83,
        "16401": 72,
        "16402": 176,
        "16403": 3,
        "16404": 35,
        "16405": 243,
        "16406": 146,
        "16407": 64,
        "16408": 238,
        "16409": 107,
        "16410": 136,
        "16411": 19,
        "16412": 152,
        "16413": 153,
        "16414": 127,
        "16415": 78,
        "16416": 138,
        "16417": 180,
        "16418": 17,
        "16419": 127,
        "16420": 163,
        "16421": 50,
        "16422": 118,
        "16423": 63,
        "16424": 131,
        "16425": 91,
        "16426": 109,
        "16427": 12,
        "16428": 142,
        "16429": 158,
        "16430": 201,
        "16431": 67,
        "16432": 255,
        "16433": 97,
        "16434": 86,
        "16435": 0,
        "16436": 220,
        "16437": 242,
        "16438": 254,
        "16439": 226,
        "16440": 100,
        "16441": 228,
        "16442": 4,
        "16443": 130,
        "16444": 124,
        "16445": 147,
        "16446": 172,
        "16447": 196,
        "16448": 57,
        "16449": 149,
        "16450": 134,
        "16451": 246,
        "16452": 174,
        "16453": 42,
        "16454": 30,
        "16455": 175,
        "16456": 75,
        "16457": 198,
        "16458": 72,
        "16459": 255,
        "16460": 138,
        "16461": 175,
        "16462": 95,
        "16463": 122,
        "16464": 179,
        "16465": 228,
        "16466": 184,
        "16467": 17,
        "16468": 15,
        "16469": 152,
        "16470": 79,
        "16471": 252,
        "16472": 245,
        "16473": 173,
        "16474": 133,
        "16475": 243,
        "16476": 240,
        "16477": 88,
        "16478": 3,
        "16479": 172,
        "16480": 198,
        "16481": 187,
        "16482": 7,
        "16483": 238,
        "16484": 200,
        "16485": 108,
        "16486": 93,
        "16487": 0,
        "16488": 186,
        "16489": 186,
        "16490": 225,
        "16491": 219,
        "16492": 202,
        "16493": 17,
        "16494": 254,
        "16495": 153,
        "16496": 10,
        "16497": 203,
        "16498": 82,
        "16499": 191,
        "16500": 80,
        "16501": 153,
        "16502": 192,
        "16503": 243,
        "16504": 217,
        "16505": 7,
        "16506": 91,
        "16507": 204,
        "16508": 203,
        "16509": 100,
        "16510": 237,
        "16511": 249,
        "16512": 136,
        "16513": 15,
        "16514": 234,
        "16515": 116,
        "16516": 67,
        "16517": 7,
        "16518": 96,
        "16519": 167,
        "16520": 1,
        "16521": 8,
        "16522": 0,
        "16523": 0,
        "16524": 0,
        "16525": 0,
        "16526": 0,
        "16527": 0,
        "16528": 16,
        "16529": 0,
        "16530": 0,
        "16531": 0,
        "16532": 0,
        "16533": 0,
        "16534": 0,
        "16535": 0,
        "16536": 0,
        "16537": 0,
        "16538": 0,
        "16539": 0,
        "16540": 0,
        "16541": 0,
        "16542": 0,
        "16543": 0,
        "16544": 0,
        "16545": 0,
        "16546": 0,
        "16547": 0,
        "16548": 0,
        "16549": 0,
        "16550": 0,
        "16551": 0,
        "16552": 64,
        "16553": 0,
        "16554": 0,
        "16555": 0,
        "16556": 0,
        "16557": 0,
        "16558": 0,
        "16559": 0,
        "16560": 3,
        "16561": 0,
        "16562": 0,
        "16563": 0,
        "16564": 0,
        "16565": 0,
        "16566": 0,
        "16567": 0,
        "16568": 4,
        "16569": 0,
        "16570": 0,
        "16571": 0,
        "16572": 0,
        "16573": 0,
        "16574": 0,
        "16575": 0,
        "16576": 4,
        "16577": 0,
        "16578": 0,
        "16579": 0,
        "16580": 0,
        "16581": 0,
        "16582": 0,
        "16583": 0,
        "16584": 0,
        "16585": 0,
        "16586": 0,
        "16587": 0,
        "16588": 1,
        "16589": 0,
        "16590": 0,
        "16591": 0,
        "16592": 0,
        "16593": 0,
        "16594": 0,
        "16595": 0,
        "16596": 16,
        "16597": 0,
        "16598": 0,
        "16599": 0,
        "16600": 0,
        "16601": 0,
        "16602": 0,
        "16603": 0
      }
    }
  ],
  "numDeployments": 7,
  "solcInputHash": "09a7d0cc9d86bf34232eac8ae9cb8154",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct inEuint32\",\"name\":\"_initialSupply\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AllowanceOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AllowanceUnderflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorInsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPermit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermitExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignerNotMessageSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignerNotOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalSupplyOverflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ApprovalEncrypted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferEncrypted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"publicKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Permission\",\"name\":\"permission\",\"type\":\"tuple\"}],\"name\":\"allowanceEncrypted\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct inEuint32\",\"name\":\"value\",\"type\":\"tuple\"}],\"name\":\"approveEncrypted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"publicKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Permission\",\"name\":\"auth\",\"type\":\"tuple\"}],\"name\":\"balanceOfEncrypted\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct inEuint32\",\"name\":\"encryptedAmount\",\"type\":\"tuple\"}],\"name\":\"transferEncrypted\",\"outputs\":[{\"internalType\":\"euint32\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"euint32\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferEncrypted\",\"outputs\":[{\"internalType\":\"euint32\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct inEuint32\",\"name\":\"value\",\"type\":\"tuple\"}],\"name\":\"transferFromEncrypted\",\"outputs\":[{\"internalType\":\"euint32\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"euint32\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFromEncrypted\",\"outputs\":[{\"internalType\":\"euint32\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"}],\"name\":\"unwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"}],\"name\":\"wrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AllowanceOverflow()\":[{\"details\":\"The allowance has overflowed.\"}],\"AllowanceUnderflow()\":[{\"details\":\"The allowance has underflowed.\"}],\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"InsufficientAllowance()\":[{\"details\":\"Insufficient allowance.\"}],\"InsufficientBalance()\":[{\"details\":\"Insufficient balance.\"}],\"InvalidPermit()\":[{\"details\":\"The permit is invalid.\"}],\"PermitExpired()\":[{\"details\":\"The permit has expired.\"}],\"TotalSupplyOverflow()\":[{\"details\":\"The total supply has overflowed.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `amount` tokens is approved by `owner` to be used by `spender`.\"},\"ApprovalEncrypted(address,address)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approveEncrypted}. `value` is the new allowance.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `amount` tokens is transferred from `from` to `to`.\"},\"TransferEncrypted(address,address)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the EIP-712 domain separator for the EIP-2612 permit.\"},\"allowance(address,address)\":{\"details\":\"Returns the amount of tokens that `spender` can spend on behalf of `owner`.\"},\"allowanceEncrypted(address,(bytes32,bytes))\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Emits a {Approval} event.\"},\"approveEncrypted(address,(bytes))\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {ApprovalEncrypted} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `owner`.\"},\"balanceOfEncrypted(address,(bytes32,bytes))\":{\"details\":\"Returns the value of tokens owned by `account`, sealed and encrypted for the caller.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value is used to compute the signature for EIP-2612 permit.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over the tokens of `owner`, authorized by a signed approval by `owner`. Emits a {Approval} event.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Transfer `amount` tokens from the caller to `to`. Requirements: - `from` must at least have `amount`. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `amount` tokens from `from` to `to`. Note: Does not update the allowance if it is the maximum uint256 value. Requirements: - `from` must at least have `amount`. - The caller must have at least `amount` of allowance to transfer the tokens of `from`. Emits a {Transfer} event.\"},\"transferFromEncrypted(address,address,(bytes))\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {TransferEncrypted} event.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"SignerNotMessageSender()\":[{\"notice\":\"Emitted when the signer is not the message sender\"}],\"SignerNotOwner()\":[{\"notice\":\"Emitted when the signer is not the specified owner\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FakeUSD.sol\":\"FakeUSD\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@fhenixprotocol/contracts/FHE.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause-Clear\\n// solhint-disable one-contract-per-file\\n\\npragma solidity >=0.8.19 <=0.8.25;\\n\\nimport {Precompiles, FheOps} from \\\"./FheOS.sol\\\";\\n\\ntype ebool is uint256;\\ntype euint8 is uint256;\\ntype euint16 is uint256;\\ntype euint32 is uint256;\\ntype euint64 is uint256;\\ntype euint128 is uint256;\\ntype euint256 is uint256;\\ntype eaddress is uint256;\\n\\nstruct inEbool {\\n    bytes data;\\n}\\nstruct inEuint8 {\\n    bytes data;\\n}\\nstruct inEuint16 {\\n    bytes data;\\n}\\nstruct inEuint32 {\\n    bytes data;\\n}\\nstruct inEuint64 {\\n    bytes data;\\n}\\nstruct inEuint128 {\\n    bytes data;\\n}\\nstruct inEuint256 {\\n    bytes data;\\n}\\nstruct inEaddress {\\n    bytes data;\\n}\\n\\nstruct SealedArray {\\n  bytes[] data;\\n}\\n\\nlibrary Common {\\n    // Values used to communicate types to the runtime.\\n    // Must match values defined in warp-drive protobufs for everything to \\n    // make sense\\n    uint8 internal constant EUINT8_TFHE = 0;\\n    uint8 internal constant EUINT16_TFHE = 1;\\n    uint8 internal constant EUINT32_TFHE = 2;\\n    uint8 internal constant EUINT64_TFHE = 3;\\n    uint8 internal constant EUINT128_TFHE = 4;\\n    uint8 internal constant EUINT256_TFHE = 5;\\n    uint8 internal constant EADDRESS_TFHE = 12;\\n    // uint8 internal constant INT_BGV = 12;\\n    uint8 internal constant EBOOL_TFHE = 13;\\n    \\n    function bigIntToBool(uint256 i) internal pure returns (bool) {\\n        return (i > 0);\\n    }\\n\\n    function bigIntToUint8(uint256 i) internal pure returns (uint8) {\\n        return uint8(i);\\n    }\\n\\n    function bigIntToUint16(uint256 i) internal pure returns (uint16) {\\n        return uint16(i);\\n    }\\n\\n    function bigIntToUint32(uint256 i) internal pure returns (uint32) {\\n        return uint32(i);\\n    }\\n\\n    function bigIntToUint64(uint256 i) internal pure returns (uint64) {\\n        return uint64(i);\\n    }\\n\\n    function bigIntToUint128(uint256 i) internal pure returns (uint128) {\\n        return uint128(i);\\n    }\\n\\n    function bigIntToUint256(uint256 i) internal pure returns (uint256) {\\n        return i;\\n    }\\n\\n    function bigIntToAddress(uint256 i) internal pure returns (address) {\\n      return address(uint160(i));\\n    }\\n    \\n    function toBytes(uint256 x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly { mstore(add(b, 32), x) }\\n    }\\n}\\n\\nlibrary Impl {\\n    function sealoutput(uint8 utype, uint256 ciphertext, bytes32 publicKey) internal pure returns (string memory reencrypted) {\\n        // Call the sealoutput precompile.\\n        reencrypted = FheOps(Precompiles.Fheos).sealOutput(utype, Common.toBytes(ciphertext), bytes.concat(publicKey));\\n\\n        return reencrypted;\\n    }\\n\\n    function verify(bytes memory _ciphertextBytes, uint8 _toType) internal pure returns (uint256 result) {\\n        bytes memory output;\\n\\n        // Call the verify precompile.\\n        output = FheOps(Precompiles.Fheos).verify(_toType, _ciphertextBytes);\\n        result = getValue(output);\\n    }\\n\\n    function cast(uint8 utype, uint256 ciphertext, uint8 toType) internal pure returns (uint256 result) {\\n        bytes memory output;\\n\\n        // Call the cast precompile.\\n        output = FheOps(Precompiles.Fheos).cast(utype, Common.toBytes(ciphertext), toType);\\n        result = getValue(output);\\n    }\\n\\n    function getValue(bytes memory a) internal pure returns (uint256 value) {\\n        assembly {\\n            value := mload(add(a, 0x20))\\n        }\\n    }\\n\\n    function trivialEncrypt(uint256 value, uint8 toType) internal pure returns (uint256 result) {\\n        bytes memory output;\\n\\n        // Call the trivialEncrypt precompile.\\n        output = FheOps(Precompiles.Fheos).trivialEncrypt(Common.toBytes(value), toType);\\n\\n        result = getValue(output);\\n    }\\n\\n    function select(uint8 utype, uint256 control, uint256 ifTrue, uint256 ifFalse) internal pure returns (uint256 result) {\\n        bytes memory output;\\n\\n        // Call the trivialEncrypt precompile.\\n        output = FheOps(Precompiles.Fheos).select(utype, Common.toBytes(control), Common.toBytes(ifTrue), Common.toBytes(ifFalse));\\n\\n        result = getValue(output);\\n    }\\n}\\n\\nlibrary FHE {\\n    euint8 public constant NIL8 = euint8.wrap(0);\\n    euint16 public constant NIL16 = euint16.wrap(0);\\n    euint32 public constant NIL32 = euint32.wrap(0);\\n\\n    // Return true if the encrypted integer is initialized and false otherwise.\\n    function isInitialized(ebool v) internal pure returns (bool) {\\n        return ebool.unwrap(v) != 0;\\n    }\\n\\n    // Return true if the encrypted integer is initialized and false otherwise.\\n    function isInitialized(euint8 v) internal pure returns (bool) {\\n        return euint8.unwrap(v) != 0;\\n    }\\n\\n    // Return true if the encrypted integer is initialized and false otherwise.\\n    function isInitialized(euint16 v) internal pure returns (bool) {\\n        return euint16.unwrap(v) != 0;\\n    }\\n\\n    // Return true if the encrypted integer is initialized and false otherwise.\\n    function isInitialized(euint32 v) internal pure returns (bool) {\\n        return euint32.unwrap(v) != 0;\\n    }\\n    \\n    // Return true if the encrypted integer is initialized and false otherwise.\\n    function isInitialized(euint64 v) internal pure returns (bool) {\\n        return euint64.unwrap(v) != 0;\\n    }\\n    \\n        // Return true if the encrypted integer is initialized and false otherwise.\\n    function isInitialized(euint128 v) internal pure returns (bool) {\\n        return euint128.unwrap(v) != 0;\\n    }\\n    \\n        // Return true if the encrypted integer is initialized and false otherwise.\\n    function isInitialized(euint256 v) internal pure returns (bool) {\\n        return euint256.unwrap(v) != 0;\\n    }\\n\\n    function isInitialized(eaddress v) internal pure returns (bool) {\\n        return eaddress.unwrap(v) != 0;\\n    }\\n\\n    function getValue(bytes memory a) private pure returns (uint256 value) {\\n        assembly {\\n            value := mload(add(a, 0x20))\\n        }\\n    }\\n    \\n    function mathHelper(\\n        uint8 utype,\\n        uint256 lhs,\\n        uint256 rhs,\\n        function(uint8, bytes memory, bytes memory) external pure returns (bytes memory) impl\\n    ) internal pure returns (uint256 result) {\\n        bytes memory output;\\n        output = impl(utype, Common.toBytes(lhs), Common.toBytes(rhs));\\n        result = getValue(output);\\n    }\\n    \\n    /// @notice This functions performs the add operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function add(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).add);\\n        return euint8.wrap(result);\\n    }\\n    /// @notice This functions performs the add operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function add(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).add);\\n        return euint16.wrap(result);\\n    }\\n    /// @notice This functions performs the add operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function add(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).add);\\n        return euint32.wrap(result);\\n    }\\n    /// @notice This functions performs the add operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function add(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).add);\\n        return euint64.wrap(result);\\n    }\\n    /// @notice This functions performs the add operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function add(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n        uint256 unwrappedInput1 = euint128.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint128.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).add);\\n        return euint128.wrap(result);\\n    }\\n    /// @notice performs the sealoutput function on a ebool ciphertext. This operation returns the plaintext value, sealed for the public key provided \\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param value Ciphertext to decrypt and seal\\n    /// @param publicKey Public Key that will receive the sealed plaintext\\n    /// @return Plaintext input, sealed for the owner of `publicKey`\\n    function sealoutput(ebool value, bytes32 publicKey) internal pure returns (string memory) {\\n        if (!isInitialized(value)) {\\n            value = asEbool(0);\\n        }\\n        uint256 unwrapped = ebool.unwrap(value);\\n\\n        return Impl.sealoutput(Common.EBOOL_TFHE, unwrapped, publicKey);\\n    }\\n    /// @notice performs the sealoutput function on a euint8 ciphertext. This operation returns the plaintext value, sealed for the public key provided \\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param value Ciphertext to decrypt and seal\\n    /// @param publicKey Public Key that will receive the sealed plaintext\\n    /// @return Plaintext input, sealed for the owner of `publicKey`\\n    function sealoutput(euint8 value, bytes32 publicKey) internal pure returns (string memory) {\\n        if (!isInitialized(value)) {\\n            value = asEuint8(0);\\n        }\\n        uint256 unwrapped = euint8.unwrap(value);\\n\\n        return Impl.sealoutput(Common.EUINT8_TFHE, unwrapped, publicKey);\\n    }\\n    /// @notice performs the sealoutput function on a euint16 ciphertext. This operation returns the plaintext value, sealed for the public key provided \\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param value Ciphertext to decrypt and seal\\n    /// @param publicKey Public Key that will receive the sealed plaintext\\n    /// @return Plaintext input, sealed for the owner of `publicKey`\\n    function sealoutput(euint16 value, bytes32 publicKey) internal pure returns (string memory) {\\n        if (!isInitialized(value)) {\\n            value = asEuint16(0);\\n        }\\n        uint256 unwrapped = euint16.unwrap(value);\\n\\n        return Impl.sealoutput(Common.EUINT16_TFHE, unwrapped, publicKey);\\n    }\\n    /// @notice performs the sealoutput function on a euint32 ciphertext. This operation returns the plaintext value, sealed for the public key provided \\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param value Ciphertext to decrypt and seal\\n    /// @param publicKey Public Key that will receive the sealed plaintext\\n    /// @return Plaintext input, sealed for the owner of `publicKey`\\n    function sealoutput(euint32 value, bytes32 publicKey) internal pure returns (string memory) {\\n        if (!isInitialized(value)) {\\n            value = asEuint32(0);\\n        }\\n        uint256 unwrapped = euint32.unwrap(value);\\n\\n        return Impl.sealoutput(Common.EUINT32_TFHE, unwrapped, publicKey);\\n    }\\n    /// @notice performs the sealoutput function on a euint64 ciphertext. This operation returns the plaintext value, sealed for the public key provided \\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param value Ciphertext to decrypt and seal\\n    /// @param publicKey Public Key that will receive the sealed plaintext\\n    /// @return Plaintext input, sealed for the owner of `publicKey`\\n    function sealoutput(euint64 value, bytes32 publicKey) internal pure returns (string memory) {\\n        if (!isInitialized(value)) {\\n            value = asEuint64(0);\\n        }\\n        uint256 unwrapped = euint64.unwrap(value);\\n\\n        return Impl.sealoutput(Common.EUINT64_TFHE, unwrapped, publicKey);\\n    }\\n    /// @notice performs the sealoutput function on a euint128 ciphertext. This operation returns the plaintext value, sealed for the public key provided \\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param value Ciphertext to decrypt and seal\\n    /// @param publicKey Public Key that will receive the sealed plaintext\\n    /// @return Plaintext input, sealed for the owner of `publicKey`\\n    function sealoutput(euint128 value, bytes32 publicKey) internal pure returns (string memory) {\\n        if (!isInitialized(value)) {\\n            value = asEuint128(0);\\n        }\\n        uint256 unwrapped = euint128.unwrap(value);\\n\\n        return Impl.sealoutput(Common.EUINT128_TFHE, unwrapped, publicKey);\\n    }\\n    /// @notice performs the sealoutput function on a euint256 ciphertext. This operation returns the plaintext value, sealed for the public key provided \\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param value Ciphertext to decrypt and seal\\n    /// @param publicKey Public Key that will receive the sealed plaintext\\n    /// @return Plaintext input, sealed for the owner of `publicKey`\\n    function sealoutput(euint256 value, bytes32 publicKey) internal pure returns (string memory) {\\n        if (!isInitialized(value)) {\\n            value = asEuint256(0);\\n        }\\n        uint256 unwrapped = euint256.unwrap(value);\\n\\n        return Impl.sealoutput(Common.EUINT256_TFHE, unwrapped, publicKey);\\n    }\\n    /// @notice performs the sealoutput function on a eaddress ciphertext. This operation returns the plaintext value, sealed for the public key provided \\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param value Ciphertext to decrypt and seal\\n    /// @param publicKey Public Key that will receive the sealed plaintext\\n    /// @return Plaintext input, sealed for the owner of `publicKey`\\n    function sealoutput(eaddress value, bytes32 publicKey) internal pure returns (string memory) {\\n        if (!isInitialized(value)) {\\n            value = asEaddress(0);\\n        }\\n        uint256 unwrapped = eaddress.unwrap(value);\\n\\n        return Impl.sealoutput(Common.EADDRESS_TFHE, unwrapped, publicKey);\\n    }\\n    /// @notice Performs the decrypt operation on a ciphertext\\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param input1 the input ciphertext\\n    function decrypt(ebool input1) internal pure returns (bool) {\\n        if (!isInitialized(input1)) {\\n            input1 = asEbool(0);\\n        }\\n        uint256 unwrappedInput1 = ebool.unwrap(input1);\\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\\n        uint256 result = FheOps(Precompiles.Fheos).decrypt(Common.EBOOL_TFHE, inputAsBytes);\\n        return Common.bigIntToBool(result);\\n    }\\n    /// @notice Performs the decrypt operation on a ciphertext\\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param input1 the input ciphertext\\n    function decrypt(euint8 input1) internal pure returns (uint8) {\\n        if (!isInitialized(input1)) {\\n            input1 = asEuint8(0);\\n        }\\n        uint256 unwrappedInput1 = euint8.unwrap(input1);\\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\\n        uint256 result = FheOps(Precompiles.Fheos).decrypt(Common.EUINT8_TFHE, inputAsBytes);\\n        return Common.bigIntToUint8(result);\\n    }\\n    /// @notice Performs the decrypt operation on a ciphertext\\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param input1 the input ciphertext\\n    function decrypt(euint16 input1) internal pure returns (uint16) {\\n        if (!isInitialized(input1)) {\\n            input1 = asEuint16(0);\\n        }\\n        uint256 unwrappedInput1 = euint16.unwrap(input1);\\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\\n        uint256 result = FheOps(Precompiles.Fheos).decrypt(Common.EUINT16_TFHE, inputAsBytes);\\n        return Common.bigIntToUint16(result);\\n    }\\n    /// @notice Performs the decrypt operation on a ciphertext\\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param input1 the input ciphertext\\n    function decrypt(euint32 input1) internal pure returns (uint32) {\\n        if (!isInitialized(input1)) {\\n            input1 = asEuint32(0);\\n        }\\n        uint256 unwrappedInput1 = euint32.unwrap(input1);\\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\\n        uint256 result = FheOps(Precompiles.Fheos).decrypt(Common.EUINT32_TFHE, inputAsBytes);\\n        return Common.bigIntToUint32(result);\\n    }\\n    /// @notice Performs the decrypt operation on a ciphertext\\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param input1 the input ciphertext\\n    function decrypt(euint64 input1) internal pure returns (uint64) {\\n        if (!isInitialized(input1)) {\\n            input1 = asEuint64(0);\\n        }\\n        uint256 unwrappedInput1 = euint64.unwrap(input1);\\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\\n        uint256 result = FheOps(Precompiles.Fheos).decrypt(Common.EUINT64_TFHE, inputAsBytes);\\n        return Common.bigIntToUint64(result);\\n    }\\n    /// @notice Performs the decrypt operation on a ciphertext\\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param input1 the input ciphertext\\n    function decrypt(euint128 input1) internal pure returns (uint128) {\\n        if (!isInitialized(input1)) {\\n            input1 = asEuint128(0);\\n        }\\n        uint256 unwrappedInput1 = euint128.unwrap(input1);\\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\\n        uint256 result = FheOps(Precompiles.Fheos).decrypt(Common.EUINT128_TFHE, inputAsBytes);\\n        return Common.bigIntToUint128(result);\\n    }\\n    /// @notice Performs the decrypt operation on a ciphertext\\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param input1 the input ciphertext\\n    function decrypt(euint256 input1) internal pure returns (uint256) {\\n        if (!isInitialized(input1)) {\\n            input1 = asEuint256(0);\\n        }\\n        uint256 unwrappedInput1 = euint256.unwrap(input1);\\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\\n        uint256 result = FheOps(Precompiles.Fheos).decrypt(Common.EUINT256_TFHE, inputAsBytes);\\n        return Common.bigIntToUint256(result);\\n    }\\n    /// @notice Performs the decrypt operation on a ciphertext\\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param input1 the input ciphertext\\n    function decrypt(eaddress input1) internal pure returns (address) {\\n        if (!isInitialized(input1)) {\\n            input1 = asEaddress(0);\\n        }\\n        uint256 unwrappedInput1 = eaddress.unwrap(input1);\\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\\n        uint256 result = FheOps(Precompiles.Fheos).decrypt(Common.EADDRESS_TFHE, inputAsBytes);\\n        return Common.bigIntToAddress(result);\\n    }\\n    /// @notice This functions performs the lte operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function lte(euint8 lhs, euint8 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).lte);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the lte operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function lte(euint16 lhs, euint16 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).lte);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the lte operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function lte(euint32 lhs, euint32 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).lte);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the lte operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function lte(euint64 lhs, euint64 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).lte);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the lte operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function lte(euint128 lhs, euint128 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n        uint256 unwrappedInput1 = euint128.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint128.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).lte);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the sub operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function sub(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).sub);\\n        return euint8.wrap(result);\\n    }\\n    /// @notice This functions performs the sub operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function sub(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).sub);\\n        return euint16.wrap(result);\\n    }\\n    /// @notice This functions performs the sub operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function sub(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).sub);\\n        return euint32.wrap(result);\\n    }\\n    /// @notice This functions performs the sub operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function sub(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).sub);\\n        return euint64.wrap(result);\\n    }\\n    /// @notice This functions performs the sub operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function sub(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n        uint256 unwrappedInput1 = euint128.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint128.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).sub);\\n        return euint128.wrap(result);\\n    }\\n    /// @notice This functions performs the mul operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function mul(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).mul);\\n        return euint8.wrap(result);\\n    }\\n    /// @notice This functions performs the mul operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function mul(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).mul);\\n        return euint16.wrap(result);\\n    }\\n    /// @notice This functions performs the mul operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function mul(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).mul);\\n        return euint32.wrap(result);\\n    }\\n    /// @notice This functions performs the mul operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function mul(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).mul);\\n        return euint64.wrap(result);\\n    }\\n    /// @notice This functions performs the lt operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function lt(euint8 lhs, euint8 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).lt);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the lt operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function lt(euint16 lhs, euint16 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).lt);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the lt operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function lt(euint32 lhs, euint32 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).lt);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the lt operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function lt(euint64 lhs, euint64 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).lt);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the lt operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function lt(euint128 lhs, euint128 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n        uint256 unwrappedInput1 = euint128.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint128.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).lt);\\n        return ebool.wrap(result);\\n    }\\n\\n    function select(ebool input1, ebool input2, ebool input3) internal pure returns (ebool) {\\n        if (!isInitialized(input1)) {\\n            input1 = asEbool(0);\\n        }\\n        if (!isInitialized(input2)) {\\n            input2 = asEbool(0);\\n        }\\n        if (!isInitialized(input3)) {\\n            input3 = asEbool(0);\\n        }\\n\\n        uint256 unwrappedInput1 = ebool.unwrap(input1);\\n        uint256 unwrappedInput2 = ebool.unwrap(input2);\\n        uint256 unwrappedInput3 = ebool.unwrap(input3);\\n\\n        uint256 result = Impl.select(Common.EBOOL_TFHE, unwrappedInput1, unwrappedInput2, unwrappedInput3);\\n        return ebool.wrap(result);\\n    }\\n\\n    function select(ebool input1, euint8 input2, euint8 input3) internal pure returns (euint8) {\\n        if (!isInitialized(input1)) {\\n            input1 = asEbool(0);\\n        }\\n        if (!isInitialized(input2)) {\\n            input2 = asEuint8(0);\\n        }\\n        if (!isInitialized(input3)) {\\n            input3 = asEuint8(0);\\n        }\\n\\n        uint256 unwrappedInput1 = ebool.unwrap(input1);\\n        uint256 unwrappedInput2 = euint8.unwrap(input2);\\n        uint256 unwrappedInput3 = euint8.unwrap(input3);\\n\\n        uint256 result = Impl.select(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, unwrappedInput3);\\n        return euint8.wrap(result);\\n    }\\n\\n    function select(ebool input1, euint16 input2, euint16 input3) internal pure returns (euint16) {\\n        if (!isInitialized(input1)) {\\n            input1 = asEbool(0);\\n        }\\n        if (!isInitialized(input2)) {\\n            input2 = asEuint16(0);\\n        }\\n        if (!isInitialized(input3)) {\\n            input3 = asEuint16(0);\\n        }\\n\\n        uint256 unwrappedInput1 = ebool.unwrap(input1);\\n        uint256 unwrappedInput2 = euint16.unwrap(input2);\\n        uint256 unwrappedInput3 = euint16.unwrap(input3);\\n\\n        uint256 result = Impl.select(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, unwrappedInput3);\\n        return euint16.wrap(result);\\n    }\\n\\n    function select(ebool input1, euint32 input2, euint32 input3) internal pure returns (euint32) {\\n        if (!isInitialized(input1)) {\\n            input1 = asEbool(0);\\n        }\\n        if (!isInitialized(input2)) {\\n            input2 = asEuint32(0);\\n        }\\n        if (!isInitialized(input3)) {\\n            input3 = asEuint32(0);\\n        }\\n\\n        uint256 unwrappedInput1 = ebool.unwrap(input1);\\n        uint256 unwrappedInput2 = euint32.unwrap(input2);\\n        uint256 unwrappedInput3 = euint32.unwrap(input3);\\n\\n        uint256 result = Impl.select(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, unwrappedInput3);\\n        return euint32.wrap(result);\\n    }\\n\\n    function select(ebool input1, euint64 input2, euint64 input3) internal pure returns (euint64) {\\n        if (!isInitialized(input1)) {\\n            input1 = asEbool(0);\\n        }\\n        if (!isInitialized(input2)) {\\n            input2 = asEuint64(0);\\n        }\\n        if (!isInitialized(input3)) {\\n            input3 = asEuint64(0);\\n        }\\n\\n        uint256 unwrappedInput1 = ebool.unwrap(input1);\\n        uint256 unwrappedInput2 = euint64.unwrap(input2);\\n        uint256 unwrappedInput3 = euint64.unwrap(input3);\\n\\n        uint256 result = Impl.select(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, unwrappedInput3);\\n        return euint64.wrap(result);\\n    }\\n\\n    function select(ebool input1, euint128 input2, euint128 input3) internal pure returns (euint128) {\\n        if (!isInitialized(input1)) {\\n            input1 = asEbool(0);\\n        }\\n        if (!isInitialized(input2)) {\\n            input2 = asEuint128(0);\\n        }\\n        if (!isInitialized(input3)) {\\n            input3 = asEuint128(0);\\n        }\\n\\n        uint256 unwrappedInput1 = ebool.unwrap(input1);\\n        uint256 unwrappedInput2 = euint128.unwrap(input2);\\n        uint256 unwrappedInput3 = euint128.unwrap(input3);\\n\\n        uint256 result = Impl.select(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, unwrappedInput3);\\n        return euint128.wrap(result);\\n    }\\n\\n    function select(ebool input1, euint256 input2, euint256 input3) internal pure returns (euint256) {\\n        if (!isInitialized(input1)) {\\n            input1 = asEbool(0);\\n        }\\n        if (!isInitialized(input2)) {\\n            input2 = asEuint256(0);\\n        }\\n        if (!isInitialized(input3)) {\\n            input3 = asEuint256(0);\\n        }\\n\\n        uint256 unwrappedInput1 = ebool.unwrap(input1);\\n        uint256 unwrappedInput2 = euint256.unwrap(input2);\\n        uint256 unwrappedInput3 = euint256.unwrap(input3);\\n\\n        uint256 result = Impl.select(Common.EUINT256_TFHE, unwrappedInput1, unwrappedInput2, unwrappedInput3);\\n        return euint256.wrap(result);\\n    }\\n\\n    function select(ebool input1, eaddress input2, eaddress input3) internal pure returns (eaddress) {\\n        if (!isInitialized(input1)) {\\n            input1 = asEbool(0);\\n        }\\n        if (!isInitialized(input2)) {\\n            input2 = asEaddress(0);\\n        }\\n        if (!isInitialized(input3)) {\\n            input3 = asEaddress(0);\\n        }\\n\\n        uint256 unwrappedInput1 = ebool.unwrap(input1);\\n        uint256 unwrappedInput2 = eaddress.unwrap(input2);\\n        uint256 unwrappedInput3 = eaddress.unwrap(input3);\\n\\n        uint256 result = Impl.select(Common.EADDRESS_TFHE, unwrappedInput1, unwrappedInput2, unwrappedInput3);\\n        return eaddress.wrap(result);\\n    }\\n    /// @notice Performs the req operation on a ciphertext\\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param input1 the input ciphertext\\n    function req(ebool input1) internal pure  {\\n        if (!isInitialized(input1)) {\\n            input1 = asEbool(0);\\n        }\\n        uint256 unwrappedInput1 = ebool.unwrap(input1);\\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\\n        FheOps(Precompiles.Fheos).req(Common.EBOOL_TFHE, inputAsBytes);\\n    }\\n    /// @notice Performs the req operation on a ciphertext\\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param input1 the input ciphertext\\n    function req(euint8 input1) internal pure  {\\n        if (!isInitialized(input1)) {\\n            input1 = asEuint8(0);\\n        }\\n        uint256 unwrappedInput1 = euint8.unwrap(input1);\\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\\n        FheOps(Precompiles.Fheos).req(Common.EUINT8_TFHE, inputAsBytes);\\n    }\\n    /// @notice Performs the req operation on a ciphertext\\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param input1 the input ciphertext\\n    function req(euint16 input1) internal pure  {\\n        if (!isInitialized(input1)) {\\n            input1 = asEuint16(0);\\n        }\\n        uint256 unwrappedInput1 = euint16.unwrap(input1);\\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\\n        FheOps(Precompiles.Fheos).req(Common.EUINT16_TFHE, inputAsBytes);\\n    }\\n    /// @notice Performs the req operation on a ciphertext\\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param input1 the input ciphertext\\n    function req(euint32 input1) internal pure  {\\n        if (!isInitialized(input1)) {\\n            input1 = asEuint32(0);\\n        }\\n        uint256 unwrappedInput1 = euint32.unwrap(input1);\\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\\n        FheOps(Precompiles.Fheos).req(Common.EUINT32_TFHE, inputAsBytes);\\n    }\\n    /// @notice Performs the req operation on a ciphertext\\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param input1 the input ciphertext\\n    function req(euint64 input1) internal pure  {\\n        if (!isInitialized(input1)) {\\n            input1 = asEuint64(0);\\n        }\\n        uint256 unwrappedInput1 = euint64.unwrap(input1);\\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\\n        FheOps(Precompiles.Fheos).req(Common.EUINT64_TFHE, inputAsBytes);\\n    }\\n    /// @notice Performs the req operation on a ciphertext\\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param input1 the input ciphertext\\n    function req(euint128 input1) internal pure  {\\n        if (!isInitialized(input1)) {\\n            input1 = asEuint128(0);\\n        }\\n        uint256 unwrappedInput1 = euint128.unwrap(input1);\\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\\n        FheOps(Precompiles.Fheos).req(Common.EUINT128_TFHE, inputAsBytes);\\n    }\\n    /// @notice Performs the req operation on a ciphertext\\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param input1 the input ciphertext\\n    function req(euint256 input1) internal pure  {\\n        if (!isInitialized(input1)) {\\n            input1 = asEuint256(0);\\n        }\\n        uint256 unwrappedInput1 = euint256.unwrap(input1);\\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\\n        FheOps(Precompiles.Fheos).req(Common.EUINT256_TFHE, inputAsBytes);\\n    }\\n    /// @notice This functions performs the div operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function div(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).div);\\n        return euint8.wrap(result);\\n    }\\n    /// @notice This functions performs the div operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function div(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).div);\\n        return euint16.wrap(result);\\n    }\\n    /// @notice This functions performs the div operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function div(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).div);\\n        return euint32.wrap(result);\\n    }\\n    /// @notice This functions performs the gt operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function gt(euint8 lhs, euint8 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).gt);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the gt operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function gt(euint16 lhs, euint16 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).gt);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the gt operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function gt(euint32 lhs, euint32 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).gt);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the gt operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function gt(euint64 lhs, euint64 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).gt);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the gt operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function gt(euint128 lhs, euint128 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n        uint256 unwrappedInput1 = euint128.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint128.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).gt);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the gte operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function gte(euint8 lhs, euint8 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).gte);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the gte operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function gte(euint16 lhs, euint16 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).gte);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the gte operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function gte(euint32 lhs, euint32 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).gte);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the gte operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function gte(euint64 lhs, euint64 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).gte);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the gte operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function gte(euint128 lhs, euint128 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n        uint256 unwrappedInput1 = euint128.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint128.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).gte);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the rem operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function rem(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).rem);\\n        return euint8.wrap(result);\\n    }\\n    /// @notice This functions performs the rem operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function rem(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).rem);\\n        return euint16.wrap(result);\\n    }\\n    /// @notice This functions performs the rem operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function rem(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).rem);\\n        return euint32.wrap(result);\\n    }\\n    /// @notice This functions performs the and operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function and(ebool lhs, ebool rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEbool(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEbool(0);\\n        }\\n        uint256 unwrappedInput1 = ebool.unwrap(lhs);\\n        uint256 unwrappedInput2 = ebool.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EBOOL_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).and);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the and operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function and(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).and);\\n        return euint8.wrap(result);\\n    }\\n    /// @notice This functions performs the and operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function and(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).and);\\n        return euint16.wrap(result);\\n    }\\n    /// @notice This functions performs the and operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function and(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).and);\\n        return euint32.wrap(result);\\n    }\\n    /// @notice This functions performs the and operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function and(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).and);\\n        return euint64.wrap(result);\\n    }\\n    /// @notice This functions performs the and operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function and(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n        uint256 unwrappedInput1 = euint128.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint128.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).and);\\n        return euint128.wrap(result);\\n    }\\n    /// @notice This functions performs the or operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function or(ebool lhs, ebool rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEbool(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEbool(0);\\n        }\\n        uint256 unwrappedInput1 = ebool.unwrap(lhs);\\n        uint256 unwrappedInput2 = ebool.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EBOOL_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).or);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the or operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function or(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).or);\\n        return euint8.wrap(result);\\n    }\\n    /// @notice This functions performs the or operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function or(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).or);\\n        return euint16.wrap(result);\\n    }\\n    /// @notice This functions performs the or operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function or(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).or);\\n        return euint32.wrap(result);\\n    }\\n    /// @notice This functions performs the or operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function or(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).or);\\n        return euint64.wrap(result);\\n    }\\n    /// @notice This functions performs the or operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function or(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n        uint256 unwrappedInput1 = euint128.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint128.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).or);\\n        return euint128.wrap(result);\\n    }\\n    /// @notice This functions performs the xor operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function xor(ebool lhs, ebool rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEbool(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEbool(0);\\n        }\\n        uint256 unwrappedInput1 = ebool.unwrap(lhs);\\n        uint256 unwrappedInput2 = ebool.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EBOOL_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).xor);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the xor operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function xor(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).xor);\\n        return euint8.wrap(result);\\n    }\\n    /// @notice This functions performs the xor operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function xor(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).xor);\\n        return euint16.wrap(result);\\n    }\\n    /// @notice This functions performs the xor operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function xor(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).xor);\\n        return euint32.wrap(result);\\n    }\\n    /// @notice This functions performs the xor operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function xor(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).xor);\\n        return euint64.wrap(result);\\n    }\\n    /// @notice This functions performs the xor operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function xor(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n        uint256 unwrappedInput1 = euint128.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint128.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).xor);\\n        return euint128.wrap(result);\\n    }\\n    /// @notice This functions performs the eq operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function eq(ebool lhs, ebool rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEbool(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEbool(0);\\n        }\\n        uint256 unwrappedInput1 = ebool.unwrap(lhs);\\n        uint256 unwrappedInput2 = ebool.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EBOOL_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).eq);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the eq operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function eq(euint8 lhs, euint8 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).eq);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the eq operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function eq(euint16 lhs, euint16 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).eq);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the eq operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function eq(euint32 lhs, euint32 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).eq);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the eq operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function eq(euint64 lhs, euint64 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).eq);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the eq operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function eq(euint128 lhs, euint128 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n        uint256 unwrappedInput1 = euint128.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint128.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).eq);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the eq operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function eq(euint256 lhs, euint256 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint256(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint256(0);\\n        }\\n        uint256 unwrappedInput1 = euint256.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint256.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT256_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).eq);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the eq operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function eq(eaddress lhs, eaddress rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEaddress(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEaddress(0);\\n        }\\n        uint256 unwrappedInput1 = eaddress.unwrap(lhs);\\n        uint256 unwrappedInput2 = eaddress.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EADDRESS_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).eq);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the ne operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function ne(ebool lhs, ebool rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEbool(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEbool(0);\\n        }\\n        uint256 unwrappedInput1 = ebool.unwrap(lhs);\\n        uint256 unwrappedInput2 = ebool.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EBOOL_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).ne);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the ne operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function ne(euint8 lhs, euint8 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).ne);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the ne operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function ne(euint16 lhs, euint16 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).ne);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the ne operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function ne(euint32 lhs, euint32 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).ne);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the ne operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function ne(euint64 lhs, euint64 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).ne);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the ne operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function ne(euint128 lhs, euint128 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n        uint256 unwrappedInput1 = euint128.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint128.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).ne);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the ne operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function ne(euint256 lhs, euint256 rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint256(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint256(0);\\n        }\\n        uint256 unwrappedInput1 = euint256.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint256.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT256_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).ne);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the ne operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function ne(eaddress lhs, eaddress rhs) internal pure returns (ebool) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEaddress(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEaddress(0);\\n        }\\n        uint256 unwrappedInput1 = eaddress.unwrap(lhs);\\n        uint256 unwrappedInput2 = eaddress.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EADDRESS_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).ne);\\n        return ebool.wrap(result);\\n    }\\n    /// @notice This functions performs the min operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function min(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).min);\\n        return euint8.wrap(result);\\n    }\\n    /// @notice This functions performs the min operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function min(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).min);\\n        return euint16.wrap(result);\\n    }\\n    /// @notice This functions performs the min operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function min(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).min);\\n        return euint32.wrap(result);\\n    }\\n    /// @notice This functions performs the min operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function min(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).min);\\n        return euint64.wrap(result);\\n    }\\n    /// @notice This functions performs the min operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function min(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n        uint256 unwrappedInput1 = euint128.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint128.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).min);\\n        return euint128.wrap(result);\\n    }\\n    /// @notice This functions performs the max operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function max(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).max);\\n        return euint8.wrap(result);\\n    }\\n    /// @notice This functions performs the max operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function max(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).max);\\n        return euint16.wrap(result);\\n    }\\n    /// @notice This functions performs the max operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function max(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).max);\\n        return euint32.wrap(result);\\n    }\\n    /// @notice This functions performs the max operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function max(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).max);\\n        return euint64.wrap(result);\\n    }\\n    /// @notice This functions performs the max operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function max(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n        uint256 unwrappedInput1 = euint128.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint128.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).max);\\n        return euint128.wrap(result);\\n    }\\n    /// @notice This functions performs the shl operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function shl(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).shl);\\n        return euint8.wrap(result);\\n    }\\n    /// @notice This functions performs the shl operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function shl(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).shl);\\n        return euint16.wrap(result);\\n    }\\n    /// @notice This functions performs the shl operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function shl(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).shl);\\n        return euint32.wrap(result);\\n    }\\n    /// @notice This functions performs the shl operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function shl(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).shl);\\n        return euint64.wrap(result);\\n    }\\n    /// @notice This functions performs the shl operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function shl(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n        uint256 unwrappedInput1 = euint128.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint128.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).shl);\\n        return euint128.wrap(result);\\n    }\\n    /// @notice This functions performs the shr operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function shr(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).shr);\\n        return euint8.wrap(result);\\n    }\\n    /// @notice This functions performs the shr operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function shr(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).shr);\\n        return euint16.wrap(result);\\n    }\\n    /// @notice This functions performs the shr operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function shr(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).shr);\\n        return euint32.wrap(result);\\n    }\\n    /// @notice This functions performs the shr operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function shr(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).shr);\\n        return euint64.wrap(result);\\n    }\\n    /// @notice This functions performs the shr operation\\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs The first input \\n    /// @param rhs The second input\\n    /// @return The result of the operation\\n    function shr(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\\n        if (!isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n        uint256 unwrappedInput1 = euint128.unwrap(lhs);\\n        uint256 unwrappedInput2 = euint128.unwrap(rhs);\\n\\n        uint256 result = mathHelper(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).shr);\\n        return euint128.wrap(result);\\n    }\\n\\n    /// @notice Performs the \\\"not\\\" for the ebool type\\n    /// @dev Implemented by a workaround due to ebool being a euint8 type behind the scenes, therefore xor is needed to assure that not(true) = false and vise-versa\\n    /// @param value input ebool ciphertext\\n    /// @return Result of the not operation on `value` \\n    function not(ebool value) internal pure returns (ebool) {\\n        return xor(value, asEbool(true));\\n    }\\n    /// @notice Performs the not operation on a ciphertext\\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param input1 the input ciphertext\\n    function not(euint8 input1) internal pure returns (euint8) {\\n        if (!isInitialized(input1)) {\\n            input1 = asEuint8(0);\\n        }\\n        uint256 unwrappedInput1 = euint8.unwrap(input1);\\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\\n        bytes memory b = FheOps(Precompiles.Fheos).not(Common.EUINT8_TFHE, inputAsBytes);\\n        uint256 result = Impl.getValue(b);\\n        return euint8.wrap(result);\\n    }\\n    /// @notice Performs the not operation on a ciphertext\\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param input1 the input ciphertext\\n    function not(euint16 input1) internal pure returns (euint16) {\\n        if (!isInitialized(input1)) {\\n            input1 = asEuint16(0);\\n        }\\n        uint256 unwrappedInput1 = euint16.unwrap(input1);\\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\\n        bytes memory b = FheOps(Precompiles.Fheos).not(Common.EUINT16_TFHE, inputAsBytes);\\n        uint256 result = Impl.getValue(b);\\n        return euint16.wrap(result);\\n    }\\n    /// @notice Performs the not operation on a ciphertext\\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param input1 the input ciphertext\\n    function not(euint32 input1) internal pure returns (euint32) {\\n        if (!isInitialized(input1)) {\\n            input1 = asEuint32(0);\\n        }\\n        uint256 unwrappedInput1 = euint32.unwrap(input1);\\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\\n        bytes memory b = FheOps(Precompiles.Fheos).not(Common.EUINT32_TFHE, inputAsBytes);\\n        uint256 result = Impl.getValue(b);\\n        return euint32.wrap(result);\\n    }\\n    /// @notice Performs the not operation on a ciphertext\\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param input1 the input ciphertext\\n    function not(euint64 input1) internal pure returns (euint64) {\\n        if (!isInitialized(input1)) {\\n            input1 = asEuint64(0);\\n        }\\n        uint256 unwrappedInput1 = euint64.unwrap(input1);\\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\\n        bytes memory b = FheOps(Precompiles.Fheos).not(Common.EUINT64_TFHE, inputAsBytes);\\n        uint256 result = Impl.getValue(b);\\n        return euint64.wrap(result);\\n    }\\n    /// @notice Performs the not operation on a ciphertext\\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param input1 the input ciphertext\\n    function not(euint128 input1) internal pure returns (euint128) {\\n        if (!isInitialized(input1)) {\\n            input1 = asEuint128(0);\\n        }\\n        uint256 unwrappedInput1 = euint128.unwrap(input1);\\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\\n        bytes memory b = FheOps(Precompiles.Fheos).not(Common.EUINT128_TFHE, inputAsBytes);\\n        uint256 result = Impl.getValue(b);\\n        return euint128.wrap(result);\\n    }\\n\\n    // ********** TYPE CASTING ************* //\\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an ebool\\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\\n    /// @return a ciphertext representation of the input\\n    function asEbool(inEbool memory value) internal pure returns (ebool) {\\n        return FHE.asEbool(value.data);\\n    }\\n    /// @notice Converts a ebool to an euint8\\n    function asEuint8(ebool value) internal pure returns (euint8) {\\n        return euint8.wrap(Impl.cast(Common.EBOOL_TFHE, ebool.unwrap(value), Common.EUINT8_TFHE));\\n    }\\n    /// @notice Converts a ebool to an euint16\\n    function asEuint16(ebool value) internal pure returns (euint16) {\\n        return euint16.wrap(Impl.cast(Common.EBOOL_TFHE, ebool.unwrap(value), Common.EUINT16_TFHE));\\n    }\\n    /// @notice Converts a ebool to an euint32\\n    function asEuint32(ebool value) internal pure returns (euint32) {\\n        return euint32.wrap(Impl.cast(Common.EBOOL_TFHE, ebool.unwrap(value), Common.EUINT32_TFHE));\\n    }\\n    /// @notice Converts a ebool to an euint64\\n    function asEuint64(ebool value) internal pure returns (euint64) {\\n        return euint64.wrap(Impl.cast(Common.EBOOL_TFHE, ebool.unwrap(value), Common.EUINT64_TFHE));\\n    }\\n    /// @notice Converts a ebool to an euint128\\n    function asEuint128(ebool value) internal pure returns (euint128) {\\n        return euint128.wrap(Impl.cast(Common.EBOOL_TFHE, ebool.unwrap(value), Common.EUINT128_TFHE));\\n    }\\n    /// @notice Converts a ebool to an euint256\\n    function asEuint256(ebool value) internal pure returns (euint256) {\\n        return euint256.wrap(Impl.cast(Common.EBOOL_TFHE, ebool.unwrap(value), Common.EUINT256_TFHE));\\n    }\\n    /// @notice Converts a ebool to an eaddress\\n    function asEaddress(ebool value) internal pure returns (eaddress) {\\n        return eaddress.wrap(Impl.cast(Common.EBOOL_TFHE, ebool.unwrap(value), Common.EADDRESS_TFHE));\\n    }\\n    \\n    /// @notice Converts a euint8 to an ebool\\n    function asEbool(euint8 value) internal pure returns (ebool) {\\n        return ne(value, asEuint8(0));\\n    }\\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an euint8\\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\\n    /// @return a ciphertext representation of the input\\n    function asEuint8(inEuint8 memory value) internal pure returns (euint8) {\\n        return FHE.asEuint8(value.data);\\n    }\\n    /// @notice Converts a euint8 to an euint16\\n    function asEuint16(euint8 value) internal pure returns (euint16) {\\n        return euint16.wrap(Impl.cast(Common.EUINT8_TFHE, euint8.unwrap(value), Common.EUINT16_TFHE));\\n    }\\n    /// @notice Converts a euint8 to an euint32\\n    function asEuint32(euint8 value) internal pure returns (euint32) {\\n        return euint32.wrap(Impl.cast(Common.EUINT8_TFHE, euint8.unwrap(value), Common.EUINT32_TFHE));\\n    }\\n    /// @notice Converts a euint8 to an euint64\\n    function asEuint64(euint8 value) internal pure returns (euint64) {\\n        return euint64.wrap(Impl.cast(Common.EUINT8_TFHE, euint8.unwrap(value), Common.EUINT64_TFHE));\\n    }\\n    /// @notice Converts a euint8 to an euint128\\n    function asEuint128(euint8 value) internal pure returns (euint128) {\\n        return euint128.wrap(Impl.cast(Common.EUINT8_TFHE, euint8.unwrap(value), Common.EUINT128_TFHE));\\n    }\\n    /// @notice Converts a euint8 to an euint256\\n    function asEuint256(euint8 value) internal pure returns (euint256) {\\n        return euint256.wrap(Impl.cast(Common.EUINT8_TFHE, euint8.unwrap(value), Common.EUINT256_TFHE));\\n    }\\n    /// @notice Converts a euint8 to an eaddress\\n    function asEaddress(euint8 value) internal pure returns (eaddress) {\\n        return eaddress.wrap(Impl.cast(Common.EUINT8_TFHE, euint8.unwrap(value), Common.EADDRESS_TFHE));\\n    }\\n    \\n    /// @notice Converts a euint16 to an ebool\\n    function asEbool(euint16 value) internal pure returns (ebool) {\\n        return ne(value, asEuint16(0));\\n    }\\n    /// @notice Converts a euint16 to an euint8\\n    function asEuint8(euint16 value) internal pure returns (euint8) {\\n        return euint8.wrap(Impl.cast(Common.EUINT16_TFHE, euint16.unwrap(value), Common.EUINT8_TFHE));\\n    }\\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an euint16\\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\\n    /// @return a ciphertext representation of the input\\n    function asEuint16(inEuint16 memory value) internal pure returns (euint16) {\\n        return FHE.asEuint16(value.data);\\n    }\\n    /// @notice Converts a euint16 to an euint32\\n    function asEuint32(euint16 value) internal pure returns (euint32) {\\n        return euint32.wrap(Impl.cast(Common.EUINT16_TFHE, euint16.unwrap(value), Common.EUINT32_TFHE));\\n    }\\n    /// @notice Converts a euint16 to an euint64\\n    function asEuint64(euint16 value) internal pure returns (euint64) {\\n        return euint64.wrap(Impl.cast(Common.EUINT16_TFHE, euint16.unwrap(value), Common.EUINT64_TFHE));\\n    }\\n    /// @notice Converts a euint16 to an euint128\\n    function asEuint128(euint16 value) internal pure returns (euint128) {\\n        return euint128.wrap(Impl.cast(Common.EUINT16_TFHE, euint16.unwrap(value), Common.EUINT128_TFHE));\\n    }\\n    /// @notice Converts a euint16 to an euint256\\n    function asEuint256(euint16 value) internal pure returns (euint256) {\\n        return euint256.wrap(Impl.cast(Common.EUINT16_TFHE, euint16.unwrap(value), Common.EUINT256_TFHE));\\n    }\\n    /// @notice Converts a euint16 to an eaddress\\n    function asEaddress(euint16 value) internal pure returns (eaddress) {\\n        return eaddress.wrap(Impl.cast(Common.EUINT16_TFHE, euint16.unwrap(value), Common.EADDRESS_TFHE));\\n    }\\n    \\n    /// @notice Converts a euint32 to an ebool\\n    function asEbool(euint32 value) internal pure returns (ebool) {\\n        return ne(value, asEuint32(0));\\n    }\\n    /// @notice Converts a euint32 to an euint8\\n    function asEuint8(euint32 value) internal pure returns (euint8) {\\n        return euint8.wrap(Impl.cast(Common.EUINT32_TFHE, euint32.unwrap(value), Common.EUINT8_TFHE));\\n    }\\n    /// @notice Converts a euint32 to an euint16\\n    function asEuint16(euint32 value) internal pure returns (euint16) {\\n        return euint16.wrap(Impl.cast(Common.EUINT32_TFHE, euint32.unwrap(value), Common.EUINT16_TFHE));\\n    }\\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an euint32\\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\\n    /// @return a ciphertext representation of the input\\n    function asEuint32(inEuint32 memory value) internal pure returns (euint32) {\\n        return FHE.asEuint32(value.data);\\n    }\\n    /// @notice Converts a euint32 to an euint64\\n    function asEuint64(euint32 value) internal pure returns (euint64) {\\n        return euint64.wrap(Impl.cast(Common.EUINT32_TFHE, euint32.unwrap(value), Common.EUINT64_TFHE));\\n    }\\n    /// @notice Converts a euint32 to an euint128\\n    function asEuint128(euint32 value) internal pure returns (euint128) {\\n        return euint128.wrap(Impl.cast(Common.EUINT32_TFHE, euint32.unwrap(value), Common.EUINT128_TFHE));\\n    }\\n    /// @notice Converts a euint32 to an euint256\\n    function asEuint256(euint32 value) internal pure returns (euint256) {\\n        return euint256.wrap(Impl.cast(Common.EUINT32_TFHE, euint32.unwrap(value), Common.EUINT256_TFHE));\\n    }\\n    /// @notice Converts a euint32 to an eaddress\\n    function asEaddress(euint32 value) internal pure returns (eaddress) {\\n        return eaddress.wrap(Impl.cast(Common.EUINT32_TFHE, euint32.unwrap(value), Common.EADDRESS_TFHE));\\n    }\\n    \\n    /// @notice Converts a euint64 to an ebool\\n    function asEbool(euint64 value) internal pure returns (ebool) {\\n        return ne(value, asEuint64(0));\\n    }\\n    /// @notice Converts a euint64 to an euint8\\n    function asEuint8(euint64 value) internal pure returns (euint8) {\\n        return euint8.wrap(Impl.cast(Common.EUINT64_TFHE, euint64.unwrap(value), Common.EUINT8_TFHE));\\n    }\\n    /// @notice Converts a euint64 to an euint16\\n    function asEuint16(euint64 value) internal pure returns (euint16) {\\n        return euint16.wrap(Impl.cast(Common.EUINT64_TFHE, euint64.unwrap(value), Common.EUINT16_TFHE));\\n    }\\n    /// @notice Converts a euint64 to an euint32\\n    function asEuint32(euint64 value) internal pure returns (euint32) {\\n        return euint32.wrap(Impl.cast(Common.EUINT64_TFHE, euint64.unwrap(value), Common.EUINT32_TFHE));\\n    }\\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an euint64\\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\\n    /// @return a ciphertext representation of the input\\n    function asEuint64(inEuint64 memory value) internal pure returns (euint64) {\\n        return FHE.asEuint64(value.data);\\n    }\\n    /// @notice Converts a euint64 to an euint128\\n    function asEuint128(euint64 value) internal pure returns (euint128) {\\n        return euint128.wrap(Impl.cast(Common.EUINT64_TFHE, euint64.unwrap(value), Common.EUINT128_TFHE));\\n    }\\n    /// @notice Converts a euint64 to an euint256\\n    function asEuint256(euint64 value) internal pure returns (euint256) {\\n        return euint256.wrap(Impl.cast(Common.EUINT64_TFHE, euint64.unwrap(value), Common.EUINT256_TFHE));\\n    }\\n    /// @notice Converts a euint64 to an eaddress\\n    function asEaddress(euint64 value) internal pure returns (eaddress) {\\n        return eaddress.wrap(Impl.cast(Common.EUINT64_TFHE, euint64.unwrap(value), Common.EADDRESS_TFHE));\\n    }\\n    \\n    /// @notice Converts a euint128 to an ebool\\n    function asEbool(euint128 value) internal pure returns (ebool) {\\n        return ne(value, asEuint128(0));\\n    }\\n    /// @notice Converts a euint128 to an euint8\\n    function asEuint8(euint128 value) internal pure returns (euint8) {\\n        return euint8.wrap(Impl.cast(Common.EUINT128_TFHE, euint128.unwrap(value), Common.EUINT8_TFHE));\\n    }\\n    /// @notice Converts a euint128 to an euint16\\n    function asEuint16(euint128 value) internal pure returns (euint16) {\\n        return euint16.wrap(Impl.cast(Common.EUINT128_TFHE, euint128.unwrap(value), Common.EUINT16_TFHE));\\n    }\\n    /// @notice Converts a euint128 to an euint32\\n    function asEuint32(euint128 value) internal pure returns (euint32) {\\n        return euint32.wrap(Impl.cast(Common.EUINT128_TFHE, euint128.unwrap(value), Common.EUINT32_TFHE));\\n    }\\n    /// @notice Converts a euint128 to an euint64\\n    function asEuint64(euint128 value) internal pure returns (euint64) {\\n        return euint64.wrap(Impl.cast(Common.EUINT128_TFHE, euint128.unwrap(value), Common.EUINT64_TFHE));\\n    }\\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an euint128\\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\\n    /// @return a ciphertext representation of the input\\n    function asEuint128(inEuint128 memory value) internal pure returns (euint128) {\\n        return FHE.asEuint128(value.data);\\n    }\\n    /// @notice Converts a euint128 to an euint256\\n    function asEuint256(euint128 value) internal pure returns (euint256) {\\n        return euint256.wrap(Impl.cast(Common.EUINT128_TFHE, euint128.unwrap(value), Common.EUINT256_TFHE));\\n    }\\n    /// @notice Converts a euint128 to an eaddress\\n    function asEaddress(euint128 value) internal pure returns (eaddress) {\\n        return eaddress.wrap(Impl.cast(Common.EUINT128_TFHE, euint128.unwrap(value), Common.EADDRESS_TFHE));\\n    }\\n    \\n    /// @notice Converts a euint256 to an ebool\\n    function asEbool(euint256 value) internal pure returns (ebool) {\\n        return ne(value, asEuint256(0));\\n    }\\n    /// @notice Converts a euint256 to an euint8\\n    function asEuint8(euint256 value) internal pure returns (euint8) {\\n        return euint8.wrap(Impl.cast(Common.EUINT256_TFHE, euint256.unwrap(value), Common.EUINT8_TFHE));\\n    }\\n    /// @notice Converts a euint256 to an euint16\\n    function asEuint16(euint256 value) internal pure returns (euint16) {\\n        return euint16.wrap(Impl.cast(Common.EUINT256_TFHE, euint256.unwrap(value), Common.EUINT16_TFHE));\\n    }\\n    /// @notice Converts a euint256 to an euint32\\n    function asEuint32(euint256 value) internal pure returns (euint32) {\\n        return euint32.wrap(Impl.cast(Common.EUINT256_TFHE, euint256.unwrap(value), Common.EUINT32_TFHE));\\n    }\\n    /// @notice Converts a euint256 to an euint64\\n    function asEuint64(euint256 value) internal pure returns (euint64) {\\n        return euint64.wrap(Impl.cast(Common.EUINT256_TFHE, euint256.unwrap(value), Common.EUINT64_TFHE));\\n    }\\n    /// @notice Converts a euint256 to an euint128\\n    function asEuint128(euint256 value) internal pure returns (euint128) {\\n        return euint128.wrap(Impl.cast(Common.EUINT256_TFHE, euint256.unwrap(value), Common.EUINT128_TFHE));\\n    }\\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an euint256\\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\\n    /// @return a ciphertext representation of the input\\n    function asEuint256(inEuint256 memory value) internal pure returns (euint256) {\\n        return FHE.asEuint256(value.data);\\n    }\\n    /// @notice Converts a euint256 to an eaddress\\n    function asEaddress(euint256 value) internal pure returns (eaddress) {\\n        return eaddress.wrap(Impl.cast(Common.EUINT256_TFHE, euint256.unwrap(value), Common.EADDRESS_TFHE));\\n    }\\n    \\n    /// @notice Converts a eaddress to an ebool\\n    function asEbool(eaddress value) internal pure returns (ebool) {\\n        return ne(value, asEaddress(0));\\n    }\\n    /// @notice Converts a eaddress to an euint8\\n    function asEuint8(eaddress value) internal pure returns (euint8) {\\n        return euint8.wrap(Impl.cast(Common.EADDRESS_TFHE, eaddress.unwrap(value), Common.EUINT8_TFHE));\\n    }\\n    /// @notice Converts a eaddress to an euint16\\n    function asEuint16(eaddress value) internal pure returns (euint16) {\\n        return euint16.wrap(Impl.cast(Common.EADDRESS_TFHE, eaddress.unwrap(value), Common.EUINT16_TFHE));\\n    }\\n    /// @notice Converts a eaddress to an euint32\\n    function asEuint32(eaddress value) internal pure returns (euint32) {\\n        return euint32.wrap(Impl.cast(Common.EADDRESS_TFHE, eaddress.unwrap(value), Common.EUINT32_TFHE));\\n    }\\n    /// @notice Converts a eaddress to an euint64\\n    function asEuint64(eaddress value) internal pure returns (euint64) {\\n        return euint64.wrap(Impl.cast(Common.EADDRESS_TFHE, eaddress.unwrap(value), Common.EUINT64_TFHE));\\n    }\\n    /// @notice Converts a eaddress to an euint128\\n    function asEuint128(eaddress value) internal pure returns (euint128) {\\n        return euint128.wrap(Impl.cast(Common.EADDRESS_TFHE, eaddress.unwrap(value), Common.EUINT128_TFHE));\\n    }\\n    /// @notice Converts a eaddress to an euint256\\n    function asEuint256(eaddress value) internal pure returns (euint256) {\\n        return euint256.wrap(Impl.cast(Common.EADDRESS_TFHE, eaddress.unwrap(value), Common.EUINT256_TFHE));\\n    }\\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an eaddress\\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\\n    /// @return a ciphertext representation of the input\\n    function asEaddress(inEaddress memory value) internal pure returns (eaddress) {\\n        return FHE.asEaddress(value.data);\\n    }\\n    /// @notice Converts a uint256 to an ebool\\n    function asEbool(uint256 value) internal pure returns (ebool) {\\n        return ebool.wrap(Impl.trivialEncrypt(value, Common.EBOOL_TFHE));\\n    }\\n    /// @notice Converts a uint256 to an euint8\\n    function asEuint8(uint256 value) internal pure returns (euint8) {\\n        return euint8.wrap(Impl.trivialEncrypt(value, Common.EUINT8_TFHE));\\n    }\\n    /// @notice Converts a uint256 to an euint16\\n    function asEuint16(uint256 value) internal pure returns (euint16) {\\n        return euint16.wrap(Impl.trivialEncrypt(value, Common.EUINT16_TFHE));\\n    }\\n    /// @notice Converts a uint256 to an euint32\\n    function asEuint32(uint256 value) internal pure returns (euint32) {\\n        return euint32.wrap(Impl.trivialEncrypt(value, Common.EUINT32_TFHE));\\n    }\\n    /// @notice Converts a uint256 to an euint64\\n    function asEuint64(uint256 value) internal pure returns (euint64) {\\n        return euint64.wrap(Impl.trivialEncrypt(value, Common.EUINT64_TFHE));\\n    }\\n    /// @notice Converts a uint256 to an euint128\\n    function asEuint128(uint256 value) internal pure returns (euint128) {\\n        return euint128.wrap(Impl.trivialEncrypt(value, Common.EUINT128_TFHE));\\n    }\\n    /// @notice Converts a uint256 to an euint256\\n    function asEuint256(uint256 value) internal pure returns (euint256) {\\n        return euint256.wrap(Impl.trivialEncrypt(value, Common.EUINT256_TFHE));\\n    }\\n    /// @notice Converts a uint256 to an eaddress\\n    function asEaddress(uint256 value) internal pure returns (eaddress) {\\n        return eaddress.wrap(Impl.trivialEncrypt(value, Common.EADDRESS_TFHE));\\n    }\\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an ebool\\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\\n    /// @return a ciphertext representation of the input\\n    function asEbool(bytes memory value) internal pure returns (ebool) {\\n        return ebool.wrap(Impl.verify(value, Common.EBOOL_TFHE));\\n    }\\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an euint8\\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\\n    /// @return a ciphertext representation of the input\\n    function asEuint8(bytes memory value) internal pure returns (euint8) {\\n        return euint8.wrap(Impl.verify(value, Common.EUINT8_TFHE));\\n    }\\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an euint16\\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\\n    /// @return a ciphertext representation of the input\\n    function asEuint16(bytes memory value) internal pure returns (euint16) {\\n        return euint16.wrap(Impl.verify(value, Common.EUINT16_TFHE));\\n    }\\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an euint32\\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\\n    /// @return a ciphertext representation of the input\\n    function asEuint32(bytes memory value) internal pure returns (euint32) {\\n        return euint32.wrap(Impl.verify(value, Common.EUINT32_TFHE));\\n    }\\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an euint64\\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\\n    /// @return a ciphertext representation of the input\\n    function asEuint64(bytes memory value) internal pure returns (euint64) {\\n        return euint64.wrap(Impl.verify(value, Common.EUINT64_TFHE));\\n    }\\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an euint128\\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\\n    /// @return a ciphertext representation of the input\\n    function asEuint128(bytes memory value) internal pure returns (euint128) {\\n        return euint128.wrap(Impl.verify(value, Common.EUINT128_TFHE));\\n    }\\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an euint256\\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\\n    /// @return a ciphertext representation of the input\\n    function asEuint256(bytes memory value) internal pure returns (euint256) {\\n        return euint256.wrap(Impl.verify(value, Common.EUINT256_TFHE));\\n    }\\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an eaddress\\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\\n    /// @return a ciphertext representation of the input\\n    function asEaddress(bytes memory value) internal pure returns (eaddress) {\\n        return eaddress.wrap(Impl.verify(value, Common.EADDRESS_TFHE));\\n    }\\n    /// @notice Converts a address to an eaddress\\n    /// Allows for a better user experience when working with eaddresses\\n    function asEaddress(address value) internal pure returns (eaddress) {\\n        return eaddress.wrap(Impl.trivialEncrypt(uint256(uint160(value)), Common.EADDRESS_TFHE));\\n    }\\n    /// @notice Converts a plaintext boolean value to a ciphertext ebool\\n    /// @dev Privacy: The input value is public, therefore the ciphertext should be considered public and should be used\\n    ///only for mathematical operations, not to represent data that should be private\\n    /// @return A ciphertext representation of the input \\n    function asEbool(bool value) internal pure returns (ebool) {\\n        uint256 sVal = 0;\\n        if (value) {\\n            sVal = 1;\\n        }\\n\\n        return asEbool(sVal);\\n    }\\n}\\n\\n// ********** OPERATOR OVERLOADING ************* //\\n\\nusing {operatorAddEuint8 as +} for euint8 global;\\n/// @notice Performs the add operation\\nfunction operatorAddEuint8(euint8 lhs, euint8 rhs) pure returns (euint8) {\\n    return FHE.add(lhs, rhs);\\n}\\n\\nusing {operatorAddEuint16 as +} for euint16 global;\\n/// @notice Performs the add operation\\nfunction operatorAddEuint16(euint16 lhs, euint16 rhs) pure returns (euint16) {\\n    return FHE.add(lhs, rhs);\\n}\\n\\nusing {operatorAddEuint32 as +} for euint32 global;\\n/// @notice Performs the add operation\\nfunction operatorAddEuint32(euint32 lhs, euint32 rhs) pure returns (euint32) {\\n    return FHE.add(lhs, rhs);\\n}\\n\\nusing {operatorAddEuint64 as +} for euint64 global;\\n/// @notice Performs the add operation\\nfunction operatorAddEuint64(euint64 lhs, euint64 rhs) pure returns (euint64) {\\n    return FHE.add(lhs, rhs);\\n}\\n\\nusing {operatorAddEuint128 as +} for euint128 global;\\n/// @notice Performs the add operation\\nfunction operatorAddEuint128(euint128 lhs, euint128 rhs) pure returns (euint128) {\\n    return FHE.add(lhs, rhs);\\n}\\n\\nusing {operatorSubEuint8 as -} for euint8 global;\\n/// @notice Performs the sub operation\\nfunction operatorSubEuint8(euint8 lhs, euint8 rhs) pure returns (euint8) {\\n    return FHE.sub(lhs, rhs);\\n}\\n\\nusing {operatorSubEuint16 as -} for euint16 global;\\n/// @notice Performs the sub operation\\nfunction operatorSubEuint16(euint16 lhs, euint16 rhs) pure returns (euint16) {\\n    return FHE.sub(lhs, rhs);\\n}\\n\\nusing {operatorSubEuint32 as -} for euint32 global;\\n/// @notice Performs the sub operation\\nfunction operatorSubEuint32(euint32 lhs, euint32 rhs) pure returns (euint32) {\\n    return FHE.sub(lhs, rhs);\\n}\\n\\nusing {operatorSubEuint64 as -} for euint64 global;\\n/// @notice Performs the sub operation\\nfunction operatorSubEuint64(euint64 lhs, euint64 rhs) pure returns (euint64) {\\n    return FHE.sub(lhs, rhs);\\n}\\n\\nusing {operatorSubEuint128 as -} for euint128 global;\\n/// @notice Performs the sub operation\\nfunction operatorSubEuint128(euint128 lhs, euint128 rhs) pure returns (euint128) {\\n    return FHE.sub(lhs, rhs);\\n}\\n\\nusing {operatorMulEuint8 as *} for euint8 global;\\n/// @notice Performs the mul operation\\nfunction operatorMulEuint8(euint8 lhs, euint8 rhs) pure returns (euint8) {\\n    return FHE.mul(lhs, rhs);\\n}\\n\\nusing {operatorMulEuint16 as *} for euint16 global;\\n/// @notice Performs the mul operation\\nfunction operatorMulEuint16(euint16 lhs, euint16 rhs) pure returns (euint16) {\\n    return FHE.mul(lhs, rhs);\\n}\\n\\nusing {operatorMulEuint32 as *} for euint32 global;\\n/// @notice Performs the mul operation\\nfunction operatorMulEuint32(euint32 lhs, euint32 rhs) pure returns (euint32) {\\n    return FHE.mul(lhs, rhs);\\n}\\n\\nusing {operatorMulEuint64 as *} for euint64 global;\\n/// @notice Performs the mul operation\\nfunction operatorMulEuint64(euint64 lhs, euint64 rhs) pure returns (euint64) {\\n    return FHE.mul(lhs, rhs);\\n}\\n\\nusing {operatorDivEuint8 as /} for euint8 global;\\n/// @notice Performs the div operation\\nfunction operatorDivEuint8(euint8 lhs, euint8 rhs) pure returns (euint8) {\\n    return FHE.div(lhs, rhs);\\n}\\n\\nusing {operatorDivEuint16 as /} for euint16 global;\\n/// @notice Performs the div operation\\nfunction operatorDivEuint16(euint16 lhs, euint16 rhs) pure returns (euint16) {\\n    return FHE.div(lhs, rhs);\\n}\\n\\nusing {operatorDivEuint32 as /} for euint32 global;\\n/// @notice Performs the div operation\\nfunction operatorDivEuint32(euint32 lhs, euint32 rhs) pure returns (euint32) {\\n    return FHE.div(lhs, rhs);\\n}\\n\\nusing {operatorOrEbool as |} for ebool global;\\n/// @notice Performs the or operation\\nfunction operatorOrEbool(ebool lhs, ebool rhs) pure returns (ebool) {\\n    return FHE.or(lhs, rhs);\\n}\\n\\nusing {operatorOrEuint8 as |} for euint8 global;\\n/// @notice Performs the or operation\\nfunction operatorOrEuint8(euint8 lhs, euint8 rhs) pure returns (euint8) {\\n    return FHE.or(lhs, rhs);\\n}\\n\\nusing {operatorOrEuint16 as |} for euint16 global;\\n/// @notice Performs the or operation\\nfunction operatorOrEuint16(euint16 lhs, euint16 rhs) pure returns (euint16) {\\n    return FHE.or(lhs, rhs);\\n}\\n\\nusing {operatorOrEuint32 as |} for euint32 global;\\n/// @notice Performs the or operation\\nfunction operatorOrEuint32(euint32 lhs, euint32 rhs) pure returns (euint32) {\\n    return FHE.or(lhs, rhs);\\n}\\n\\nusing {operatorOrEuint64 as |} for euint64 global;\\n/// @notice Performs the or operation\\nfunction operatorOrEuint64(euint64 lhs, euint64 rhs) pure returns (euint64) {\\n    return FHE.or(lhs, rhs);\\n}\\n\\nusing {operatorOrEuint128 as |} for euint128 global;\\n/// @notice Performs the or operation\\nfunction operatorOrEuint128(euint128 lhs, euint128 rhs) pure returns (euint128) {\\n    return FHE.or(lhs, rhs);\\n}\\n\\nusing {operatorAndEbool as &} for ebool global;\\n/// @notice Performs the and operation\\nfunction operatorAndEbool(ebool lhs, ebool rhs) pure returns (ebool) {\\n    return FHE.and(lhs, rhs);\\n}\\n\\nusing {operatorAndEuint8 as &} for euint8 global;\\n/// @notice Performs the and operation\\nfunction operatorAndEuint8(euint8 lhs, euint8 rhs) pure returns (euint8) {\\n    return FHE.and(lhs, rhs);\\n}\\n\\nusing {operatorAndEuint16 as &} for euint16 global;\\n/// @notice Performs the and operation\\nfunction operatorAndEuint16(euint16 lhs, euint16 rhs) pure returns (euint16) {\\n    return FHE.and(lhs, rhs);\\n}\\n\\nusing {operatorAndEuint32 as &} for euint32 global;\\n/// @notice Performs the and operation\\nfunction operatorAndEuint32(euint32 lhs, euint32 rhs) pure returns (euint32) {\\n    return FHE.and(lhs, rhs);\\n}\\n\\nusing {operatorAndEuint64 as &} for euint64 global;\\n/// @notice Performs the and operation\\nfunction operatorAndEuint64(euint64 lhs, euint64 rhs) pure returns (euint64) {\\n    return FHE.and(lhs, rhs);\\n}\\n\\nusing {operatorAndEuint128 as &} for euint128 global;\\n/// @notice Performs the and operation\\nfunction operatorAndEuint128(euint128 lhs, euint128 rhs) pure returns (euint128) {\\n    return FHE.and(lhs, rhs);\\n}\\n\\nusing {operatorXorEbool as ^} for ebool global;\\n/// @notice Performs the xor operation\\nfunction operatorXorEbool(ebool lhs, ebool rhs) pure returns (ebool) {\\n    return FHE.xor(lhs, rhs);\\n}\\n\\nusing {operatorXorEuint8 as ^} for euint8 global;\\n/// @notice Performs the xor operation\\nfunction operatorXorEuint8(euint8 lhs, euint8 rhs) pure returns (euint8) {\\n    return FHE.xor(lhs, rhs);\\n}\\n\\nusing {operatorXorEuint16 as ^} for euint16 global;\\n/// @notice Performs the xor operation\\nfunction operatorXorEuint16(euint16 lhs, euint16 rhs) pure returns (euint16) {\\n    return FHE.xor(lhs, rhs);\\n}\\n\\nusing {operatorXorEuint32 as ^} for euint32 global;\\n/// @notice Performs the xor operation\\nfunction operatorXorEuint32(euint32 lhs, euint32 rhs) pure returns (euint32) {\\n    return FHE.xor(lhs, rhs);\\n}\\n\\nusing {operatorXorEuint64 as ^} for euint64 global;\\n/// @notice Performs the xor operation\\nfunction operatorXorEuint64(euint64 lhs, euint64 rhs) pure returns (euint64) {\\n    return FHE.xor(lhs, rhs);\\n}\\n\\nusing {operatorXorEuint128 as ^} for euint128 global;\\n/// @notice Performs the xor operation\\nfunction operatorXorEuint128(euint128 lhs, euint128 rhs) pure returns (euint128) {\\n    return FHE.xor(lhs, rhs);\\n}\\n\\nusing {operatorRemEuint8 as %} for euint8 global;\\n/// @notice Performs the rem operation\\nfunction operatorRemEuint8(euint8 lhs, euint8 rhs) pure returns (euint8) {\\n    return FHE.rem(lhs, rhs);\\n}\\n\\nusing {operatorRemEuint16 as %} for euint16 global;\\n/// @notice Performs the rem operation\\nfunction operatorRemEuint16(euint16 lhs, euint16 rhs) pure returns (euint16) {\\n    return FHE.rem(lhs, rhs);\\n}\\n\\nusing {operatorRemEuint32 as %} for euint32 global;\\n/// @notice Performs the rem operation\\nfunction operatorRemEuint32(euint32 lhs, euint32 rhs) pure returns (euint32) {\\n    return FHE.rem(lhs, rhs);\\n}\\n\\n// ********** BINDING DEFS ************* //\\n\\nusing BindingsEbool for ebool global;\\nlibrary BindingsEbool {\\n    \\n    /// @notice Performs the eq operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type ebool\\n    /// @return the result of the eq\\n    function eq(ebool lhs, ebool rhs) internal pure returns (ebool) {\\n        return FHE.eq(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the ne operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type ebool\\n    /// @return the result of the ne\\n    function ne(ebool lhs, ebool rhs) internal pure returns (ebool) {\\n        return FHE.ne(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the and operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type ebool\\n    /// @return the result of the and\\n    function and(ebool lhs, ebool rhs) internal pure returns (ebool) {\\n        return FHE.and(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the or operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type ebool\\n    /// @return the result of the or\\n    function or(ebool lhs, ebool rhs) internal pure returns (ebool) {\\n        return FHE.or(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the xor operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type ebool\\n    /// @return the result of the xor\\n    function xor(ebool lhs, ebool rhs) internal pure returns (ebool) {\\n        return FHE.xor(lhs, rhs);\\n    }\\n    function toU8(ebool value) internal pure returns (euint8) {\\n        return FHE.asEuint8(value);\\n    }\\n    function toU16(ebool value) internal pure returns (euint16) {\\n        return FHE.asEuint16(value);\\n    }\\n    function toU32(ebool value) internal pure returns (euint32) {\\n        return FHE.asEuint32(value);\\n    }\\n    function toU64(ebool value) internal pure returns (euint64) {\\n        return FHE.asEuint64(value);\\n    }\\n    function toU128(ebool value) internal pure returns (euint128) {\\n        return FHE.asEuint128(value);\\n    }\\n    function toU256(ebool value) internal pure returns (euint256) {\\n        return FHE.asEuint256(value);\\n    }\\n    function toEaddress(ebool value) internal pure returns (eaddress) {\\n        return FHE.asEaddress(value);\\n    }\\n    function seal(ebool value, bytes32 publicKey) internal pure returns (string memory) {\\n        return FHE.sealoutput(value, publicKey);\\n    }\\n    function decrypt(ebool value) internal pure returns (bool) {\\n        return FHE.decrypt(value);\\n    }\\n}\\n\\nusing BindingsEuint8 for euint8 global;\\nlibrary BindingsEuint8 {\\n    \\n    /// @notice Performs the add operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @return the result of the add\\n    function add(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\\n        return FHE.add(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the mul operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @return the result of the mul\\n    function mul(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\\n        return FHE.mul(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the div operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @return the result of the div\\n    function div(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\\n        return FHE.div(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the sub operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @return the result of the sub\\n    function sub(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\\n        return FHE.sub(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the eq operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @return the result of the eq\\n    function eq(euint8 lhs, euint8 rhs) internal pure returns (ebool) {\\n        return FHE.eq(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the ne operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @return the result of the ne\\n    function ne(euint8 lhs, euint8 rhs) internal pure returns (ebool) {\\n        return FHE.ne(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the and operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @return the result of the and\\n    function and(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\\n        return FHE.and(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the or operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @return the result of the or\\n    function or(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\\n        return FHE.or(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the xor operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @return the result of the xor\\n    function xor(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\\n        return FHE.xor(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the gt operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @return the result of the gt\\n    function gt(euint8 lhs, euint8 rhs) internal pure returns (ebool) {\\n        return FHE.gt(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the gte operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @return the result of the gte\\n    function gte(euint8 lhs, euint8 rhs) internal pure returns (ebool) {\\n        return FHE.gte(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the lt operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @return the result of the lt\\n    function lt(euint8 lhs, euint8 rhs) internal pure returns (ebool) {\\n        return FHE.lt(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the lte operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @return the result of the lte\\n    function lte(euint8 lhs, euint8 rhs) internal pure returns (ebool) {\\n        return FHE.lte(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the rem operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @return the result of the rem\\n    function rem(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\\n        return FHE.rem(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the max operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @return the result of the max\\n    function max(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\\n        return FHE.max(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the min operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @return the result of the min\\n    function min(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\\n        return FHE.min(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the shl operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @return the result of the shl\\n    function shl(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\\n        return FHE.shl(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the shr operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @return the result of the shr\\n    function shr(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\\n        return FHE.shr(lhs, rhs);\\n    }\\n    function toBool(euint8 value) internal pure returns (ebool) {\\n        return FHE.asEbool(value);\\n    }\\n    function toU16(euint8 value) internal pure returns (euint16) {\\n        return FHE.asEuint16(value);\\n    }\\n    function toU32(euint8 value) internal pure returns (euint32) {\\n        return FHE.asEuint32(value);\\n    }\\n    function toU64(euint8 value) internal pure returns (euint64) {\\n        return FHE.asEuint64(value);\\n    }\\n    function toU128(euint8 value) internal pure returns (euint128) {\\n        return FHE.asEuint128(value);\\n    }\\n    function toU256(euint8 value) internal pure returns (euint256) {\\n        return FHE.asEuint256(value);\\n    }\\n    function toEaddress(euint8 value) internal pure returns (eaddress) {\\n        return FHE.asEaddress(value);\\n    }\\n    function seal(euint8 value, bytes32 publicKey) internal pure returns (string memory) {\\n        return FHE.sealoutput(value, publicKey);\\n    }\\n    function decrypt(euint8 value) internal pure returns (uint8) {\\n        return FHE.decrypt(value);\\n    }\\n}\\n\\nusing BindingsEuint16 for euint16 global;\\nlibrary BindingsEuint16 {\\n    \\n    /// @notice Performs the add operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @return the result of the add\\n    function add(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\\n        return FHE.add(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the mul operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @return the result of the mul\\n    function mul(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\\n        return FHE.mul(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the div operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @return the result of the div\\n    function div(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\\n        return FHE.div(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the sub operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @return the result of the sub\\n    function sub(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\\n        return FHE.sub(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the eq operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @return the result of the eq\\n    function eq(euint16 lhs, euint16 rhs) internal pure returns (ebool) {\\n        return FHE.eq(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the ne operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @return the result of the ne\\n    function ne(euint16 lhs, euint16 rhs) internal pure returns (ebool) {\\n        return FHE.ne(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the and operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @return the result of the and\\n    function and(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\\n        return FHE.and(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the or operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @return the result of the or\\n    function or(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\\n        return FHE.or(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the xor operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @return the result of the xor\\n    function xor(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\\n        return FHE.xor(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the gt operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @return the result of the gt\\n    function gt(euint16 lhs, euint16 rhs) internal pure returns (ebool) {\\n        return FHE.gt(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the gte operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @return the result of the gte\\n    function gte(euint16 lhs, euint16 rhs) internal pure returns (ebool) {\\n        return FHE.gte(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the lt operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @return the result of the lt\\n    function lt(euint16 lhs, euint16 rhs) internal pure returns (ebool) {\\n        return FHE.lt(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the lte operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @return the result of the lte\\n    function lte(euint16 lhs, euint16 rhs) internal pure returns (ebool) {\\n        return FHE.lte(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the rem operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @return the result of the rem\\n    function rem(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\\n        return FHE.rem(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the max operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @return the result of the max\\n    function max(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\\n        return FHE.max(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the min operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @return the result of the min\\n    function min(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\\n        return FHE.min(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the shl operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @return the result of the shl\\n    function shl(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\\n        return FHE.shl(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the shr operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @return the result of the shr\\n    function shr(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\\n        return FHE.shr(lhs, rhs);\\n    }\\n    function toBool(euint16 value) internal pure returns (ebool) {\\n        return FHE.asEbool(value);\\n    }\\n    function toU8(euint16 value) internal pure returns (euint8) {\\n        return FHE.asEuint8(value);\\n    }\\n    function toU32(euint16 value) internal pure returns (euint32) {\\n        return FHE.asEuint32(value);\\n    }\\n    function toU64(euint16 value) internal pure returns (euint64) {\\n        return FHE.asEuint64(value);\\n    }\\n    function toU128(euint16 value) internal pure returns (euint128) {\\n        return FHE.asEuint128(value);\\n    }\\n    function toU256(euint16 value) internal pure returns (euint256) {\\n        return FHE.asEuint256(value);\\n    }\\n    function toEaddress(euint16 value) internal pure returns (eaddress) {\\n        return FHE.asEaddress(value);\\n    }\\n    function seal(euint16 value, bytes32 publicKey) internal pure returns (string memory) {\\n        return FHE.sealoutput(value, publicKey);\\n    }\\n    function decrypt(euint16 value) internal pure returns (uint16) {\\n        return FHE.decrypt(value);\\n    }\\n}\\n\\nusing BindingsEuint32 for euint32 global;\\nlibrary BindingsEuint32 {\\n    \\n    /// @notice Performs the add operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @return the result of the add\\n    function add(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\\n        return FHE.add(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the mul operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @return the result of the mul\\n    function mul(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\\n        return FHE.mul(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the div operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @return the result of the div\\n    function div(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\\n        return FHE.div(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the sub operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @return the result of the sub\\n    function sub(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\\n        return FHE.sub(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the eq operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @return the result of the eq\\n    function eq(euint32 lhs, euint32 rhs) internal pure returns (ebool) {\\n        return FHE.eq(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the ne operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @return the result of the ne\\n    function ne(euint32 lhs, euint32 rhs) internal pure returns (ebool) {\\n        return FHE.ne(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the and operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @return the result of the and\\n    function and(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\\n        return FHE.and(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the or operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @return the result of the or\\n    function or(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\\n        return FHE.or(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the xor operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @return the result of the xor\\n    function xor(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\\n        return FHE.xor(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the gt operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @return the result of the gt\\n    function gt(euint32 lhs, euint32 rhs) internal pure returns (ebool) {\\n        return FHE.gt(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the gte operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @return the result of the gte\\n    function gte(euint32 lhs, euint32 rhs) internal pure returns (ebool) {\\n        return FHE.gte(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the lt operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @return the result of the lt\\n    function lt(euint32 lhs, euint32 rhs) internal pure returns (ebool) {\\n        return FHE.lt(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the lte operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @return the result of the lte\\n    function lte(euint32 lhs, euint32 rhs) internal pure returns (ebool) {\\n        return FHE.lte(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the rem operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @return the result of the rem\\n    function rem(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\\n        return FHE.rem(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the max operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @return the result of the max\\n    function max(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\\n        return FHE.max(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the min operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @return the result of the min\\n    function min(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\\n        return FHE.min(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the shl operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @return the result of the shl\\n    function shl(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\\n        return FHE.shl(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the shr operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @return the result of the shr\\n    function shr(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\\n        return FHE.shr(lhs, rhs);\\n    }\\n    function toBool(euint32 value) internal pure returns (ebool) {\\n        return FHE.asEbool(value);\\n    }\\n    function toU8(euint32 value) internal pure returns (euint8) {\\n        return FHE.asEuint8(value);\\n    }\\n    function toU16(euint32 value) internal pure returns (euint16) {\\n        return FHE.asEuint16(value);\\n    }\\n    function toU64(euint32 value) internal pure returns (euint64) {\\n        return FHE.asEuint64(value);\\n    }\\n    function toU128(euint32 value) internal pure returns (euint128) {\\n        return FHE.asEuint128(value);\\n    }\\n    function toU256(euint32 value) internal pure returns (euint256) {\\n        return FHE.asEuint256(value);\\n    }\\n    function toEaddress(euint32 value) internal pure returns (eaddress) {\\n        return FHE.asEaddress(value);\\n    }\\n    function seal(euint32 value, bytes32 publicKey) internal pure returns (string memory) {\\n        return FHE.sealoutput(value, publicKey);\\n    }\\n    function decrypt(euint32 value) internal pure returns (uint32) {\\n        return FHE.decrypt(value);\\n    }\\n}\\n\\nusing BindingsEuint64 for euint64 global;\\nlibrary BindingsEuint64 {\\n    \\n    /// @notice Performs the add operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @return the result of the add\\n    function add(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\\n        return FHE.add(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the mul operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @return the result of the mul\\n    function mul(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\\n        return FHE.mul(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the sub operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @return the result of the sub\\n    function sub(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\\n        return FHE.sub(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the eq operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @return the result of the eq\\n    function eq(euint64 lhs, euint64 rhs) internal pure returns (ebool) {\\n        return FHE.eq(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the ne operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @return the result of the ne\\n    function ne(euint64 lhs, euint64 rhs) internal pure returns (ebool) {\\n        return FHE.ne(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the and operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @return the result of the and\\n    function and(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\\n        return FHE.and(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the or operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @return the result of the or\\n    function or(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\\n        return FHE.or(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the xor operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @return the result of the xor\\n    function xor(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\\n        return FHE.xor(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the gt operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @return the result of the gt\\n    function gt(euint64 lhs, euint64 rhs) internal pure returns (ebool) {\\n        return FHE.gt(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the gte operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @return the result of the gte\\n    function gte(euint64 lhs, euint64 rhs) internal pure returns (ebool) {\\n        return FHE.gte(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the lt operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @return the result of the lt\\n    function lt(euint64 lhs, euint64 rhs) internal pure returns (ebool) {\\n        return FHE.lt(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the lte operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @return the result of the lte\\n    function lte(euint64 lhs, euint64 rhs) internal pure returns (ebool) {\\n        return FHE.lte(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the max operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @return the result of the max\\n    function max(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\\n        return FHE.max(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the min operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @return the result of the min\\n    function min(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\\n        return FHE.min(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the shl operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @return the result of the shl\\n    function shl(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\\n        return FHE.shl(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the shr operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @return the result of the shr\\n    function shr(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\\n        return FHE.shr(lhs, rhs);\\n    }\\n    function toBool(euint64 value) internal pure returns (ebool) {\\n        return FHE.asEbool(value);\\n    }\\n    function toU8(euint64 value) internal pure returns (euint8) {\\n        return FHE.asEuint8(value);\\n    }\\n    function toU16(euint64 value) internal pure returns (euint16) {\\n        return FHE.asEuint16(value);\\n    }\\n    function toU32(euint64 value) internal pure returns (euint32) {\\n        return FHE.asEuint32(value);\\n    }\\n    function toU128(euint64 value) internal pure returns (euint128) {\\n        return FHE.asEuint128(value);\\n    }\\n    function toU256(euint64 value) internal pure returns (euint256) {\\n        return FHE.asEuint256(value);\\n    }\\n    function toEaddress(euint64 value) internal pure returns (eaddress) {\\n        return FHE.asEaddress(value);\\n    }\\n    function seal(euint64 value, bytes32 publicKey) internal pure returns (string memory) {\\n        return FHE.sealoutput(value, publicKey);\\n    }\\n    function decrypt(euint64 value) internal pure returns (uint64) {\\n        return FHE.decrypt(value);\\n    }\\n}\\n\\nusing BindingsEuint128 for euint128 global;\\nlibrary BindingsEuint128 {\\n    \\n    /// @notice Performs the add operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @return the result of the add\\n    function add(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\\n        return FHE.add(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the sub operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @return the result of the sub\\n    function sub(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\\n        return FHE.sub(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the eq operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @return the result of the eq\\n    function eq(euint128 lhs, euint128 rhs) internal pure returns (ebool) {\\n        return FHE.eq(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the ne operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @return the result of the ne\\n    function ne(euint128 lhs, euint128 rhs) internal pure returns (ebool) {\\n        return FHE.ne(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the and operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @return the result of the and\\n    function and(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\\n        return FHE.and(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the or operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @return the result of the or\\n    function or(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\\n        return FHE.or(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the xor operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @return the result of the xor\\n    function xor(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\\n        return FHE.xor(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the gt operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @return the result of the gt\\n    function gt(euint128 lhs, euint128 rhs) internal pure returns (ebool) {\\n        return FHE.gt(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the gte operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @return the result of the gte\\n    function gte(euint128 lhs, euint128 rhs) internal pure returns (ebool) {\\n        return FHE.gte(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the lt operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @return the result of the lt\\n    function lt(euint128 lhs, euint128 rhs) internal pure returns (ebool) {\\n        return FHE.lt(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the lte operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @return the result of the lte\\n    function lte(euint128 lhs, euint128 rhs) internal pure returns (ebool) {\\n        return FHE.lte(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the max operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @return the result of the max\\n    function max(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\\n        return FHE.max(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the min operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @return the result of the min\\n    function min(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\\n        return FHE.min(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the shl operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @return the result of the shl\\n    function shl(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\\n        return FHE.shl(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the shr operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @return the result of the shr\\n    function shr(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\\n        return FHE.shr(lhs, rhs);\\n    }\\n    function toBool(euint128 value) internal pure returns (ebool) {\\n        return FHE.asEbool(value);\\n    }\\n    function toU8(euint128 value) internal pure returns (euint8) {\\n        return FHE.asEuint8(value);\\n    }\\n    function toU16(euint128 value) internal pure returns (euint16) {\\n        return FHE.asEuint16(value);\\n    }\\n    function toU32(euint128 value) internal pure returns (euint32) {\\n        return FHE.asEuint32(value);\\n    }\\n    function toU64(euint128 value) internal pure returns (euint64) {\\n        return FHE.asEuint64(value);\\n    }\\n    function toU256(euint128 value) internal pure returns (euint256) {\\n        return FHE.asEuint256(value);\\n    }\\n    function toEaddress(euint128 value) internal pure returns (eaddress) {\\n        return FHE.asEaddress(value);\\n    }\\n    function seal(euint128 value, bytes32 publicKey) internal pure returns (string memory) {\\n        return FHE.sealoutput(value, publicKey);\\n    }\\n    function decrypt(euint128 value) internal pure returns (uint128) {\\n        return FHE.decrypt(value);\\n    }\\n}\\n\\nusing BindingsEuint256 for euint256 global;\\nlibrary BindingsEuint256 {\\n    \\n    /// @notice Performs the eq operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint256\\n    /// @return the result of the eq\\n    function eq(euint256 lhs, euint256 rhs) internal pure returns (ebool) {\\n        return FHE.eq(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the ne operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint256\\n    /// @return the result of the ne\\n    function ne(euint256 lhs, euint256 rhs) internal pure returns (ebool) {\\n        return FHE.ne(lhs, rhs);\\n    }\\n    function toBool(euint256 value) internal pure returns (ebool) {\\n        return FHE.asEbool(value);\\n    }\\n    function toU8(euint256 value) internal pure returns (euint8) {\\n        return FHE.asEuint8(value);\\n    }\\n    function toU16(euint256 value) internal pure returns (euint16) {\\n        return FHE.asEuint16(value);\\n    }\\n    function toU32(euint256 value) internal pure returns (euint32) {\\n        return FHE.asEuint32(value);\\n    }\\n    function toU64(euint256 value) internal pure returns (euint64) {\\n        return FHE.asEuint64(value);\\n    }\\n    function toU128(euint256 value) internal pure returns (euint128) {\\n        return FHE.asEuint128(value);\\n    }\\n    function toEaddress(euint256 value) internal pure returns (eaddress) {\\n        return FHE.asEaddress(value);\\n    }\\n    function seal(euint256 value, bytes32 publicKey) internal pure returns (string memory) {\\n        return FHE.sealoutput(value, publicKey);\\n    }\\n    function decrypt(euint256 value) internal pure returns (uint256) {\\n        return FHE.decrypt(value);\\n    }\\n}\\n\\nusing BindingsEaddress for eaddress global;\\nlibrary BindingsEaddress {\\n    \\n    /// @notice Performs the eq operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type eaddress\\n    /// @return the result of the eq\\n    function eq(eaddress lhs, eaddress rhs) internal pure returns (ebool) {\\n        return FHE.eq(lhs, rhs);\\n    }\\n    \\n    /// @notice Performs the ne operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type eaddress\\n    /// @return the result of the ne\\n    function ne(eaddress lhs, eaddress rhs) internal pure returns (ebool) {\\n        return FHE.ne(lhs, rhs);\\n    }\\n    function toBool(eaddress value) internal pure returns (ebool) {\\n        return FHE.asEbool(value);\\n    }\\n    function toU8(eaddress value) internal pure returns (euint8) {\\n        return FHE.asEuint8(value);\\n    }\\n    function toU16(eaddress value) internal pure returns (euint16) {\\n        return FHE.asEuint16(value);\\n    }\\n    function toU32(eaddress value) internal pure returns (euint32) {\\n        return FHE.asEuint32(value);\\n    }\\n    function toU64(eaddress value) internal pure returns (euint64) {\\n        return FHE.asEuint64(value);\\n    }\\n    function toU128(eaddress value) internal pure returns (euint128) {\\n        return FHE.asEuint128(value);\\n    }\\n    function toU256(eaddress value) internal pure returns (euint256) {\\n        return FHE.asEuint256(value);\\n    }\\n    function seal(eaddress value, bytes32 publicKey) internal pure returns (string memory) {\\n        return FHE.sealoutput(value, publicKey);\\n    }\\n    function decrypt(eaddress value) internal pure returns (address) {\\n        return FHE.decrypt(value);\\n    }\\n}\",\"keccak256\":\"0x1ffd2f9f5c64d58f600d54eba6c74d5c158455dd3e1eb827f1e745b1c81218a3\",\"license\":\"BSD-3-Clause-Clear\"},\"@fhenixprotocol/contracts/FheOS.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause-Clear\\n// solhint-disable one-contract-per-file\\npragma solidity >=0.8.13 <0.9.0;\\n\\nlibrary Precompiles {\\n    //solhint-disable const-name-snakecase\\n    address public constant Fheos = address(128);\\n}\\n\\ninterface FheOps {\\n    function log(string memory s) external pure;\\n    function add(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\\n    function verify(uint8 utype, bytes memory input) external pure returns (bytes memory);\\n    function sealOutput(uint8 utype, bytes memory ctHash, bytes memory pk) external pure returns (string memory);\\n    function decrypt(uint8 utype, bytes memory input) external pure returns (uint256);\\n    function lte(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\\n    function sub(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\\n    function mul(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\\n    function lt(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\\n    function select(uint8 utype, bytes memory controlHash, bytes memory ifTrueHash, bytes memory ifFalseHash) external pure returns (bytes memory);\\n    function req(uint8 utype, bytes memory input) external pure returns (bytes memory);\\n    function cast(uint8 utype, bytes memory input, uint8 toType) external pure returns (bytes memory);\\n    function trivialEncrypt(bytes memory input, uint8 toType) external pure returns (bytes memory);\\n    function div(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\\n    function gt(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\\n    function gte(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\\n    function rem(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\\n    function and(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\\n    function or(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\\n    function xor(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\\n    function eq(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\\n    function ne(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\\n    function min(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\\n    function max(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\\n    function shl(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\\n    function shr(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\\n    function not(uint8 utype, bytes memory value) external pure returns (bytes memory);\\n    function getNetworkPublicKey() external pure returns (bytes memory);\\n}\",\"keccak256\":\"0xc704013bec920b763d309d02f6c459acb16326b056bea878ee2130792be2fdac\",\"license\":\"BSD-3-Clause-Clear\"},\"@fhenixprotocol/contracts/access/Permissioned.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause-Clear\\npragma solidity >=0.8.19 <0.8.25;\\n\\nimport { ECDSA } from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport { EIP712 } from \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\n\\n/// @title Permissioned Access Control Contract\\n/// @notice Abstract contract that provides EIP-712 based signature verification for access control\\n/// @dev This contract should be inherited by other contracts to provide EIP-712 signature validated access control\\nabstract contract Permissioned is EIP712 {\\n    /// @notice Emitted when the signer is not the message sender\\n    error SignerNotMessageSender();\\n\\n    /// @notice Emitted when the signer is not the specified owner\\n    error SignerNotOwner();\\n\\n    /// @dev Constructor that initializes EIP712 domain separator with a name and version\\n    /// solhint-disable-next-line func-visibility, no-empty-blocks\\n    constructor() EIP712(\\\"Fhenix Permission\\\", \\\"1.0\\\") {} \\n\\n    /// @notice Modifier that requires the provided signature to be signed by the message sender\\n    /// @param permission Data structure containing the public key and the signature to be verified\\n    modifier onlySender(Permission memory permission) {\\n        bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n            keccak256(\\\"Permissioned(bytes32 publicKey)\\\"),\\n            permission.publicKey\\n        )));\\n        address signer = ECDSA.recover(digest, permission.signature);\\n        if (signer != msg.sender)\\n            revert SignerNotMessageSender();\\n        _;\\n    }\\n\\n    /// @notice Modifier that requires the provided signature to be signed by a specific owner address\\n    /// @param permission Data structure containing the public key and the signature to be verified\\n    /// @param owner The expected owner of the public key to match against the recovered signer\\n    modifier onlyPermitted(Permission memory permission, address owner) {\\n        bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n            keccak256(\\\"Permissioned(bytes32 publicKey)\\\"),\\n            permission.publicKey\\n        )));\\n        address signer = ECDSA.recover(digest, permission.signature);\\n        if (signer != owner)\\n            revert SignerNotOwner();\\n        _;\\n    }\\n}\\n\\n/// @title Struct for holding signature information\\n/// @notice Used to pass both the public key and signature data within transactions\\n/// @dev Should be used with Signature-based modifiers for access control\\nstruct Permission {\\n    bytes32 publicKey;\\n    bytes signature;\\n}\\n\",\"keccak256\":\"0x5afbb540e1ff255db40e437550d02c16227d26d222aa8bd239e1728b61c051c2\",\"license\":\"BSD-3-Clause-Clear\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/FakeUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"./libraries/FHERC20Mintable.sol\\\";\\n\\ncontract FakeUSD is FHERC20Mintable {\\n    constructor(inEuint32 memory _initialSupply) FHERC20Mintable(\\\"Fake USD\\\", \\\"fUSD\\\", msg.sender, _initialSupply) {}\\n}\\n\",\"keccak256\":\"0xc1433624bd1ad46cbcffe0ff401b7c094c27b1249a0349000fe4f7b4c8d71ad9\",\"license\":\"MIT\"},\"contracts/interfaces/IFHERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n// Fhenix Protocol (last updated v0.1.0) (token/FHERC20/IFHERC20.sol)\\n// Inspired by OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts) (token/ERC20/IERC20.sol)\\n\\nimport {Permission} from \\\"@fhenixprotocol/contracts/access/Permissioned.sol\\\";\\nimport {euint32, inEuint32} from \\\"@fhenixprotocol/contracts/FHE.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IFHERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event TransferEncrypted(address indexed from, address indexed to);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approveEncrypted}. `value` is the new allowance.\\n     */\\n    event ApprovalEncrypted(address indexed owner, address indexed spender);\\n\\n    // /**\\n    //  * @dev Returns the value of tokens in existence.\\n    //  */\\n    // function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`, sealed and encrypted for the caller.\\n     */\\n    function balanceOfEncrypted(address account, Permission memory auth) external view returns (string memory);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {TransferEncrypted} event.\\n     */\\n    function transferEncrypted(address to, inEuint32 calldata value) external returns (euint32);\\n    function transferEncrypted(address to, euint32 value) external returns (euint32);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowanceEncrypted(address spender, Permission memory permission) external view returns (string memory);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {ApprovalEncrypted} event.\\n     */\\n    function approveEncrypted(address spender, inEuint32 calldata value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {TransferEncrypted} event.\\n     */\\n    function transferFromEncrypted(address from, address to, inEuint32 calldata value) external returns (euint32);\\n    function transferFromEncrypted(address from, address to, euint32 value) external returns (euint32);\\n}\\n\",\"keccak256\":\"0x31521d45a79f43956c2707cf81947a8d2bc74e15ec58065b88281ce5d6db705c\",\"license\":\"MIT\"},\"contracts/libraries/FHERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {ERC20} from \\\"node_modules/solady/src/tokens/ERC20.sol\\\";\\nimport {FHE, euint32, inEuint32} from \\\"@fhenixprotocol/contracts/FHE.sol\\\";\\nimport {Permissioned, Permission} from \\\"@fhenixprotocol/contracts/access/Permissioned.sol\\\";\\n\\nimport {IFHERC20} from \\\"../interfaces/IFHERC20.sol\\\";\\n\\nerror ErrorInsufficientFunds();\\nerror ERC20InvalidApprover(address);\\nerror ERC20InvalidSpender(address);\\n\\ncontract FHERC20 is IFHERC20, ERC20, Permissioned {\\n    // A mapping from address to an encrypted balance.\\n    mapping(address => euint32) internal _encBalances;\\n    // A mapping from address (owner) to a mapping of address (spender) to an encrypted amount.\\n    mapping(address => mapping(address => euint32)) internal _allowed;\\n    euint32 internal totalEncryptedSupply = FHE.asEuint32(0);\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       ERC20 METADATA                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    string internal _name;\\n    string internal _symbol;\\n\\n    /// @dev Returns the name of the token.\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /// @dev Returns the symbol of the token.\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /// @dev Returns the decimals places of the token.\\n    function decimals() public pure override returns (uint8) {\\n        return 0; // Since supporting size is too small we will use 0 decimals\\n    }\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                        FHERC20 LOGIC                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    function _allowanceEncrypted(address owner, address spender) internal view virtual returns (euint32) {\\n        return _allowed[owner][spender];\\n    }\\n\\n    function allowanceEncrypted(address spender, Permission calldata permission)\\n        public\\n        view\\n        virtual\\n        onlySender(permission)\\n        returns (string memory)\\n    {\\n        return FHE.sealoutput(_allowanceEncrypted(msg.sender, spender), permission.publicKey);\\n    }\\n\\n    function approveEncrypted(address spender, inEuint32 calldata value) public virtual returns (bool) {\\n        _approve(msg.sender, spender, FHE.asEuint32(value));\\n        return true;\\n    }\\n\\n    function _approve(address owner, address spender, euint32 value) internal {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowed[owner][spender] = value;\\n    }\\n\\n    function _spendAllowance(address owner, address spender, euint32 value) internal virtual returns (euint32) {\\n        euint32 currentAllowance = _allowanceEncrypted(owner, spender);\\n        euint32 spent = FHE.min(currentAllowance, value);\\n        _approve(owner, spender, (currentAllowance - spent));\\n\\n        return spent;\\n    }\\n\\n    function transferFromEncrypted(address from, address to, euint32 value) public virtual returns (euint32) {\\n        euint32 val = value;\\n        euint32 spent = _spendAllowance(from, msg.sender, val);\\n        _transferImpl(from, to, spent);\\n        return spent;\\n    }\\n\\n    function transferFromEncrypted(address from, address to, inEuint32 calldata value)\\n        public\\n        virtual\\n        returns (euint32)\\n    {\\n        euint32 val = FHE.asEuint32(value);\\n        euint32 spent = _spendAllowance(from, msg.sender, val);\\n        _transferImpl(from, to, spent);\\n        return spent;\\n    }\\n\\n    function wrap(uint32 amount) public {\\n        if (balanceOf(msg.sender) < amount) {\\n            revert ErrorInsufficientFunds();\\n        }\\n\\n        _burn(msg.sender, amount);\\n        euint32 eAmount = FHE.asEuint32(amount);\\n        _encBalances[msg.sender] = _encBalances[msg.sender] + eAmount;\\n        totalEncryptedSupply = totalEncryptedSupply + eAmount;\\n    }\\n\\n    function unwrap(uint32 amount) public {\\n        euint32 encAmount = FHE.asEuint32(amount);\\n\\n        euint32 amountToUnwrap = FHE.select(_encBalances[msg.sender].gte(encAmount), encAmount, FHE.asEuint32(0));\\n\\n        _encBalances[msg.sender] = _encBalances[msg.sender] - amountToUnwrap;\\n        totalEncryptedSupply = totalEncryptedSupply - amountToUnwrap;\\n\\n        _mint(msg.sender, FHE.decrypt(amountToUnwrap));\\n    }\\n\\n    // function mint(uint256 amount) public {\\n    //     _mint(msg.sender, amount);\\n    // }\\n\\n    // function _mintEncrypted(address to, euint32 encryptedAmount) internal {\\n    //     _encBalances[to] = _encBalances[to] + encryptedAmount;\\n    //     totalEncryptedSupply = totalEncryptedSupply + encryptedAmount;\\n    // }\\n\\n    function transferEncrypted(address to, inEuint32 calldata encryptedAmount) public returns (euint32) {\\n        return transferEncrypted(to, FHE.asEuint32(encryptedAmount));\\n    }\\n\\n    // Transfers an amount from the message sender address to the `to` address.\\n    function transferEncrypted(address to, euint32 amount) public returns (euint32) {\\n        return _transferImpl(msg.sender, to, amount);\\n    }\\n\\n    // Transfers an encrypted amount.\\n    function _transferImpl(address from, address to, euint32 amount) internal returns (euint32) {\\n        // Make sure the sender has enough tokens.\\n        euint32 amountToSend = FHE.select(amount.lte(_encBalances[from]), amount, FHE.asEuint32(0));\\n\\n        // Add to the balance of `to` and subract from the balance of `from`.\\n        _encBalances[to] = _encBalances[to] + amountToSend;\\n        _encBalances[from] = _encBalances[from] - amountToSend;\\n\\n        return amountToSend;\\n    }\\n\\n    function balanceOfEncrypted(address account, Permission memory auth)\\n        public\\n        view\\n        virtual\\n        onlyPermitted(auth, account)\\n        returns (string memory)\\n    {\\n        return _encBalances[account].seal(auth.publicKey);\\n    }\\n\\n    //    // Returns the total supply of tokens, sealed and encrypted for the caller.\\n    //    // todo: add a permission check for total supply readers\\n    //    function getEncryptedTotalSupply(\\n    //        Permission calldata permission\\n    //    ) public view onlySender(permission) returns (bytes memory) {\\n    //        return totalEncryptedSupply.seal(permission.publicKey);\\n    //    }\\n}\\n\",\"keccak256\":\"0xb659161c03155a6c9eba0560b35f02a3556bbef8b97a43df362d56f63b58606d\",\"license\":\"MIT\"},\"contracts/libraries/FHERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"./FHERC20.sol\\\";\\n\\ncontract FHERC20Mintable is FHERC20 {\\n    constructor(string memory name_, string memory symbol_, address recipient, inEuint32 memory _encryptedAmount)\\n        FHERC20(name_, symbol_)\\n    {\\n        // type conversion\\n        euint32 encryptedAmount = FHE.asEuint32(_encryptedAmount);\\n\\n        // You cannot mint more than 2^15 - 1 = 32767 tokens.\\n        FHE.req(FHE.lte(encryptedAmount, FHE.asEuint32(32767)));\\n\\n        // Mint the encrypted amount to the recipient.\\n        _mintEncrypted(recipient, encryptedAmount);\\n    }\\n\\n    function _mintEncrypted(address to, euint32 encryptedAmount) internal {\\n        _encBalances[to] = _encBalances[to] + encryptedAmount;\\n        totalEncryptedSupply = totalEncryptedSupply + encryptedAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x776dcb184eb1cb10ffa78bd25cb1a1dc757edad77ac56f207b7d61455eacf8b1\",\"license\":\"MIT\"},\"node_modules/solady/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Simple ERC20 + EIP-2612 implementation.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol)\\n///\\n/// @dev Note:\\n/// - The ERC20 standard allows minting and transferring to and from the zero address,\\n///   minting and transferring zero tokens, as well as self-approvals.\\n///   For performance, this implementation WILL NOT revert for such actions.\\n///   Please add any checks with overrides if desired.\\n/// - The `permit` function uses the ecrecover precompile (0x1).\\n///\\n/// If you are overriding:\\n/// - NEVER violate the ERC20 invariant:\\n///   the total sum of all balances must be equal to `totalSupply()`.\\n/// - Check that the overridden function is actually used in the function you want to\\n///   change the behavior of. Much of the code has been manually inlined for performance.\\nabstract contract ERC20 {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The total supply has overflowed.\\n    error TotalSupplyOverflow();\\n\\n    /// @dev The allowance has overflowed.\\n    error AllowanceOverflow();\\n\\n    /// @dev The allowance has underflowed.\\n    error AllowanceUnderflow();\\n\\n    /// @dev Insufficient balance.\\n    error InsufficientBalance();\\n\\n    /// @dev Insufficient allowance.\\n    error InsufficientAllowance();\\n\\n    /// @dev The permit is invalid.\\n    error InvalidPermit();\\n\\n    /// @dev The permit has expired.\\n    error PermitExpired();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           EVENTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Emitted when `amount` tokens is transferred from `from` to `to`.\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /// @dev Emitted when `amount` tokens is approved by `owner` to be used by `spender`.\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /// @dev `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    uint256 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    /// @dev `keccak256(bytes(\\\"Approval(address,address,uint256)\\\"))`.\\n    uint256 private constant _APPROVAL_EVENT_SIGNATURE =\\n        0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STORAGE                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The storage slot for the total supply.\\n    uint256 private constant _TOTAL_SUPPLY_SLOT = 0x05345cdf77eb68f44c;\\n\\n    /// @dev The balance slot of `owner` is given by:\\n    /// ```\\n    ///     mstore(0x0c, _BALANCE_SLOT_SEED)\\n    ///     mstore(0x00, owner)\\n    ///     let balanceSlot := keccak256(0x0c, 0x20)\\n    /// ```\\n    uint256 private constant _BALANCE_SLOT_SEED = 0x87a211a2;\\n\\n    /// @dev The allowance slot of (`owner`, `spender`) is given by:\\n    /// ```\\n    ///     mstore(0x20, spender)\\n    ///     mstore(0x0c, _ALLOWANCE_SLOT_SEED)\\n    ///     mstore(0x00, owner)\\n    ///     let allowanceSlot := keccak256(0x0c, 0x34)\\n    /// ```\\n    uint256 private constant _ALLOWANCE_SLOT_SEED = 0x7f5e9f20;\\n\\n    /// @dev The nonce slot of `owner` is given by:\\n    /// ```\\n    ///     mstore(0x0c, _NONCES_SLOT_SEED)\\n    ///     mstore(0x00, owner)\\n    ///     let nonceSlot := keccak256(0x0c, 0x20)\\n    /// ```\\n    uint256 private constant _NONCES_SLOT_SEED = 0x38377508;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev `(_NONCES_SLOT_SEED << 16) | 0x1901`.\\n    uint256 private constant _NONCES_SLOT_SEED_WITH_SIGNATURE_PREFIX = 0x383775081901;\\n\\n    /// @dev `keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")`.\\n    bytes32 private constant _DOMAIN_TYPEHASH =\\n        0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// @dev `keccak256(\\\"1\\\")`.\\n    bytes32 private constant _VERSION_HASH =\\n        0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n\\n    /// @dev `keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\")`.\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       ERC20 METADATA                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the name of the token.\\n    function name() public view virtual returns (string memory);\\n\\n    /// @dev Returns the symbol of the token.\\n    function symbol() public view virtual returns (string memory);\\n\\n    /// @dev Returns the decimals places of the token.\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           ERC20                            */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the amount of tokens in existence.\\n    function totalSupply() public view virtual returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := sload(_TOTAL_SUPPLY_SLOT)\\n        }\\n    }\\n\\n    /// @dev Returns the amount of tokens owned by `owner`.\\n    function balanceOf(address owner) public view virtual returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x0c, _BALANCE_SLOT_SEED)\\n            mstore(0x00, owner)\\n            result := sload(keccak256(0x0c, 0x20))\\n        }\\n    }\\n\\n    /// @dev Returns the amount of tokens that `spender` can spend on behalf of `owner`.\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x20, spender)\\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\\n            mstore(0x00, owner)\\n            result := sload(keccak256(0x0c, 0x34))\\n        }\\n    }\\n\\n    /// @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n    ///\\n    /// Emits a {Approval} event.\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute the allowance slot and store the amount.\\n            mstore(0x20, spender)\\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\\n            mstore(0x00, caller())\\n            sstore(keccak256(0x0c, 0x34), amount)\\n            // Emit the {Approval} event.\\n            mstore(0x00, amount)\\n            log3(0x00, 0x20, _APPROVAL_EVENT_SIGNATURE, caller(), shr(96, mload(0x2c)))\\n        }\\n        return true;\\n    }\\n\\n    /// @dev Transfer `amount` tokens from the caller to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `from` must at least have `amount`.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        _beforeTokenTransfer(msg.sender, to, amount);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute the balance slot and load its value.\\n            mstore(0x0c, _BALANCE_SLOT_SEED)\\n            mstore(0x00, caller())\\n            let fromBalanceSlot := keccak256(0x0c, 0x20)\\n            let fromBalance := sload(fromBalanceSlot)\\n            // Revert if insufficient balance.\\n            if gt(amount, fromBalance) {\\n                mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Subtract and store the updated balance.\\n            sstore(fromBalanceSlot, sub(fromBalance, amount))\\n            // Compute the balance slot of `to`.\\n            mstore(0x00, to)\\n            let toBalanceSlot := keccak256(0x0c, 0x20)\\n            // Add and store the updated balance of `to`.\\n            // Will not overflow because the sum of all user balances\\n            // cannot exceed the maximum uint256 value.\\n            sstore(toBalanceSlot, add(sload(toBalanceSlot), amount))\\n            // Emit the {Transfer} event.\\n            mstore(0x20, amount)\\n            log3(0x20, 0x20, _TRANSFER_EVENT_SIGNATURE, caller(), shr(96, mload(0x0c)))\\n        }\\n        _afterTokenTransfer(msg.sender, to, amount);\\n        return true;\\n    }\\n\\n    /// @dev Transfers `amount` tokens from `from` to `to`.\\n    ///\\n    /// Note: Does not update the allowance if it is the maximum uint256 value.\\n    ///\\n    /// Requirements:\\n    /// - `from` must at least have `amount`.\\n    /// - The caller must have at least `amount` of allowance to transfer the tokens of `from`.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function transferFrom(address from, address to, uint256 amount) public virtual returns (bool) {\\n        _beforeTokenTransfer(from, to, amount);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let from_ := shl(96, from)\\n            // Compute the allowance slot and load its value.\\n            mstore(0x20, caller())\\n            mstore(0x0c, or(from_, _ALLOWANCE_SLOT_SEED))\\n            let allowanceSlot := keccak256(0x0c, 0x34)\\n            let allowance_ := sload(allowanceSlot)\\n            // If the allowance is not the maximum uint256 value.\\n            if add(allowance_, 1) {\\n                // Revert if the amount to be transferred exceeds the allowance.\\n                if gt(amount, allowance_) {\\n                    mstore(0x00, 0x13be252b) // `InsufficientAllowance()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                // Subtract and store the updated allowance.\\n                sstore(allowanceSlot, sub(allowance_, amount))\\n            }\\n            // Compute the balance slot and load its value.\\n            mstore(0x0c, or(from_, _BALANCE_SLOT_SEED))\\n            let fromBalanceSlot := keccak256(0x0c, 0x20)\\n            let fromBalance := sload(fromBalanceSlot)\\n            // Revert if insufficient balance.\\n            if gt(amount, fromBalance) {\\n                mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Subtract and store the updated balance.\\n            sstore(fromBalanceSlot, sub(fromBalance, amount))\\n            // Compute the balance slot of `to`.\\n            mstore(0x00, to)\\n            let toBalanceSlot := keccak256(0x0c, 0x20)\\n            // Add and store the updated balance of `to`.\\n            // Will not overflow because the sum of all user balances\\n            // cannot exceed the maximum uint256 value.\\n            sstore(toBalanceSlot, add(sload(toBalanceSlot), amount))\\n            // Emit the {Transfer} event.\\n            mstore(0x20, amount)\\n            log3(0x20, 0x20, _TRANSFER_EVENT_SIGNATURE, shr(96, from_), shr(96, mload(0x0c)))\\n        }\\n        _afterTokenTransfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          EIP-2612                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev For more performance, override to return the constant value\\n    /// of `keccak256(bytes(name()))` if `name()` will never change.\\n    function _constantNameHash() internal view virtual returns (bytes32 result) {}\\n\\n    /// @dev Returns the current nonce for `owner`.\\n    /// This value is used to compute the signature for EIP-2612 permit.\\n    function nonces(address owner) public view virtual returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute the nonce slot and load its value.\\n            mstore(0x0c, _NONCES_SLOT_SEED)\\n            mstore(0x00, owner)\\n            result := sload(keccak256(0x0c, 0x20))\\n        }\\n    }\\n\\n    /// @dev Sets `value` as the allowance of `spender` over the tokens of `owner`,\\n    /// authorized by a signed approval by `owner`.\\n    ///\\n    /// Emits a {Approval} event.\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        bytes32 nameHash = _constantNameHash();\\n        //  We simply calculate it on-the-fly to allow for cases where the `name` may change.\\n        if (nameHash == bytes32(0)) nameHash = keccak256(bytes(name()));\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Revert if the block timestamp is greater than `deadline`.\\n            if gt(timestamp(), deadline) {\\n                mstore(0x00, 0x1a15a3cc) // `PermitExpired()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let m := mload(0x40) // Grab the free memory pointer.\\n            // Clean the upper 96 bits.\\n            owner := shr(96, shl(96, owner))\\n            spender := shr(96, shl(96, spender))\\n            // Compute the nonce slot and load its value.\\n            mstore(0x0e, _NONCES_SLOT_SEED_WITH_SIGNATURE_PREFIX)\\n            mstore(0x00, owner)\\n            let nonceSlot := keccak256(0x0c, 0x20)\\n            let nonceValue := sload(nonceSlot)\\n            // Prepare the domain separator.\\n            mstore(m, _DOMAIN_TYPEHASH)\\n            mstore(add(m, 0x20), nameHash)\\n            mstore(add(m, 0x40), _VERSION_HASH)\\n            mstore(add(m, 0x60), chainid())\\n            mstore(add(m, 0x80), address())\\n            mstore(0x2e, keccak256(m, 0xa0))\\n            // Prepare the struct hash.\\n            mstore(m, _PERMIT_TYPEHASH)\\n            mstore(add(m, 0x20), owner)\\n            mstore(add(m, 0x40), spender)\\n            mstore(add(m, 0x60), value)\\n            mstore(add(m, 0x80), nonceValue)\\n            mstore(add(m, 0xa0), deadline)\\n            mstore(0x4e, keccak256(m, 0xc0))\\n            // Prepare the ecrecover calldata.\\n            mstore(0x00, keccak256(0x2c, 0x42))\\n            mstore(0x20, and(0xff, v))\\n            mstore(0x40, r)\\n            mstore(0x60, s)\\n            let t := staticcall(gas(), 1, 0, 0x80, 0x20, 0x20)\\n            // If the ecrecover fails, the returndatasize will be 0x00,\\n            // `owner` will be checked if it equals the hash at 0x00,\\n            // which evaluates to false (i.e. 0), and we will revert.\\n            // If the ecrecover succeeds, the returndatasize will be 0x20,\\n            // `owner` will be compared against the returned address at 0x20.\\n            if iszero(eq(mload(returndatasize()), owner)) {\\n                mstore(0x00, 0xddafbaef) // `InvalidPermit()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Increment and store the updated nonce.\\n            sstore(nonceSlot, add(nonceValue, t)) // `t` is 1 if ecrecover succeeds.\\n            // Compute the allowance slot and store the value.\\n            // The `owner` is already at slot 0x20.\\n            mstore(0x40, or(shl(160, _ALLOWANCE_SLOT_SEED), spender))\\n            sstore(keccak256(0x2c, 0x34), value)\\n            // Emit the {Approval} event.\\n            log3(add(m, 0x60), 0x20, _APPROVAL_EVENT_SIGNATURE, owner, spender)\\n            mstore(0x40, m) // Restore the free memory pointer.\\n            mstore(0x60, 0) // Restore the zero pointer.\\n        }\\n    }\\n\\n    /// @dev Returns the EIP-712 domain separator for the EIP-2612 permit.\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32 result) {\\n        bytes32 nameHash = _constantNameHash();\\n        //  We simply calculate it on-the-fly to allow for cases where the `name` may change.\\n        if (nameHash == bytes32(0)) nameHash = keccak256(bytes(name()));\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Grab the free memory pointer.\\n            mstore(m, _DOMAIN_TYPEHASH)\\n            mstore(add(m, 0x20), nameHash)\\n            mstore(add(m, 0x40), _VERSION_HASH)\\n            mstore(add(m, 0x60), chainid())\\n            mstore(add(m, 0x80), address())\\n            result := keccak256(m, 0xa0)\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL MINT FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Mints `amount` tokens to `to`, increasing the total supply.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _mint(address to, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(address(0), to, amount);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let totalSupplyBefore := sload(_TOTAL_SUPPLY_SLOT)\\n            let totalSupplyAfter := add(totalSupplyBefore, amount)\\n            // Revert if the total supply overflows.\\n            if lt(totalSupplyAfter, totalSupplyBefore) {\\n                mstore(0x00, 0xe5cfe957) // `TotalSupplyOverflow()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Store the updated total supply.\\n            sstore(_TOTAL_SUPPLY_SLOT, totalSupplyAfter)\\n            // Compute the balance slot and load its value.\\n            mstore(0x0c, _BALANCE_SLOT_SEED)\\n            mstore(0x00, to)\\n            let toBalanceSlot := keccak256(0x0c, 0x20)\\n            // Add and store the updated balance.\\n            sstore(toBalanceSlot, add(sload(toBalanceSlot), amount))\\n            // Emit the {Transfer} event.\\n            mstore(0x20, amount)\\n            log3(0x20, 0x20, _TRANSFER_EVENT_SIGNATURE, 0, shr(96, mload(0x0c)))\\n        }\\n        _afterTokenTransfer(address(0), to, amount);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL BURN FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Burns `amount` tokens from `from`, reducing the total supply.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _burn(address from, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(from, address(0), amount);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute the balance slot and load its value.\\n            mstore(0x0c, _BALANCE_SLOT_SEED)\\n            mstore(0x00, from)\\n            let fromBalanceSlot := keccak256(0x0c, 0x20)\\n            let fromBalance := sload(fromBalanceSlot)\\n            // Revert if insufficient balance.\\n            if gt(amount, fromBalance) {\\n                mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Subtract and store the updated balance.\\n            sstore(fromBalanceSlot, sub(fromBalance, amount))\\n            // Subtract and store the updated total supply.\\n            sstore(_TOTAL_SUPPLY_SLOT, sub(sload(_TOTAL_SUPPLY_SLOT), amount))\\n            // Emit the {Transfer} event.\\n            mstore(0x00, amount)\\n            log3(0x00, 0x20, _TRANSFER_EVENT_SIGNATURE, shr(96, shl(96, from)), 0)\\n        }\\n        _afterTokenTransfer(from, address(0), amount);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                INTERNAL TRANSFER FUNCTIONS                 */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Moves `amount` of tokens from `from` to `to`.\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(from, to, amount);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let from_ := shl(96, from)\\n            // Compute the balance slot and load its value.\\n            mstore(0x0c, or(from_, _BALANCE_SLOT_SEED))\\n            let fromBalanceSlot := keccak256(0x0c, 0x20)\\n            let fromBalance := sload(fromBalanceSlot)\\n            // Revert if insufficient balance.\\n            if gt(amount, fromBalance) {\\n                mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Subtract and store the updated balance.\\n            sstore(fromBalanceSlot, sub(fromBalance, amount))\\n            // Compute the balance slot of `to`.\\n            mstore(0x00, to)\\n            let toBalanceSlot := keccak256(0x0c, 0x20)\\n            // Add and store the updated balance of `to`.\\n            // Will not overflow because the sum of all user balances\\n            // cannot exceed the maximum uint256 value.\\n            sstore(toBalanceSlot, add(sload(toBalanceSlot), amount))\\n            // Emit the {Transfer} event.\\n            mstore(0x20, amount)\\n            log3(0x20, 0x20, _TRANSFER_EVENT_SIGNATURE, shr(96, from_), shr(96, mload(0x0c)))\\n        }\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                INTERNAL ALLOWANCE FUNCTIONS                */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Updates the allowance of `owner` for `spender` based on spent `amount`.\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute the allowance slot and load its value.\\n            mstore(0x20, spender)\\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\\n            mstore(0x00, owner)\\n            let allowanceSlot := keccak256(0x0c, 0x34)\\n            let allowance_ := sload(allowanceSlot)\\n            // If the allowance is not the maximum uint256 value.\\n            if add(allowance_, 1) {\\n                // Revert if the amount to be transferred exceeds the allowance.\\n                if gt(amount, allowance_) {\\n                    mstore(0x00, 0x13be252b) // `InsufficientAllowance()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                // Subtract and store the updated allowance.\\n                sstore(allowanceSlot, sub(allowance_, amount))\\n            }\\n        }\\n    }\\n\\n    /// @dev Sets `amount` as the allowance of `spender` over the tokens of `owner`.\\n    ///\\n    /// Emits a {Approval} event.\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let owner_ := shl(96, owner)\\n            // Compute the allowance slot and store the amount.\\n            mstore(0x20, spender)\\n            mstore(0x0c, or(owner_, _ALLOWANCE_SLOT_SEED))\\n            sstore(keccak256(0x0c, 0x34), amount)\\n            // Emit the {Approval} event.\\n            mstore(0x00, amount)\\n            log3(0x00, 0x20, _APPROVAL_EVENT_SIGNATURE, shr(96, owner_), shr(96, mload(0x2c)))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                     HOOKS TO OVERRIDE                      */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Hook that is called before any transfer of tokens.\\n    /// This includes minting and burning.\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /// @dev Hook that is called after any transfer of tokens.\\n    /// This includes minting and burning.\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb4a3f9ba8a05107f7370de42cff57f3ad26dafd438712c11531a5892de2f59e0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040526200001760006200026660201b60201c565b6004553480156200002757600080fd5b50604051620046ed380380620046ed83398181016040528101906200004d919062000b83565b6040518060400160405280600881526020017f46616b65205553440000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f6655534400000000000000000000000000000000000000000000000000000000815250338383836040518060400160405280601181526020017f4668656e6978205065726d697373696f6e0000000000000000000000000000008152506040518060400160405280600381526020017f312e3000000000000000000000000000000000000000000000000000000000008152506200013f6000836200028260201b90919060201c565b61012081815250506200015d6001826200028260201b90919060201c565b6101408181525050818051906020012060e08181525050808051906020012061010081815250504660a081815250506200019c620002da60201b60201c565b608081815250503073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505050508160059081620001ea919062000e1f565b508060069081620001fc919062000e1f565b505050600062000212826200033760201b60201c565b9050620002486200023c8262000230617fff6200026660201b60201c565b6200035560201b60201c565b620003f860201b60201c565b6200025a8382620004cb60201b60201c565b50505050505062001260565b60006200027b8260026200057160201b60201c565b9050919050565b6000602083511015620002a857620002a0836200062860201b60201c565b9050620002d4565b82620002ba836200069560201b60201c565b6000019081620002cb919062000e1f565b5060ff60001b90505b92915050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60e0516101005146306040516020016200031c95949392919062000f77565b60405160208183030381529060405280519060200120905090565b60006200034e82600001516200069f60201b60201c565b9050919050565b60006200036883620006bb60201b60201c565b62000382576200037f60006200026660201b60201c565b92505b6200039382620006bb60201b60201c565b620003ad57620003aa60006200026660201b60201c565b91505b600083905060008390506000620003ea60028484608073ffffffffffffffffffffffffffffffffffffffff1663eb274b77620006c860201b60201c565b905080935050505092915050565b62000409816200077960201b60201c565b62000423576200042060006200078660201b60201c565b90505b600081905060006200043b82620007a260201b60201c565b9050608073ffffffffffffffffffffffffffffffffffffffff16637d23f1db600d836040518363ffffffff1660e01b81526004016200047c9291906200104f565b600060405180830381865afa1580156200049a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190620004c5919062001083565b50505050565b62000516600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548262000803565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620005676004548262000803565b6004819055505050565b60006060608073ffffffffffffffffffffffffffffffffffffffff166319e1c5c4620005a386620007a260201b60201c565b856040518363ffffffff1660e01b8152600401620005c3929190620010d4565b600060405180830381865afa158015620005e1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906200060c919062001083565b90506200061f816200081f60201b60201c565b91505092915050565b600080829050601f815111156200067857826040517f305a27a90000000000000000000000000000000000000000000000000000000081526004016200066f91906200115a565b60405180910390fd5b8051816200068690620011a5565b60001c1760001b915050919050565b6000819050919050565b6000620006b48260026200082d60201b60201c565b9050919050565b6000808214159050919050565b60006060838388620006e089620007a260201b60201c565b620006f189620007a260201b60201c565b6040518463ffffffff1660e01b8152600401620007119392919062001215565b600060405180830381865afa1580156200072f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906200075a919062001083565b90506200076d81620008d460201b60201c565b91505095945050505050565b6000808214159050919050565b60006200079b82600d6200057160201b60201c565b9050919050565b6060602067ffffffffffffffff811115620007c257620007c1620009ae565b5b6040519080825280601f01601f191660200182016040528015620007f55781602001600182028036833780820191505090505b509050816020820152919050565b6000620008178383620008e260201b60201c565b905092915050565b600060208201519050919050565b60006060608073ffffffffffffffffffffffffffffffffffffffff16635fa55ca784866040518363ffffffff1660e01b81526004016200086f9291906200104f565b600060405180830381865afa1580156200088d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190620008b8919062001083565b9050620008cb816200081f60201b60201c565b91505092915050565b600060208201519050919050565b6000620008f583620006bb60201b60201c565b6200090f576200090c60006200026660201b60201c565b92505b6200092082620006bb60201b60201c565b6200093a576200093760006200026660201b60201c565b91505b6000839050600083905060006200097660028484608073ffffffffffffffffffffffffffffffffffffffff16622df619620006c860201b60201c565b905080935050505092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620009e8826200099d565b810181811067ffffffffffffffff8211171562000a0a5762000a09620009ae565b5b80604052505050565b600062000a1f62000984565b905062000a2d8282620009dd565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff82111562000a5f5762000a5e620009ae565b5b62000a6a826200099d565b9050602081019050919050565b60005b8381101562000a9757808201518184015260208101905062000a7a565b60008484015250505050565b600062000aba62000ab48462000a41565b62000a13565b90508281526020810184848401111562000ad95762000ad862000a3c565b5b62000ae684828562000a77565b509392505050565b600082601f83011262000b065762000b0562000a37565b5b815162000b1884826020860162000aa3565b91505092915050565b60006020828403121562000b3a5762000b3962000998565b5b62000b46602062000a13565b9050600082015167ffffffffffffffff81111562000b695762000b6862000a32565b5b62000b778482850162000aee565b60008301525092915050565b60006020828403121562000b9c5762000b9b6200098e565b5b600082015167ffffffffffffffff81111562000bbd5762000bbc62000993565b5b62000bcb8482850162000b21565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062000c2757607f821691505b60208210810362000c3d5762000c3c62000bdf565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830262000ca77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000c68565b62000cb3868362000c68565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000d0062000cfa62000cf48462000ccb565b62000cd5565b62000ccb565b9050919050565b6000819050919050565b62000d1c8362000cdf565b62000d3462000d2b8262000d07565b84845462000c75565b825550505050565b600090565b62000d4b62000d3c565b62000d5881848462000d11565b505050565b5b8181101562000d805762000d7460008262000d41565b60018101905062000d5e565b5050565b601f82111562000dcf5762000d998162000c43565b62000da48462000c58565b8101602085101562000db4578190505b62000dcc62000dc38562000c58565b83018262000d5d565b50505b505050565b600082821c905092915050565b600062000df46000198460080262000dd4565b1980831691505092915050565b600062000e0f838362000de1565b9150826002028217905092915050565b62000e2a8262000bd4565b67ffffffffffffffff81111562000e465762000e45620009ae565b5b62000e52825462000c0e565b62000e5f82828562000d84565b600060209050601f83116001811462000e97576000841562000e82578287015190505b62000e8e858262000e01565b86555062000efe565b601f19841662000ea78662000c43565b60005b8281101562000ed15784890151825560018201915060208501945060208101905062000eaa565b8683101562000ef1578489015162000eed601f89168262000de1565b8355505b6001600288020188555050505b505050505050565b6000819050919050565b62000f1b8162000f06565b82525050565b62000f2c8162000ccb565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000f5f8262000f32565b9050919050565b62000f718162000f52565b82525050565b600060a08201905062000f8e600083018862000f10565b62000f9d602083018762000f10565b62000fac604083018662000f10565b62000fbb606083018562000f21565b62000fca608083018462000f66565b9695505050505050565b600060ff82169050919050565b62000fec8162000fd4565b82525050565b600081519050919050565b600082825260208201905092915050565b60006200101b8262000ff2565b62001027818562000ffd565b93506200103981856020860162000a77565b62001044816200099d565b840191505092915050565b600060408201905062001066600083018562000fe1565b81810360208301526200107a81846200100e565b90509392505050565b6000602082840312156200109c576200109b6200098e565b5b600082015167ffffffffffffffff811115620010bd57620010bc62000993565b5b620010cb8482850162000aee565b91505092915050565b60006040820190508181036000830152620010f081856200100e565b905062001101602083018462000fe1565b9392505050565b600082825260208201905092915050565b6000620011268262000bd4565b62001132818562001108565b93506200114481856020860162000a77565b6200114f816200099d565b840191505092915050565b6000602082019050818103600083015262001176818462001119565b905092915050565b6000819050602082019050919050565b60006200119c825162000f06565b80915050919050565b6000620011b28262000ff2565b82620011be846200117e565b9050620011cb816200118e565b925060208210156200120e57620012097fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8360200360080262000c68565b831692505b5050919050565b60006060820190506200122c600083018662000fe1565b81810360208301526200124081856200100e565b905081810360408301526200125681846200100e565b9050949350505050565b60805160a05160c05160e051610100516101205161014051613432620012bb60003960006113ca0152600061138f015260006120d3015260006120b2015260006117f3015260006118490152600061187201526134326000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80637ecebe00116100b8578063a9059cbb1161007c578063a9059cbb146103b9578063af575a00146103e9578063c4224c1914610419578063d505accf14610449578063d918156e14610465578063dd62ed3e1461049557610142565b80637ecebe00146102fb57806384b0196e1461032b5780638624a3491461034f57806395d89b411461037f5780639f284be71461039d57610142565b80633644e5151161010a5780633644e5151461020157806339c217f71461021f5780635356c4291461024f578063602772041461027f5780636e0505e1146102af57806370a08231146102cb57610142565b806306fdde0314610147578063095ea7b31461016557806318160ddd1461019557806323b872dd146101b3578063313ce567146101e3575b600080fd5b61014f6104c5565b60405161015c9190612494565b60405180910390f35b61017f600480360381019061017a919061255e565b610557565b60405161018c91906125b9565b60405180910390f35b61019d6105ab565b6040516101aa91906125e3565b60405180910390f35b6101cd60048036038101906101c891906125fe565b6105bd565b6040516101da91906125b9565b60405180910390f35b6101eb610692565b6040516101f8919061266d565b60405180910390f35b610209610697565b60405161021691906126a1565b60405180910390f35b610239600480360381019061023491906126e0565b610729565b6040516102469190612777565b60405180910390f35b610269600480360381019061026491906127b1565b61074e565b6040516102769190612494565b60405180910390f35b610299600480360381019061029491906129e4565b61084c565b6040516102a69190612494565b60405180910390f35b6102c960048036038101906102c49190612a7c565b610982565b005b6102e560048036038101906102e09190612aa9565b610ab9565b6040516102f291906125e3565b60405180910390f35b61031560048036038101906103109190612aa9565b610ad4565b60405161032291906125e3565b60405180910390f35b610333610aef565b6040516103469796959493929190612bde565b60405180910390f35b61036960048036038101906103649190612c62565b610b99565b6040516103769190612777565b60405180910390f35b610387610bd7565b6040516103949190612494565b60405180910390f35b6103b760048036038101906103b29190612a7c565b610c69565b005b6103d360048036038101906103ce919061255e565b610d76565b6040516103e091906125b9565b60405180910390f35b61040360048036038101906103fe9190612cfd565b610e08565b6040516104109190612777565b60405180910390f35b610433600480360381019061042e9190612d50565b610e35565b6040516104409190612777565b60405180910390f35b610463600480360381019061045e9190612dbc565b610e4a565b005b61047f600480360381019061047a91906126e0565b610fee565b60405161048c91906125b9565b60405180910390f35b6104af60048036038101906104aa9190612e5e565b611016565b6040516104bc91906125e3565b60405180910390f35b6060600580546104d490612ecd565b80601f016020809104026020016040519081016040528092919081815260200182805461050090612ecd565b801561054d5780601f106105225761010080835404028352916020019161054d565b820191906000526020600020905b81548152906001019060200180831161053057829003601f168201915b5050505050905090565b600082602052637f5e9f20600c5233600052816034600c205581600052602c5160601c337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560206000a36001905092915050565b60006805345cdf77eb68f44c54905090565b60006105ca848484611036565b8360601b33602052637f5e9f208117600c526034600c20805460018101156106085780851115610602576313be252b6000526004601cfd5b84810382555b6387a211a28317600c526020600c2080548087111561062f5763f4d678b86000526004601cfd5b8681038255876000526020600c2087815401815587602052600c5160601c8660601c7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef602080a350505050505061068784848461103b565b600190509392505050565b600090565b6000806106a2611040565b90506000801b81036106c0576106b66104c5565b8051906020012090505b6040517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81528160208201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6604082015246606082015230608082015260a081209250505090565b6000610746836107418461073c90612f56565b611045565b610e35565b905092915050565b60608161075a90612f69565b60006107b17f6bdaeb2d29561f159c7ef98b16b27015fb2aeb87209c7ee656226d912f59927d8360000151604051602001610796929190612f7c565b6040516020818303038152906040528051906020012061105b565b905060006107c3828460200151611075565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461082a576040517f3093a27700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61084161083733886110a1565b8660000135611128565b935050505092915050565b6060818360006108a77f6bdaeb2d29561f159c7ef98b16b27015fb2aeb87209c7ee656226d912f59927d846000015160405160200161088c929190612f7c565b6040516020818303038152906040528051906020012061105b565b905060006108b9828560200151611075565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610920576040517f51c65eae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109768660000151600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461115e90919063ffffffff16565b94505050505092915050565b60006109938263ffffffff16611172565b905060006109fc6109ec83600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461118690919063ffffffff16565b836109f76000611172565b61119a565b9050610a47600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611218565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a9660045482611218565b600481905550610ab433610aa98361122c565b63ffffffff166112ef565b505050565b60006387a211a2600c52816000526020600c20549050919050565b60006338377508600c52816000526020600c20549050919050565b600060608060008060006060610b03611386565b610b0b6113c1565b46306000801b600067ffffffffffffffff811115610b2c57610b2b612812565b5b604051908082528060200260200182016040528015610b5a5781602001602082028036833780820191505090505b507f0f00000000000000000000000000000000000000000000000000000000000000959493929190965096509650965096509650965090919293949596565b600080610bae83610ba990612f56565b611045565b90506000610bbd8633846113fc565b9050610bca868683611439565b5080925050509392505050565b606060068054610be690612ecd565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1290612ecd565b8015610c5f5780601f10610c3457610100808354040283529160200191610c5f565b820191906000526020600020905b815481529060010190602001808311610c4257829003601f168201915b5050505050905090565b8063ffffffff16610c7933610ab9565b1015610cb1576040517ffda7bbda00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610cc1338263ffffffff166115c6565b6000610cd28263ffffffff16611172565b9050610d1d600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261165d565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d6c6004548261165d565b6004819055505050565b6000610d83338484611036565b6387a211a2600c52336000526020600c20805480841115610dac5763f4d678b86000526004601cfd5b8381038255846000526020600c2084815401815584602052600c5160601c337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef602080a3505050610dfe33848461103b565b6001905092915050565b6000808290506000610e1b8633846113fc565b9050610e28868683611439565b5080925050509392505050565b6000610e42338484611439565b905092915050565b6000610e54611040565b90506000801b8103610e7257610e686104c5565b8051906020012090505b84421115610e8857631a15a3cc6000526004601cfd5b6040518860601b60601c98508760601b60601c975065383775081901600e52886000526020600c2080547f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f83528360208401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6604084015246606084015230608084015260a08320602e527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c983528a60208401528960408401528860608401528060808401528760a084015260c08320604e526042602c206000528660ff1660205285604052846060526020806080600060015afa8b3d5114610f945763ddafbaef6000526004601cfd5b80820183558a637f5e9f2060a01b17604052896034602c20558a8c7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925602060608801a3836040526000606052505050505050505050505050565b600061100c33846110078561100290612f56565b611045565b611671565b6001905092915050565b600081602052637f5e9f20600c52826000526034600c2054905092915050565b505050565b505050565b600090565b600061105482600001516117db565b9050919050565b600061106e6110686117ef565b836118a6565b9050919050565b60008060008061108586866118e7565b9250925092506110958282611943565b82935050505092915050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b606061113383611aa7565b611144576111416000611172565b92505b600083905061115560028285611ab4565b91505092915050565b606061116a8383611128565b905092915050565b600061117f826002611b6a565b9050919050565b60006111928383611c0c565b905092915050565b60006111a584611c85565b6111b6576111b36000611c92565b93505b6111bf83611aa7565b6111d0576111cd6000611172565b92505b6111d982611aa7565b6111ea576111e76000611172565b91505b60008490506000849050600084905060006112086002858585611ca6565b9050809450505050509392505050565b60006112248383611d5e565b905092915050565b600061123782611aa7565b611248576112456000611172565b91505b6000829050600061125882611dd7565b90506000608073ffffffffffffffffffffffffffffffffffffffff166373cc01546002846040518363ffffffff1660e01b8152600401611299929190612ffa565b602060405180830381865afa1580156112b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112da919061303f565b90506112e581611e34565b9350505050919050565b6112fb60008383611036565b6805345cdf77eb68f44c548181018181101561131f5763e5cfe9576000526004601cfd5b806805345cdf77eb68f44c556387a211a2600c52836000526020600c2083815401815583602052600c5160601c60007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef602080a35050506113826000838361103b565b5050565b60606113bc60007f0000000000000000000000000000000000000000000000000000000000000000611e3e90919063ffffffff16565b905090565b60606113f760017f0000000000000000000000000000000000000000000000000000000000000000611e3e90919063ffffffff16565b905090565b60008061140985856110a1565b905060006114178285611eee565b905061142d86866114288585611218565b611671565b80925050509392505050565b6000806114a1611491600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485611f6790919063ffffffff16565b8461149c6000611172565b61119a565b90506114ec600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261165d565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611578600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611218565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550809150509392505050565b6115d282600083611036565b6387a211a2600c52816000526020600c208054808311156115fb5763f4d678b86000526004601cfd5b8281038255826805345cdf77eb68f44c54036805345cdf77eb68f44c558260005260008460601b60601c7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206000a350506116598260008361103b565b5050565b60006116698383611f7b565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036116e35760006040517fe602df050000000000000000000000000000000000000000000000000000000081526004016116da919061306c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036117555760006040517f94280d6200000000000000000000000000000000000000000000000000000000815260040161174c919061306c565b60405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b60006117e8826002611ff3565b9050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614801561186b57507f000000000000000000000000000000000000000000000000000000000000000046145b15611898577f000000000000000000000000000000000000000000000000000000000000000090506118a3565b6118a061208d565b90505b90565b60006040517f190100000000000000000000000000000000000000000000000000000000000081528360028201528260228201526042812091505092915050565b6000806000604184510361192c5760008060006020870151925060408701519150606087015160001a905061191e88828585612123565b95509550955050505061193c565b60006002855160001b9250925092505b9250925092565b6000600381111561195757611956613087565b5b82600381111561196a57611969613087565b5b0315611aa3576001600381111561198457611983613087565b5b82600381111561199757611996613087565b5b036119ce576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260038111156119e2576119e1613087565b5b8260038111156119f5576119f4613087565b5b03611a3a578060001c6040517ffce698f7000000000000000000000000000000000000000000000000000000008152600401611a3191906125e3565b60405180910390fd5b600380811115611a4d57611a4c613087565b5b826003811115611a6057611a5f613087565b5b03611aa257806040517fd78bce0c000000000000000000000000000000000000000000000000000000008152600401611a9991906126a1565b60405180910390fd5b5b5050565b6000808214159050919050565b6060608073ffffffffffffffffffffffffffffffffffffffff1663a1848ff385611add86611dd7565b85604051602001611aee91906130d7565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401611b1b939291906130f2565b600060405180830381865afa158015611b38573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611b6191906131d8565b90509392505050565b60006060608073ffffffffffffffffffffffffffffffffffffffff166319e1c5c4611b9486611dd7565b856040518363ffffffff1660e01b8152600401611bb2929190613221565b600060405180830381865afa158015611bcf573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611bf891906132c1565b9050611c0381612217565b91505092915050565b6000611c1783611aa7565b611c2857611c256000611172565b92505b611c3182611aa7565b611c4257611c3f6000611172565b91505b600083905060008390506000611c7760028484608073ffffffffffffffffffffffffffffffffffffffff1663650de1cf612225565b905080935050505092915050565b6000808214159050919050565b6000611c9f82600d611b6a565b9050919050565b60006060608073ffffffffffffffffffffffffffffffffffffffff1663c2d9695287611cd188611dd7565b611cda88611dd7565b611ce388611dd7565b6040518563ffffffff1660e01b8152600401611d02949392919061330a565b600060405180830381865afa158015611d1f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611d4891906132c1565b9050611d5381612217565b915050949350505050565b6000611d6983611aa7565b611d7a57611d776000611172565b92505b611d8382611aa7565b611d9457611d916000611172565b91505b600083905060008390506000611dc960028484608073ffffffffffffffffffffffffffffffffffffffff1663cc2cbeff612225565b905080935050505092915050565b6060602067ffffffffffffffff811115611df457611df3612812565b5b6040519080825280601f01601f191660200182016040528015611e265781602001600182028036833780820191505090505b509050816020820152919050565b6000819050919050565b606060ff60001b8314611e5b57611e54836122b9565b9050611ee8565b818054611e6790612ecd565b80601f0160208091040260200160405190810160405280929190818152602001828054611e9390612ecd565b8015611ee05780601f10611eb557610100808354040283529160200191611ee0565b820191906000526020600020905b815481529060010190602001808311611ec357829003601f168201915b505050505090505b92915050565b6000611ef983611aa7565b611f0a57611f076000611172565b92505b611f1382611aa7565b611f2457611f216000611172565b91505b600083905060008390506000611f5960028484608073ffffffffffffffffffffffffffffffffffffffff16635211c679612225565b905080935050505092915050565b6000611f73838361232d565b905092915050565b6000611f8683611aa7565b611f9757611f946000611172565b92505b611fa082611aa7565b611fb157611fae6000611172565b91505b600083905060008390506000611fe560028484608073ffffffffffffffffffffffffffffffffffffffff16622df619612225565b905080935050505092915050565b60006060608073ffffffffffffffffffffffffffffffffffffffff16635fa55ca784866040518363ffffffff1660e01b8152600401612033929190612ffa565b600060405180830381865afa158015612050573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061207991906132c1565b905061208481612217565b91505092915050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000004630604051602001612108959493929190613364565b60405160208183030381529060405280519060200120905090565b60008060007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08460001c111561216357600060038592509250925061220d565b60006001888888886040516000815260200160405260405161218894939291906133b7565b6020604051602081039080840390855afa1580156121aa573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036121fe57600060016000801b9350935093505061220d565b8060008060001b935093509350505b9450945094915050565b600060208201519050919050565b6000606083838861223589611dd7565b61223e89611dd7565b6040518463ffffffff1660e01b815260040161225c939291906130f2565b600060405180830381865afa158015612279573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906122a291906132c1565b90506122ad816123a6565b91505095945050505050565b606060006122c6836123b4565b90506000602067ffffffffffffffff8111156122e5576122e4612812565b5b6040519080825280601f01601f1916602001820160405280156123175781602001600182028036833780820191505090505b5090508181528360208201528092505050919050565b600061233883611aa7565b612349576123466000611172565b92505b61235282611aa7565b612363576123606000611172565b91505b60008390506000839050600061239860028484608073ffffffffffffffffffffffffffffffffffffffff1663eb274b77612225565b905080935050505092915050565b600060208201519050919050565b60008060ff8360001c169050601f8111156123fb576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80915050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561243e578082015181840152602081019050612423565b60008484015250505050565b6000601f19601f8301169050919050565b600061246682612404565b612470818561240f565b9350612480818560208601612420565b6124898161244a565b840191505092915050565b600060208201905081810360008301526124ae818461245b565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006124f5826124ca565b9050919050565b612505816124ea565b811461251057600080fd5b50565b600081359050612522816124fc565b92915050565b6000819050919050565b61253b81612528565b811461254657600080fd5b50565b60008135905061255881612532565b92915050565b60008060408385031215612575576125746124c0565b5b600061258385828601612513565b925050602061259485828601612549565b9150509250929050565b60008115159050919050565b6125b38161259e565b82525050565b60006020820190506125ce60008301846125aa565b92915050565b6125dd81612528565b82525050565b60006020820190506125f860008301846125d4565b92915050565b600080600060608486031215612617576126166124c0565b5b600061262586828701612513565b935050602061263686828701612513565b925050604061264786828701612549565b9150509250925092565b600060ff82169050919050565b61266781612651565b82525050565b6000602082019050612682600083018461265e565b92915050565b6000819050919050565b61269b81612688565b82525050565b60006020820190506126b66000830184612692565b92915050565b600080fd5b6000602082840312156126d7576126d66126bc565b5b81905092915050565b600080604083850312156126f7576126f66124c0565b5b600061270585828601612513565b925050602083013567ffffffffffffffff811115612726576127256124c5565b5b612732858286016126c1565b9150509250929050565b6000819050919050565b600061276161275c61275784612528565b61273c565b612528565b9050919050565b61277181612746565b82525050565b600060208201905061278c6000830184612768565b92915050565b6000604082840312156127a8576127a76126bc565b5b81905092915050565b600080604083850312156127c8576127c76124c0565b5b60006127d685828601612513565b925050602083013567ffffffffffffffff8111156127f7576127f66124c5565b5b61280385828601612792565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61284a8261244a565b810181811067ffffffffffffffff8211171561286957612868612812565b5b80604052505050565b600061287c6124b6565b90506128888282612841565b919050565b600080fd5b61289b81612688565b81146128a657600080fd5b50565b6000813590506128b881612892565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156128e3576128e2612812565b5b6128ec8261244a565b9050602081019050919050565b82818337600083830152505050565b600061291b612916846128c8565b612872565b905082815260208101848484011115612937576129366128c3565b5b6129428482856128f9565b509392505050565b600082601f83011261295f5761295e6128be565b5b813561296f848260208601612908565b91505092915050565b60006040828403121561298e5761298d61280d565b5b6129986040612872565b905060006129a8848285016128a9565b600083015250602082013567ffffffffffffffff8111156129cc576129cb61288d565b5b6129d88482850161294a565b60208301525092915050565b600080604083850312156129fb576129fa6124c0565b5b6000612a0985828601612513565b925050602083013567ffffffffffffffff811115612a2a57612a296124c5565b5b612a3685828601612978565b9150509250929050565b600063ffffffff82169050919050565b612a5981612a40565b8114612a6457600080fd5b50565b600081359050612a7681612a50565b92915050565b600060208284031215612a9257612a916124c0565b5b6000612aa084828501612a67565b91505092915050565b600060208284031215612abf57612abe6124c0565b5b6000612acd84828501612513565b91505092915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b612b0b81612ad6565b82525050565b612b1a816124ea565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612b5581612528565b82525050565b6000612b678383612b4c565b60208301905092915050565b6000602082019050919050565b6000612b8b82612b20565b612b958185612b2b565b9350612ba083612b3c565b8060005b83811015612bd1578151612bb88882612b5b565b9750612bc383612b73565b925050600181019050612ba4565b5085935050505092915050565b600060e082019050612bf3600083018a612b02565b8181036020830152612c05818961245b565b90508181036040830152612c19818861245b565b9050612c2860608301876125d4565b612c356080830186612b11565b612c4260a0830185612692565b81810360c0830152612c548184612b80565b905098975050505050505050565b600080600060608486031215612c7b57612c7a6124c0565b5b6000612c8986828701612513565b9350506020612c9a86828701612513565b925050604084013567ffffffffffffffff811115612cbb57612cba6124c5565b5b612cc7868287016126c1565b9150509250925092565b612cda81612528565b8114612ce557600080fd5b50565b600081359050612cf781612cd1565b92915050565b600080600060608486031215612d1657612d156124c0565b5b6000612d2486828701612513565b9350506020612d3586828701612513565b9250506040612d4686828701612ce8565b9150509250925092565b60008060408385031215612d6757612d666124c0565b5b6000612d7585828601612513565b9250506020612d8685828601612ce8565b9150509250929050565b612d9981612651565b8114612da457600080fd5b50565b600081359050612db681612d90565b92915050565b600080600080600080600060e0888a031215612ddb57612dda6124c0565b5b6000612de98a828b01612513565b9750506020612dfa8a828b01612513565b9650506040612e0b8a828b01612549565b9550506060612e1c8a828b01612549565b9450506080612e2d8a828b01612da7565b93505060a0612e3e8a828b016128a9565b92505060c0612e4f8a828b016128a9565b91505092959891949750929550565b60008060408385031215612e7557612e746124c0565b5b6000612e8385828601612513565b9250506020612e9485828601612513565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612ee557607f821691505b602082108103612ef857612ef7612e9e565b5b50919050565b600060208284031215612f1457612f1361280d565b5b612f1e6020612872565b9050600082013567ffffffffffffffff811115612f3e57612f3d61288d565b5b612f4a8482850161294a565b60008301525092915050565b6000612f623683612efe565b9050919050565b6000612f753683612978565b9050919050565b6000604082019050612f916000830185612692565b612f9e6020830184612692565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000612fcc82612fa5565b612fd68185612fb0565b9350612fe6818560208601612420565b612fef8161244a565b840191505092915050565b600060408201905061300f600083018561265e565b81810360208301526130218184612fc1565b90509392505050565b60008151905061303981612532565b92915050565b600060208284031215613055576130546124c0565b5b60006130638482850161302a565b91505092915050565b60006020820190506130816000830184612b11565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000819050919050565b6130d16130cc82612688565b6130b6565b82525050565b60006130e382846130c0565b60208201915081905092915050565b6000606082019050613107600083018661265e565b81810360208301526131198185612fc1565b9050818103604083015261312d8184612fc1565b9050949350505050565b600067ffffffffffffffff82111561315257613151612812565b5b61315b8261244a565b9050602081019050919050565b600061317b61317684613137565b612872565b905082815260208101848484011115613197576131966128c3565b5b6131a2848285612420565b509392505050565b600082601f8301126131bf576131be6128be565b5b81516131cf848260208601613168565b91505092915050565b6000602082840312156131ee576131ed6124c0565b5b600082015167ffffffffffffffff81111561320c5761320b6124c5565b5b613218848285016131aa565b91505092915050565b6000604082019050818103600083015261323b8185612fc1565b905061324a602083018461265e565b9392505050565b600061326461325f846128c8565b612872565b9050828152602081018484840111156132805761327f6128c3565b5b61328b848285612420565b509392505050565b600082601f8301126132a8576132a76128be565b5b81516132b8848260208601613251565b91505092915050565b6000602082840312156132d7576132d66124c0565b5b600082015167ffffffffffffffff8111156132f5576132f46124c5565b5b61330184828501613293565b91505092915050565b600060808201905061331f600083018761265e565b81810360208301526133318186612fc1565b905081810360408301526133458185612fc1565b905081810360608301526133598184612fc1565b905095945050505050565b600060a0820190506133796000830188612692565b6133866020830187612692565b6133936040830186612692565b6133a060608301856125d4565b6133ad6080830184612b11565b9695505050505050565b60006080820190506133cc6000830187612692565b6133d9602083018661265e565b6133e66040830185612692565b6133f36060830184612692565b9594505050505056fea26469706673582212206fbeb8e1ec3f02417977449b5aeaa49948b06e45fb35839779a0eb78b912ebec64736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c80637ecebe00116100b8578063a9059cbb1161007c578063a9059cbb146103b9578063af575a00146103e9578063c4224c1914610419578063d505accf14610449578063d918156e14610465578063dd62ed3e1461049557610142565b80637ecebe00146102fb57806384b0196e1461032b5780638624a3491461034f57806395d89b411461037f5780639f284be71461039d57610142565b80633644e5151161010a5780633644e5151461020157806339c217f71461021f5780635356c4291461024f578063602772041461027f5780636e0505e1146102af57806370a08231146102cb57610142565b806306fdde0314610147578063095ea7b31461016557806318160ddd1461019557806323b872dd146101b3578063313ce567146101e3575b600080fd5b61014f6104c5565b60405161015c9190612494565b60405180910390f35b61017f600480360381019061017a919061255e565b610557565b60405161018c91906125b9565b60405180910390f35b61019d6105ab565b6040516101aa91906125e3565b60405180910390f35b6101cd60048036038101906101c891906125fe565b6105bd565b6040516101da91906125b9565b60405180910390f35b6101eb610692565b6040516101f8919061266d565b60405180910390f35b610209610697565b60405161021691906126a1565b60405180910390f35b610239600480360381019061023491906126e0565b610729565b6040516102469190612777565b60405180910390f35b610269600480360381019061026491906127b1565b61074e565b6040516102769190612494565b60405180910390f35b610299600480360381019061029491906129e4565b61084c565b6040516102a69190612494565b60405180910390f35b6102c960048036038101906102c49190612a7c565b610982565b005b6102e560048036038101906102e09190612aa9565b610ab9565b6040516102f291906125e3565b60405180910390f35b61031560048036038101906103109190612aa9565b610ad4565b60405161032291906125e3565b60405180910390f35b610333610aef565b6040516103469796959493929190612bde565b60405180910390f35b61036960048036038101906103649190612c62565b610b99565b6040516103769190612777565b60405180910390f35b610387610bd7565b6040516103949190612494565b60405180910390f35b6103b760048036038101906103b29190612a7c565b610c69565b005b6103d360048036038101906103ce919061255e565b610d76565b6040516103e091906125b9565b60405180910390f35b61040360048036038101906103fe9190612cfd565b610e08565b6040516104109190612777565b60405180910390f35b610433600480360381019061042e9190612d50565b610e35565b6040516104409190612777565b60405180910390f35b610463600480360381019061045e9190612dbc565b610e4a565b005b61047f600480360381019061047a91906126e0565b610fee565b60405161048c91906125b9565b60405180910390f35b6104af60048036038101906104aa9190612e5e565b611016565b6040516104bc91906125e3565b60405180910390f35b6060600580546104d490612ecd565b80601f016020809104026020016040519081016040528092919081815260200182805461050090612ecd565b801561054d5780601f106105225761010080835404028352916020019161054d565b820191906000526020600020905b81548152906001019060200180831161053057829003601f168201915b5050505050905090565b600082602052637f5e9f20600c5233600052816034600c205581600052602c5160601c337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560206000a36001905092915050565b60006805345cdf77eb68f44c54905090565b60006105ca848484611036565b8360601b33602052637f5e9f208117600c526034600c20805460018101156106085780851115610602576313be252b6000526004601cfd5b84810382555b6387a211a28317600c526020600c2080548087111561062f5763f4d678b86000526004601cfd5b8681038255876000526020600c2087815401815587602052600c5160601c8660601c7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef602080a350505050505061068784848461103b565b600190509392505050565b600090565b6000806106a2611040565b90506000801b81036106c0576106b66104c5565b8051906020012090505b6040517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81528160208201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6604082015246606082015230608082015260a081209250505090565b6000610746836107418461073c90612f56565b611045565b610e35565b905092915050565b60608161075a90612f69565b60006107b17f6bdaeb2d29561f159c7ef98b16b27015fb2aeb87209c7ee656226d912f59927d8360000151604051602001610796929190612f7c565b6040516020818303038152906040528051906020012061105b565b905060006107c3828460200151611075565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461082a576040517f3093a27700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61084161083733886110a1565b8660000135611128565b935050505092915050565b6060818360006108a77f6bdaeb2d29561f159c7ef98b16b27015fb2aeb87209c7ee656226d912f59927d846000015160405160200161088c929190612f7c565b6040516020818303038152906040528051906020012061105b565b905060006108b9828560200151611075565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610920576040517f51c65eae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109768660000151600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461115e90919063ffffffff16565b94505050505092915050565b60006109938263ffffffff16611172565b905060006109fc6109ec83600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461118690919063ffffffff16565b836109f76000611172565b61119a565b9050610a47600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611218565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a9660045482611218565b600481905550610ab433610aa98361122c565b63ffffffff166112ef565b505050565b60006387a211a2600c52816000526020600c20549050919050565b60006338377508600c52816000526020600c20549050919050565b600060608060008060006060610b03611386565b610b0b6113c1565b46306000801b600067ffffffffffffffff811115610b2c57610b2b612812565b5b604051908082528060200260200182016040528015610b5a5781602001602082028036833780820191505090505b507f0f00000000000000000000000000000000000000000000000000000000000000959493929190965096509650965096509650965090919293949596565b600080610bae83610ba990612f56565b611045565b90506000610bbd8633846113fc565b9050610bca868683611439565b5080925050509392505050565b606060068054610be690612ecd565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1290612ecd565b8015610c5f5780601f10610c3457610100808354040283529160200191610c5f565b820191906000526020600020905b815481529060010190602001808311610c4257829003601f168201915b5050505050905090565b8063ffffffff16610c7933610ab9565b1015610cb1576040517ffda7bbda00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610cc1338263ffffffff166115c6565b6000610cd28263ffffffff16611172565b9050610d1d600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261165d565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d6c6004548261165d565b6004819055505050565b6000610d83338484611036565b6387a211a2600c52336000526020600c20805480841115610dac5763f4d678b86000526004601cfd5b8381038255846000526020600c2084815401815584602052600c5160601c337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef602080a3505050610dfe33848461103b565b6001905092915050565b6000808290506000610e1b8633846113fc565b9050610e28868683611439565b5080925050509392505050565b6000610e42338484611439565b905092915050565b6000610e54611040565b90506000801b8103610e7257610e686104c5565b8051906020012090505b84421115610e8857631a15a3cc6000526004601cfd5b6040518860601b60601c98508760601b60601c975065383775081901600e52886000526020600c2080547f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f83528360208401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6604084015246606084015230608084015260a08320602e527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c983528a60208401528960408401528860608401528060808401528760a084015260c08320604e526042602c206000528660ff1660205285604052846060526020806080600060015afa8b3d5114610f945763ddafbaef6000526004601cfd5b80820183558a637f5e9f2060a01b17604052896034602c20558a8c7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925602060608801a3836040526000606052505050505050505050505050565b600061100c33846110078561100290612f56565b611045565b611671565b6001905092915050565b600081602052637f5e9f20600c52826000526034600c2054905092915050565b505050565b505050565b600090565b600061105482600001516117db565b9050919050565b600061106e6110686117ef565b836118a6565b9050919050565b60008060008061108586866118e7565b9250925092506110958282611943565b82935050505092915050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b606061113383611aa7565b611144576111416000611172565b92505b600083905061115560028285611ab4565b91505092915050565b606061116a8383611128565b905092915050565b600061117f826002611b6a565b9050919050565b60006111928383611c0c565b905092915050565b60006111a584611c85565b6111b6576111b36000611c92565b93505b6111bf83611aa7565b6111d0576111cd6000611172565b92505b6111d982611aa7565b6111ea576111e76000611172565b91505b60008490506000849050600084905060006112086002858585611ca6565b9050809450505050509392505050565b60006112248383611d5e565b905092915050565b600061123782611aa7565b611248576112456000611172565b91505b6000829050600061125882611dd7565b90506000608073ffffffffffffffffffffffffffffffffffffffff166373cc01546002846040518363ffffffff1660e01b8152600401611299929190612ffa565b602060405180830381865afa1580156112b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112da919061303f565b90506112e581611e34565b9350505050919050565b6112fb60008383611036565b6805345cdf77eb68f44c548181018181101561131f5763e5cfe9576000526004601cfd5b806805345cdf77eb68f44c556387a211a2600c52836000526020600c2083815401815583602052600c5160601c60007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef602080a35050506113826000838361103b565b5050565b60606113bc60007f0000000000000000000000000000000000000000000000000000000000000000611e3e90919063ffffffff16565b905090565b60606113f760017f0000000000000000000000000000000000000000000000000000000000000000611e3e90919063ffffffff16565b905090565b60008061140985856110a1565b905060006114178285611eee565b905061142d86866114288585611218565b611671565b80925050509392505050565b6000806114a1611491600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485611f6790919063ffffffff16565b8461149c6000611172565b61119a565b90506114ec600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261165d565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611578600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611218565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550809150509392505050565b6115d282600083611036565b6387a211a2600c52816000526020600c208054808311156115fb5763f4d678b86000526004601cfd5b8281038255826805345cdf77eb68f44c54036805345cdf77eb68f44c558260005260008460601b60601c7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206000a350506116598260008361103b565b5050565b60006116698383611f7b565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036116e35760006040517fe602df050000000000000000000000000000000000000000000000000000000081526004016116da919061306c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036117555760006040517f94280d6200000000000000000000000000000000000000000000000000000000815260040161174c919061306c565b60405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b60006117e8826002611ff3565b9050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614801561186b57507f000000000000000000000000000000000000000000000000000000000000000046145b15611898577f000000000000000000000000000000000000000000000000000000000000000090506118a3565b6118a061208d565b90505b90565b60006040517f190100000000000000000000000000000000000000000000000000000000000081528360028201528260228201526042812091505092915050565b6000806000604184510361192c5760008060006020870151925060408701519150606087015160001a905061191e88828585612123565b95509550955050505061193c565b60006002855160001b9250925092505b9250925092565b6000600381111561195757611956613087565b5b82600381111561196a57611969613087565b5b0315611aa3576001600381111561198457611983613087565b5b82600381111561199757611996613087565b5b036119ce576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260038111156119e2576119e1613087565b5b8260038111156119f5576119f4613087565b5b03611a3a578060001c6040517ffce698f7000000000000000000000000000000000000000000000000000000008152600401611a3191906125e3565b60405180910390fd5b600380811115611a4d57611a4c613087565b5b826003811115611a6057611a5f613087565b5b03611aa257806040517fd78bce0c000000000000000000000000000000000000000000000000000000008152600401611a9991906126a1565b60405180910390fd5b5b5050565b6000808214159050919050565b6060608073ffffffffffffffffffffffffffffffffffffffff1663a1848ff385611add86611dd7565b85604051602001611aee91906130d7565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401611b1b939291906130f2565b600060405180830381865afa158015611b38573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611b6191906131d8565b90509392505050565b60006060608073ffffffffffffffffffffffffffffffffffffffff166319e1c5c4611b9486611dd7565b856040518363ffffffff1660e01b8152600401611bb2929190613221565b600060405180830381865afa158015611bcf573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611bf891906132c1565b9050611c0381612217565b91505092915050565b6000611c1783611aa7565b611c2857611c256000611172565b92505b611c3182611aa7565b611c4257611c3f6000611172565b91505b600083905060008390506000611c7760028484608073ffffffffffffffffffffffffffffffffffffffff1663650de1cf612225565b905080935050505092915050565b6000808214159050919050565b6000611c9f82600d611b6a565b9050919050565b60006060608073ffffffffffffffffffffffffffffffffffffffff1663c2d9695287611cd188611dd7565b611cda88611dd7565b611ce388611dd7565b6040518563ffffffff1660e01b8152600401611d02949392919061330a565b600060405180830381865afa158015611d1f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611d4891906132c1565b9050611d5381612217565b915050949350505050565b6000611d6983611aa7565b611d7a57611d776000611172565b92505b611d8382611aa7565b611d9457611d916000611172565b91505b600083905060008390506000611dc960028484608073ffffffffffffffffffffffffffffffffffffffff1663cc2cbeff612225565b905080935050505092915050565b6060602067ffffffffffffffff811115611df457611df3612812565b5b6040519080825280601f01601f191660200182016040528015611e265781602001600182028036833780820191505090505b509050816020820152919050565b6000819050919050565b606060ff60001b8314611e5b57611e54836122b9565b9050611ee8565b818054611e6790612ecd565b80601f0160208091040260200160405190810160405280929190818152602001828054611e9390612ecd565b8015611ee05780601f10611eb557610100808354040283529160200191611ee0565b820191906000526020600020905b815481529060010190602001808311611ec357829003601f168201915b505050505090505b92915050565b6000611ef983611aa7565b611f0a57611f076000611172565b92505b611f1382611aa7565b611f2457611f216000611172565b91505b600083905060008390506000611f5960028484608073ffffffffffffffffffffffffffffffffffffffff16635211c679612225565b905080935050505092915050565b6000611f73838361232d565b905092915050565b6000611f8683611aa7565b611f9757611f946000611172565b92505b611fa082611aa7565b611fb157611fae6000611172565b91505b600083905060008390506000611fe560028484608073ffffffffffffffffffffffffffffffffffffffff16622df619612225565b905080935050505092915050565b60006060608073ffffffffffffffffffffffffffffffffffffffff16635fa55ca784866040518363ffffffff1660e01b8152600401612033929190612ffa565b600060405180830381865afa158015612050573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061207991906132c1565b905061208481612217565b91505092915050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000004630604051602001612108959493929190613364565b60405160208183030381529060405280519060200120905090565b60008060007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08460001c111561216357600060038592509250925061220d565b60006001888888886040516000815260200160405260405161218894939291906133b7565b6020604051602081039080840390855afa1580156121aa573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036121fe57600060016000801b9350935093505061220d565b8060008060001b935093509350505b9450945094915050565b600060208201519050919050565b6000606083838861223589611dd7565b61223e89611dd7565b6040518463ffffffff1660e01b815260040161225c939291906130f2565b600060405180830381865afa158015612279573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906122a291906132c1565b90506122ad816123a6565b91505095945050505050565b606060006122c6836123b4565b90506000602067ffffffffffffffff8111156122e5576122e4612812565b5b6040519080825280601f01601f1916602001820160405280156123175781602001600182028036833780820191505090505b5090508181528360208201528092505050919050565b600061233883611aa7565b612349576123466000611172565b92505b61235282611aa7565b612363576123606000611172565b91505b60008390506000839050600061239860028484608073ffffffffffffffffffffffffffffffffffffffff1663eb274b77612225565b905080935050505092915050565b600060208201519050919050565b60008060ff8360001c169050601f8111156123fb576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80915050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561243e578082015181840152602081019050612423565b60008484015250505050565b6000601f19601f8301169050919050565b600061246682612404565b612470818561240f565b9350612480818560208601612420565b6124898161244a565b840191505092915050565b600060208201905081810360008301526124ae818461245b565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006124f5826124ca565b9050919050565b612505816124ea565b811461251057600080fd5b50565b600081359050612522816124fc565b92915050565b6000819050919050565b61253b81612528565b811461254657600080fd5b50565b60008135905061255881612532565b92915050565b60008060408385031215612575576125746124c0565b5b600061258385828601612513565b925050602061259485828601612549565b9150509250929050565b60008115159050919050565b6125b38161259e565b82525050565b60006020820190506125ce60008301846125aa565b92915050565b6125dd81612528565b82525050565b60006020820190506125f860008301846125d4565b92915050565b600080600060608486031215612617576126166124c0565b5b600061262586828701612513565b935050602061263686828701612513565b925050604061264786828701612549565b9150509250925092565b600060ff82169050919050565b61266781612651565b82525050565b6000602082019050612682600083018461265e565b92915050565b6000819050919050565b61269b81612688565b82525050565b60006020820190506126b66000830184612692565b92915050565b600080fd5b6000602082840312156126d7576126d66126bc565b5b81905092915050565b600080604083850312156126f7576126f66124c0565b5b600061270585828601612513565b925050602083013567ffffffffffffffff811115612726576127256124c5565b5b612732858286016126c1565b9150509250929050565b6000819050919050565b600061276161275c61275784612528565b61273c565b612528565b9050919050565b61277181612746565b82525050565b600060208201905061278c6000830184612768565b92915050565b6000604082840312156127a8576127a76126bc565b5b81905092915050565b600080604083850312156127c8576127c76124c0565b5b60006127d685828601612513565b925050602083013567ffffffffffffffff8111156127f7576127f66124c5565b5b61280385828601612792565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61284a8261244a565b810181811067ffffffffffffffff8211171561286957612868612812565b5b80604052505050565b600061287c6124b6565b90506128888282612841565b919050565b600080fd5b61289b81612688565b81146128a657600080fd5b50565b6000813590506128b881612892565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156128e3576128e2612812565b5b6128ec8261244a565b9050602081019050919050565b82818337600083830152505050565b600061291b612916846128c8565b612872565b905082815260208101848484011115612937576129366128c3565b5b6129428482856128f9565b509392505050565b600082601f83011261295f5761295e6128be565b5b813561296f848260208601612908565b91505092915050565b60006040828403121561298e5761298d61280d565b5b6129986040612872565b905060006129a8848285016128a9565b600083015250602082013567ffffffffffffffff8111156129cc576129cb61288d565b5b6129d88482850161294a565b60208301525092915050565b600080604083850312156129fb576129fa6124c0565b5b6000612a0985828601612513565b925050602083013567ffffffffffffffff811115612a2a57612a296124c5565b5b612a3685828601612978565b9150509250929050565b600063ffffffff82169050919050565b612a5981612a40565b8114612a6457600080fd5b50565b600081359050612a7681612a50565b92915050565b600060208284031215612a9257612a916124c0565b5b6000612aa084828501612a67565b91505092915050565b600060208284031215612abf57612abe6124c0565b5b6000612acd84828501612513565b91505092915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b612b0b81612ad6565b82525050565b612b1a816124ea565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612b5581612528565b82525050565b6000612b678383612b4c565b60208301905092915050565b6000602082019050919050565b6000612b8b82612b20565b612b958185612b2b565b9350612ba083612b3c565b8060005b83811015612bd1578151612bb88882612b5b565b9750612bc383612b73565b925050600181019050612ba4565b5085935050505092915050565b600060e082019050612bf3600083018a612b02565b8181036020830152612c05818961245b565b90508181036040830152612c19818861245b565b9050612c2860608301876125d4565b612c356080830186612b11565b612c4260a0830185612692565b81810360c0830152612c548184612b80565b905098975050505050505050565b600080600060608486031215612c7b57612c7a6124c0565b5b6000612c8986828701612513565b9350506020612c9a86828701612513565b925050604084013567ffffffffffffffff811115612cbb57612cba6124c5565b5b612cc7868287016126c1565b9150509250925092565b612cda81612528565b8114612ce557600080fd5b50565b600081359050612cf781612cd1565b92915050565b600080600060608486031215612d1657612d156124c0565b5b6000612d2486828701612513565b9350506020612d3586828701612513565b9250506040612d4686828701612ce8565b9150509250925092565b60008060408385031215612d6757612d666124c0565b5b6000612d7585828601612513565b9250506020612d8685828601612ce8565b9150509250929050565b612d9981612651565b8114612da457600080fd5b50565b600081359050612db681612d90565b92915050565b600080600080600080600060e0888a031215612ddb57612dda6124c0565b5b6000612de98a828b01612513565b9750506020612dfa8a828b01612513565b9650506040612e0b8a828b01612549565b9550506060612e1c8a828b01612549565b9450506080612e2d8a828b01612da7565b93505060a0612e3e8a828b016128a9565b92505060c0612e4f8a828b016128a9565b91505092959891949750929550565b60008060408385031215612e7557612e746124c0565b5b6000612e8385828601612513565b9250506020612e9485828601612513565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612ee557607f821691505b602082108103612ef857612ef7612e9e565b5b50919050565b600060208284031215612f1457612f1361280d565b5b612f1e6020612872565b9050600082013567ffffffffffffffff811115612f3e57612f3d61288d565b5b612f4a8482850161294a565b60008301525092915050565b6000612f623683612efe565b9050919050565b6000612f753683612978565b9050919050565b6000604082019050612f916000830185612692565b612f9e6020830184612692565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000612fcc82612fa5565b612fd68185612fb0565b9350612fe6818560208601612420565b612fef8161244a565b840191505092915050565b600060408201905061300f600083018561265e565b81810360208301526130218184612fc1565b90509392505050565b60008151905061303981612532565b92915050565b600060208284031215613055576130546124c0565b5b60006130638482850161302a565b91505092915050565b60006020820190506130816000830184612b11565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000819050919050565b6130d16130cc82612688565b6130b6565b82525050565b60006130e382846130c0565b60208201915081905092915050565b6000606082019050613107600083018661265e565b81810360208301526131198185612fc1565b9050818103604083015261312d8184612fc1565b9050949350505050565b600067ffffffffffffffff82111561315257613151612812565b5b61315b8261244a565b9050602081019050919050565b600061317b61317684613137565b612872565b905082815260208101848484011115613197576131966128c3565b5b6131a2848285612420565b509392505050565b600082601f8301126131bf576131be6128be565b5b81516131cf848260208601613168565b91505092915050565b6000602082840312156131ee576131ed6124c0565b5b600082015167ffffffffffffffff81111561320c5761320b6124c5565b5b613218848285016131aa565b91505092915050565b6000604082019050818103600083015261323b8185612fc1565b905061324a602083018461265e565b9392505050565b600061326461325f846128c8565b612872565b9050828152602081018484840111156132805761327f6128c3565b5b61328b848285612420565b509392505050565b600082601f8301126132a8576132a76128be565b5b81516132b8848260208601613251565b91505092915050565b6000602082840312156132d7576132d66124c0565b5b600082015167ffffffffffffffff8111156132f5576132f46124c5565b5b61330184828501613293565b91505092915050565b600060808201905061331f600083018761265e565b81810360208301526133318186612fc1565b905081810360408301526133458185612fc1565b905081810360608301526133598184612fc1565b905095945050505050565b600060a0820190506133796000830188612692565b6133866020830187612692565b6133936040830186612692565b6133a060608301856125d4565b6133ad6080830184612b11565b9695505050505050565b60006080820190506133cc6000830187612692565b6133d9602083018661265e565b6133e66040830185612692565b6133f36060830184612692565b9594505050505056fea26469706673582212206fbeb8e1ec3f02417977449b5aeaa49948b06e45fb35839779a0eb78b912ebec64736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AllowanceOverflow()": [
        {
          "details": "The allowance has overflowed."
        }
      ],
      "AllowanceUnderflow()": [
        {
          "details": "The allowance has underflowed."
        }
      ],
      "ECDSAInvalidSignature()": [
        {
          "details": "The signature derives the `address(0)`."
        }
      ],
      "ECDSAInvalidSignatureLength(uint256)": [
        {
          "details": "The signature has an invalid length."
        }
      ],
      "ECDSAInvalidSignatureS(bytes32)": [
        {
          "details": "The signature has an S value that is in the upper half order."
        }
      ],
      "InsufficientAllowance()": [
        {
          "details": "Insufficient allowance."
        }
      ],
      "InsufficientBalance()": [
        {
          "details": "Insufficient balance."
        }
      ],
      "InvalidPermit()": [
        {
          "details": "The permit is invalid."
        }
      ],
      "PermitExpired()": [
        {
          "details": "The permit has expired."
        }
      ],
      "TotalSupplyOverflow()": [
        {
          "details": "The total supply has overflowed."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `amount` tokens is approved by `owner` to be used by `spender`."
      },
      "ApprovalEncrypted(address,address)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approveEncrypted}. `value` is the new allowance."
      },
      "EIP712DomainChanged()": {
        "details": "MAY be emitted to signal that the domain could have changed."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `amount` tokens is transferred from `from` to `to`."
      },
      "TransferEncrypted(address,address)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "Returns the EIP-712 domain separator for the EIP-2612 permit."
      },
      "allowance(address,address)": {
        "details": "Returns the amount of tokens that `spender` can spend on behalf of `owner`."
      },
      "allowanceEncrypted(address,(bytes32,bytes))": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Emits a {Approval} event."
      },
      "approveEncrypted(address,(bytes))": {
        "details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {ApprovalEncrypted} event."
      },
      "balanceOf(address)": {
        "details": "Returns the amount of tokens owned by `owner`."
      },
      "balanceOfEncrypted(address,(bytes32,bytes))": {
        "details": "Returns the value of tokens owned by `account`, sealed and encrypted for the caller."
      },
      "decimals()": {
        "details": "Returns the decimals places of the token."
      },
      "eip712Domain()": {
        "details": "See {IERC-5267}."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "nonces(address)": {
        "details": "Returns the current nonce for `owner`. This value is used to compute the signature for EIP-2612 permit."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Sets `value` as the allowance of `spender` over the tokens of `owner`, authorized by a signed approval by `owner`. Emits a {Approval} event."
      },
      "symbol()": {
        "details": "Returns the symbol of the token."
      },
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      },
      "transfer(address,uint256)": {
        "details": "Transfer `amount` tokens from the caller to `to`. Requirements: - `from` must at least have `amount`. Emits a {Transfer} event."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `amount` tokens from `from` to `to`. Note: Does not update the allowance if it is the maximum uint256 value. Requirements: - `from` must at least have `amount`. - The caller must have at least `amount` of allowance to transfer the tokens of `from`. Emits a {Transfer} event."
      },
      "transferFromEncrypted(address,address,(bytes))": {
        "details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {TransferEncrypted} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "SignerNotMessageSender()": [
        {
          "notice": "Emitted when the signer is not the message sender"
        }
      ],
      "SignerNotOwner()": [
        {
          "notice": "Emitted when the signer is not the specified owner"
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16568,
        "contract": "contracts/FakeUSD.sol:FakeUSD",
        "label": "_nameFallback",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 16570,
        "contract": "contracts/FakeUSD.sol:FakeUSD",
        "label": "_versionFallback",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 20751,
        "contract": "contracts/FakeUSD.sol:FakeUSD",
        "label": "_encBalances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_userDefinedValueType(euint32)12)"
      },
      {
        "astId": 20758,
        "contract": "contracts/FakeUSD.sol:FakeUSD",
        "label": "_allowed",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_userDefinedValueType(euint32)12))"
      },
      {
        "astId": 20765,
        "contract": "contracts/FakeUSD.sol:FakeUSD",
        "label": "totalEncryptedSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_userDefinedValueType(euint32)12"
      },
      {
        "astId": 20767,
        "contract": "contracts/FakeUSD.sol:FakeUSD",
        "label": "_name",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 20769,
        "contract": "contracts/FakeUSD.sol:FakeUSD",
        "label": "_symbol",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_userDefinedValueType(euint32)12))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => euint32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_userDefinedValueType(euint32)12)"
      },
      "t_mapping(t_address,t_userDefinedValueType(euint32)12)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => euint32)",
        "numberOfBytes": "32",
        "value": "t_userDefinedValueType(euint32)12"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_userDefinedValueType(euint32)12": {
        "encoding": "inplace",
        "label": "euint32",
        "numberOfBytes": "32"
      }
    }
  }
}